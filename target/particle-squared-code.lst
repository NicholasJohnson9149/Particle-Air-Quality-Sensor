
/Users/nicholas/Documents/Software/particle/particle-squared-code/target/particle-squared-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d83c0  000d83c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00019860  2**0
                  CONTENTS
  4 .data         0000146c  2003ce8c  000d83c8  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004f8  2003e2f8  2003e2f8  0001e2f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9834  000d9834  00019834  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d985c  000d985c  0001985c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f83fc  00000000  00000000  00019860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015d96  00000000  00000000  00111c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018aeb  00000000  00000000  001279f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002358  00000000  00000000  001404dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003988  00000000  00000000  00142835  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c311  00000000  00000000  001461bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000352aa  00000000  00000000  001824ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e7640  00000000  00000000  001b7778  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c5a4  00000000  00000000  0029edb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	70 7d 0d 00                                         p}..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fda7 	bl	d7b80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fdac 	bl	d7b96 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003ce8c 	.word	0x2003ce8c
   d4048:	000d83c8 	.word	0x000d83c8
   d404c:	2003e2f8 	.word	0x2003e2f8
   d4050:	2003e2f8 	.word	0x2003e2f8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd6b 	bl	d6b34 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d83c0 	.word	0x000d83c0
   d4080:	000d8370 	.word	0x000d8370

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf24 	b.w	d4ed0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd9f 	bl	d4bcc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd1d 	b.w	d6ad0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bbdf 	b.w	d5858 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bbe5 	b.w	d5868 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bbe3 	b.w	d5868 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	689b      	ldr	r3, [r3, #8]
   d40b8:	4718      	bx	r3

000d40ba <_ZN6CCS811C1Ev>:
 * License: GNU GPLv3
 */

#include "ccs811.h"

CCS811::CCS811() {}
   d40ba:	4770      	bx	lr

000d40bc <_ZN6CCS81111int_handlerEv>:

void CCS811::int_handler() {
  this->data_ready = true;
   d40bc:	2301      	movs	r3, #1
   d40be:	72c3      	strb	r3, [r0, #11]
   d40c0:	4770      	bx	lr

000d40c2 <_ZN6CCS8115setupEP13ccs811_init_t>:
}

uint32_t CCS811::setup( ccs811_init_t * p_init ) {
   d40c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40c4:	4604      	mov	r4, r0

  // Return an error if init is NULL
  if( p_init == NULL ) {
   d40c6:	2900      	cmp	r1, #0
   d40c8:	d05f      	beq.n	d418a <_ZN6CCS8115setupEP13ccs811_init_t+0xc8>
    return CCS811_NULL_ERROR;
  }

  // Configures the important stuff
  this->int_pin       = p_init->int_pin;
   d40ca:	7a08      	ldrb	r0, [r1, #8]
   d40cc:	7220      	strb	r0, [r4, #8]
  this->address       = p_init->address;
   d40ce:	780b      	ldrb	r3, [r1, #0]
   d40d0:	7023      	strb	r3, [r4, #0]
  this->rst_pin       = p_init->rst_pin;
   d40d2:	7a4b      	ldrb	r3, [r1, #9]
   d40d4:	7263      	strb	r3, [r4, #9]
  this->pin_interrupt = p_init->pin_interrupt;
   d40d6:	684b      	ldr	r3, [r1, #4]
   d40d8:	6063      	str	r3, [r4, #4]
  this->wake_pin      = p_init->wake_pin;
   d40da:	7a8b      	ldrb	r3, [r1, #10]
   d40dc:	72a3      	strb	r3, [r4, #10]

  // Configure the pin interrupt
  pinMode(this->int_pin, INPUT);
  attachInterrupt(this->int_pin, this->pin_interrupt, FALLING);
   d40de:	2500      	movs	r5, #0
  this->rst_pin       = p_init->rst_pin;
  this->pin_interrupt = p_init->pin_interrupt;
  this->wake_pin      = p_init->wake_pin;

  // Configure the pin interrupt
  pinMode(this->int_pin, INPUT);
   d40e0:	2100      	movs	r1, #0
   d40e2:	f002 fd67 	bl	d6bb4 <pinMode>
  attachInterrupt(this->int_pin, this->pin_interrupt, FALLING);
   d40e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d40ea:	2202      	movs	r2, #2
   d40ec:	6861      	ldr	r1, [r4, #4]
   d40ee:	7a20      	ldrb	r0, [r4, #8]
   d40f0:	9500      	str	r5, [sp, #0]
   d40f2:	f001 ff6f 	bl	d5fd4 <_Z15attachInterrupttPFvvE13InterruptModeah>

  // Wake it up
  pinMode(this->wake_pin, OUTPUT);
   d40f6:	2101      	movs	r1, #1
   d40f8:	7aa0      	ldrb	r0, [r4, #10]
   d40fa:	f002 fd5b 	bl	d6bb4 <pinMode>
  digitalWrite(this->wake_pin, LOW); // Has a pullup
   d40fe:	4629      	mov	r1, r5
   d4100:	7aa0      	ldrb	r0, [r4, #10]
   d4102:	f002 fd68 	bl	d6bd6 <digitalWrite>

  // Toggle reset pin
  pinMode(this->rst_pin, OUTPUT);
   d4106:	2101      	movs	r1, #1
   d4108:	7a60      	ldrb	r0, [r4, #9]
   d410a:	f002 fd53 	bl	d6bb4 <pinMode>
  digitalWrite(this->rst_pin, LOW);
   d410e:	4629      	mov	r1, r5
   d4110:	7a60      	ldrb	r0, [r4, #9]
   d4112:	f002 fd60 	bl	d6bd6 <digitalWrite>
  delay(1);
   d4116:	2001      	movs	r0, #1
   d4118:	f001 fbce 	bl	d58b8 <delay>
  pinMode(this->rst_pin, INPUT);
   d411c:	4629      	mov	r1, r5
   d411e:	7a60      	ldrb	r0, [r4, #9]
   d4120:	f002 fd48 	bl	d6bb4 <pinMode>
  delay(30);
   d4124:	201e      	movs	r0, #30
   d4126:	f001 fbc7 	bl	d58b8 <delay>

  // Run the app
  Wire.beginTransmission(this->address);
   d412a:	f002 fdc5 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d412e:	7821      	ldrb	r1, [r4, #0]
   d4130:	f001 ff3d 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_START_APP); // sends register address
   d4134:	f002 fdc0 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4138:	21f4      	movs	r1, #244	; 0xf4
   d413a:	f7ff ffba 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  // stop transaction
   d413e:	f002 fdbb 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4142:	f001 ff3f 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>

  delay(30);
   d4146:	201e      	movs	r0, #30
   d4148:	f001 fbb6 	bl	d58b8 <delay>

  Wire.beginTransmission(this->address);
   d414c:	f002 fdb4 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4150:	7821      	ldrb	r1, [r4, #0]
   d4152:	f001 ff2c 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_STATUS_REG);
   d4156:	f002 fdaf 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d415a:	4629      	mov	r1, r5
   d415c:	f7ff ffa9 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  // stop transaction
   d4160:	f002 fdaa 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4164:	f001 ff2e 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(this->address,(uint8_t)1);
   d4168:	f002 fda6 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d416c:	2201      	movs	r2, #1
   d416e:	7821      	ldrb	r1, [r4, #0]
   d4170:	f001 ff15 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>

  uint8_t status = Wire.read();
   d4174:	f002 fda0 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4178:	6803      	ldr	r3, [r0, #0]
   d417a:	695b      	ldr	r3, [r3, #20]
   d417c:	4798      	blx	r3

  // Checks if the app is running
  if( status & CCS811_FW_MODE_RUN ) {
    return CCS811_SUCCESS;
  } else {
    return CCS811_RUN_ERROR;
   d417e:	f010 0f90 	tst.w	r0, #144	; 0x90
   d4182:	bf14      	ite	ne
   d4184:	4628      	movne	r0, r5
   d4186:	2003      	moveq	r0, #3
   d4188:	e000      	b.n	d418c <_ZN6CCS8115setupEP13ccs811_init_t+0xca>

uint32_t CCS811::setup( ccs811_init_t * p_init ) {

  // Return an error if init is NULL
  if( p_init == NULL ) {
    return CCS811_NULL_ERROR;
   d418a:	2001      	movs	r0, #1
    return CCS811_SUCCESS;
  } else {
    return CCS811_RUN_ERROR;
  }

}
   d418c:	b003      	add	sp, #12
   d418e:	bd30      	pop	{r4, r5, pc}

000d4190 <_ZN6CCS8117set_envEff>:

uint32_t CCS811::set_env(float temp, float hum) {
   d4190:	b537      	push	{r0, r1, r2, r4, r5, lr}

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d4192:	eefc 0ae0 	vcvt.u32.f32	s1, s1
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d4196:	eebc 0ac0 	vcvt.u32.f32	s0, s0

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d419a:	ee10 3a90 	vmov	r3, s1
   d419e:	005b      	lsls	r3, r3, #1
   d41a0:	f88d 3004 	strb.w	r3, [sp, #4]
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d41a4:	ee10 3a10 	vmov	r3, s0
    return CCS811_RUN_ERROR;
  }

}

uint32_t CCS811::set_env(float temp, float hum) {
   d41a8:	4605      	mov	r5, r0
  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d41aa:	3319      	adds	r3, #25
   d41ac:	005b      	lsls	r3, r3, #1

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d41ae:	2400      	movs	r4, #0
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d41b0:	f88d 3006 	strb.w	r3, [sp, #6]

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d41b4:	f88d 4005 	strb.w	r4, [sp, #5]
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d41b8:	f88d 4007 	strb.w	r4, [sp, #7]

  // Write this
  Wire.beginTransmission(this->address);
   d41bc:	f002 fd7c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d41c0:	7829      	ldrb	r1, [r5, #0]
   d41c2:	f001 fef4 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_ENV_REG);
   d41c6:	f002 fd77 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d41ca:	2105      	movs	r1, #5
   d41cc:	f7ff ff71 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.write(data,sizeof(data));
   d41d0:	f002 fd72 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d41d4:	6803      	ldr	r3, [r0, #0]
   d41d6:	2204      	movs	r2, #4
   d41d8:	68db      	ldr	r3, [r3, #12]
   d41da:	eb0d 0102 	add.w	r1, sp, r2
   d41de:	4798      	blx	r3
  Wire.endTransmission();  // stop transaction
   d41e0:	f002 fd6a 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d41e4:	f001 feee 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>

  return CCS811_SUCCESS;

}
   d41e8:	4620      	mov	r0, r4
   d41ea:	b003      	add	sp, #12
   d41ec:	bd30      	pop	{r4, r5, pc}

000d41ee <_ZN6CCS8116enableEv>:

uint32_t CCS811::enable(void) {
   d41ee:	b538      	push	{r3, r4, r5, lr}
   d41f0:	4605      	mov	r5, r0

  uint32_t err_code;

  // Set mode to 10 sec mode & enable int
  Wire.beginTransmission(this->address);
   d41f2:	f002 fd61 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d41f6:	7829      	ldrb	r1, [r5, #0]
   d41f8:	f001 fed9 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_MEAS_MODE_REG); // sends register address
   d41fc:	f002 fd5c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4200:	2101      	movs	r1, #1
   d4202:	f7ff ff56 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.write(CCS811_CONSTANT_MODE | CCS811_INT_EN);     // enables consant mode with interrupt
   d4206:	f002 fd57 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d420a:	2128      	movs	r1, #40	; 0x28
   d420c:	f7ff ff51 	bl	d40b2 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();           // stop transaction
   d4210:	f002 fd52 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4214:	f001 fed6 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0 ){
   d4218:	4604      	mov	r4, r0
   d421a:	bb08      	cbnz	r0, d4260 <_ZN6CCS8116enableEv+0x72>
    return err_code;
  }

  // Clear any interrupts
  Wire.beginTransmission(this->address);
   d421c:	f002 fd4c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4220:	7829      	ldrb	r1, [r5, #0]
   d4222:	f001 fec4 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_RESULT_REG); // sends register address
   d4226:	f002 fd47 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d422a:	2102      	movs	r1, #2
   d422c:	f7ff ff41 	bl	d40b2 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission(false);  // stop transaction
   d4230:	f002 fd42 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4234:	4621      	mov	r1, r4
   d4236:	f001 fec1 	bl	d5fbc <_ZN7TwoWire15endTransmissionEh>
  if( err_code != 0 ){
   d423a:	b988      	cbnz	r0, d4260 <_ZN6CCS8116enableEv+0x72>
    return err_code;
  }

  // Flush bytes
  Wire.requestFrom(this->address, (uint8_t)4); // Read the bytes
   d423c:	f002 fd3c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4240:	2204      	movs	r2, #4
   d4242:	7829      	ldrb	r1, [r5, #0]
   d4244:	f001 feab 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>
  while(Wire.available()) {
   d4248:	f002 fd36 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d424c:	6803      	ldr	r3, [r0, #0]
   d424e:	691b      	ldr	r3, [r3, #16]
   d4250:	4798      	blx	r3
   d4252:	b128      	cbz	r0, d4260 <_ZN6CCS8116enableEv+0x72>
    Wire.read();
   d4254:	f002 fd30 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4258:	6803      	ldr	r3, [r0, #0]
   d425a:	695b      	ldr	r3, [r3, #20]
   d425c:	4798      	blx	r3
    return err_code;
  }

  // Flush bytes
  Wire.requestFrom(this->address, (uint8_t)4); // Read the bytes
  while(Wire.available()) {
   d425e:	e7f3      	b.n	d4248 <_ZN6CCS8116enableEv+0x5a>
    Wire.read();
  }

  return CCS811_SUCCESS;

}
   d4260:	bd38      	pop	{r3, r4, r5, pc}

000d4262 <_ZN6CCS81113save_baselineEv>:

uint32_t CCS811::save_baseline() {
   d4262:	b513      	push	{r0, r1, r4, lr}
   d4264:	4604      	mov	r4, r0

  Wire.beginTransmission(this->address);
   d4266:	f002 fd27 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d426a:	7821      	ldrb	r1, [r4, #0]
   d426c:	f001 fe9f 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_BASELINE_REG); // sends register address
   d4270:	f002 fd22 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4274:	2111      	movs	r1, #17
   d4276:	f7ff ff1c 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  // stop transaction
   d427a:	f002 fd1d 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d427e:	f001 fea1 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(this->address, (uint8_t)2); // request the bytes
   d4282:	f002 fd19 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4286:	7821      	ldrb	r1, [r4, #0]
   d4288:	2202      	movs	r2, #2
   d428a:	f001 fe88 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>

  uint8_t baseline[2];
  baseline[0] = Wire.read();
   d428e:	f002 fd13 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4292:	6803      	ldr	r3, [r0, #0]
   d4294:	695b      	ldr	r3, [r3, #20]
   d4296:	4798      	blx	r3
   d4298:	f88d 0004 	strb.w	r0, [sp, #4]
  baseline[1] = Wire.read();
   d429c:	f002 fd0c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d42a0:	6803      	ldr	r3, [r0, #0]
   d42a2:	695b      	ldr	r3, [r3, #20]
   d42a4:	4798      	blx	r3
   d42a6:	f88d 0005 	strb.w	r0, [sp, #5]

  // Write to the address
  EEPROM.put(CCS811_BASELINE_ADDR, baseline);
   d42aa:	f002 fcf1 	bl	d6c90 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d42ae:	2202      	movs	r2, #2
   d42b0:	a901      	add	r1, sp, #4
   d42b2:	200a      	movs	r0, #10
   d42b4:	f001 f8cc 	bl	d5450 <HAL_EEPROM_Put>

  return NRF_SUCCESS;
}
   d42b8:	2000      	movs	r0, #0
   d42ba:	b002      	add	sp, #8
   d42bc:	bd10      	pop	{r4, pc}

000d42be <_ZN6CCS81116restore_baselineEv>:

uint32_t CCS811::restore_baseline() {
   d42be:	b513      	push	{r0, r1, r4, lr}
   d42c0:	4604      	mov	r4, r0

  uint32_t err_code;
  uint8_t baseline[2];

  // Get the baseline to the address
  EEPROM.get(CCS811_BASELINE_ADDR, baseline);
   d42c2:	f002 fce5 	bl	d6c90 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d42c6:	2202      	movs	r2, #2
   d42c8:	a901      	add	r1, sp, #4
   d42ca:	200a      	movs	r0, #10
   d42cc:	f001 f8b8 	bl	d5440 <HAL_EEPROM_Get>

  // If it's uninitialized, return invalid data
  if ( baseline[0] == 0xff && baseline[1] == 0xff) {
   d42d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42d4:	2bff      	cmp	r3, #255	; 0xff
   d42d6:	d103      	bne.n	d42e0 <_ZN6CCS81116restore_baselineEv+0x22>
   d42d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d42dc:	2bff      	cmp	r3, #255	; 0xff
   d42de:	d01c      	beq.n	d431a <_ZN6CCS81116restore_baselineEv+0x5c>
    return NRF_ERROR_INVALID_DATA;
  }

  // Write to the chip
  Wire.beginTransmission(this->address);
   d42e0:	f002 fcea 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d42e4:	7821      	ldrb	r1, [r4, #0]
   d42e6:	f001 fe62 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_BASELINE_REG); // sends register address
   d42ea:	f002 fce5 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d42ee:	2111      	movs	r1, #17
   d42f0:	f7ff fedf 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.write(baseline[0]);
   d42f4:	f002 fce0 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d42f8:	6803      	ldr	r3, [r0, #0]
   d42fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d42fe:	689b      	ldr	r3, [r3, #8]
   d4300:	4798      	blx	r3
  Wire.write(baseline[1]);
   d4302:	f002 fcd9 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4306:	6803      	ldr	r3, [r0, #0]
   d4308:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d430c:	689b      	ldr	r3, [r3, #8]
   d430e:	4798      	blx	r3
  err_code = Wire.endTransmission();           // stop transaction
   d4310:	f002 fcd2 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4314:	f001 fe56 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
   d4318:	e000      	b.n	d431c <_ZN6CCS81116restore_baselineEv+0x5e>
  // Get the baseline to the address
  EEPROM.get(CCS811_BASELINE_ADDR, baseline);

  // If it's uninitialized, return invalid data
  if ( baseline[0] == 0xff && baseline[1] == 0xff) {
    return NRF_ERROR_INVALID_DATA;
   d431a:	200b      	movs	r0, #11
  if( err_code != 0 ){
    return err_code;
  }

  return NRF_SUCCESS;
}
   d431c:	b002      	add	sp, #8
   d431e:	bd10      	pop	{r4, pc}

000d4320 <_ZN6CCS8114readEP13ccs811_data_t>:

uint32_t CCS811::read(ccs811_data_t * p_data) {
   d4320:	b538      	push	{r3, r4, r5, lr}

  // If the data is ready, read
  if( this->data_ready ) {
   d4322:	7ac3      	ldrb	r3, [r0, #11]
  }

  return NRF_SUCCESS;
}

uint32_t CCS811::read(ccs811_data_t * p_data) {
   d4324:	4605      	mov	r5, r0
   d4326:	460c      	mov	r4, r1

  // If the data is ready, read
  if( this->data_ready ) {
   d4328:	2b00      	cmp	r3, #0
   d432a:	d03a      	beq.n	d43a2 <_ZN6CCS8114readEP13ccs811_data_t+0x82>

      // Disable flag
      this->data_ready = false;
   d432c:	2300      	movs	r3, #0
   d432e:	72c3      	strb	r3, [r0, #11]

      Wire.beginTransmission(this->address);
   d4330:	f002 fcc2 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4334:	7829      	ldrb	r1, [r5, #0]
   d4336:	f001 fe3a 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
      Wire.write(CCS811_RESULT_REG); // sends register address
   d433a:	f002 fcbd 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d433e:	2102      	movs	r1, #2
   d4340:	f7ff feb7 	bl	d40b2 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();  // stop transaction
   d4344:	f002 fcb8 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4348:	f001 fe3c 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(this->address, (uint8_t)4); // request the bytes
   d434c:	f002 fcb4 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4350:	7829      	ldrb	r1, [r5, #0]
   d4352:	2204      	movs	r2, #4
   d4354:	f001 fe23 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>

      // Convert data to something useful
      p_data->c02 = Wire.read();
   d4358:	f002 fcae 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d435c:	6803      	ldr	r3, [r0, #0]
   d435e:	695b      	ldr	r3, [r3, #20]
   d4360:	4798      	blx	r3
   d4362:	b285      	uxth	r5, r0
   d4364:	8025      	strh	r5, [r4, #0]
      p_data->c02 = (p_data->c02<<8) + Wire.read();
   d4366:	f002 fca7 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d436a:	6803      	ldr	r3, [r0, #0]
   d436c:	695b      	ldr	r3, [r3, #20]
   d436e:	4798      	blx	r3
   d4370:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4374:	8020      	strh	r0, [r4, #0]

      p_data->tvoc = Wire.read();
   d4376:	f002 fc9f 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d437a:	6803      	ldr	r3, [r0, #0]
   d437c:	695b      	ldr	r3, [r3, #20]
   d437e:	4798      	blx	r3
   d4380:	b285      	uxth	r5, r0
   d4382:	8065      	strh	r5, [r4, #2]
      p_data->tvoc = (p_data->tvoc<<8) + Wire.read();
   d4384:	f002 fc98 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	4798      	blx	r3

      // Serial.printf("c02: %dppm tvoc: %dppb\n",p_data->c02,p_data->tvoc);

      // If this value is < 400 not ready yet
      if ( p_data->c02 < CCS811_MIN_C02_LEVEL ) {
   d438e:	8823      	ldrh	r3, [r4, #0]
      // Convert data to something useful
      p_data->c02 = Wire.read();
      p_data->c02 = (p_data->c02<<8) + Wire.read();

      p_data->tvoc = Wire.read();
      p_data->tvoc = (p_data->tvoc<<8) + Wire.read();
   d4390:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4394:	8060      	strh	r0, [r4, #2]

      // Serial.printf("c02: %dppm tvoc: %dppb\n",p_data->c02,p_data->tvoc);

      // If this value is < 400 not ready yet
      if ( p_data->c02 < CCS811_MIN_C02_LEVEL ) {
   d4396:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
        return CCS811_DAT_INVALID;
      }

      return CCS811_SUCCESS;
   d439a:	bf34      	ite	cc
   d439c:	2007      	movcc	r0, #7
   d439e:	2000      	movcs	r0, #0
   d43a0:	bd38      	pop	{r3, r4, r5, pc}
  } else {
      return CCS811_NO_DAT_AVAIL;
   d43a2:	2002      	movs	r0, #2
  }

}
   d43a4:	bd38      	pop	{r3, r4, r5, pc}

000d43a6 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>:

uint32_t CCS811::get_app_version(ccs811_app_ver_t * p_app_ver) {
   d43a6:	b570      	push	{r4, r5, r6, lr}
   d43a8:	4606      	mov	r6, r0
   d43aa:	460d      	mov	r5, r1

  uint32_t err_code;

  Wire.beginTransmission(this->address);
   d43ac:	f002 fc84 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43b0:	7831      	ldrb	r1, [r6, #0]
   d43b2:	f001 fdfc 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_APP_VER_REG); // sends register address
   d43b6:	f002 fc7f 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43ba:	2124      	movs	r1, #36	; 0x24
   d43bc:	f7ff fe79 	bl	d40b2 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d43c0:	f002 fc7a 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43c4:	f001 fdfe 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d43c8:	4604      	mov	r4, r0
   d43ca:	b9d0      	cbnz	r0, d4402 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t+0x5c>
    return CCS811_COMM_ERR;
  }

  uint8_t num_bytes = Wire.requestFrom(this->address, (uint8_t)2); // request the bytes
   d43cc:	f002 fc74 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43d0:	2202      	movs	r2, #2
   d43d2:	7831      	ldrb	r1, [r6, #0]
   d43d4:	f001 fde3 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>

  // If  not enough bytes were read, error!
  if( num_bytes != 2) {
   d43d8:	2802      	cmp	r0, #2
   d43da:	d114      	bne.n	d4406 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t+0x60>
    return CCS811_NO_DAT_AVAIL;
  }

  // Convert data to something useful
  uint8_t majorminor = Wire.read();
   d43dc:	f002 fc6c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43e0:	6803      	ldr	r3, [r0, #0]
   d43e2:	695b      	ldr	r3, [r3, #20]
   d43e4:	4798      	blx	r3
   d43e6:	b2c0      	uxtb	r0, r0

  // MSB is split into two. First nibble major, second is the  minor
  p_app_ver->major = (majorminor >> 4) & 0x0f;
   d43e8:	0903      	lsrs	r3, r0, #4
  p_app_ver->minor = majorminor & 0x0f;
   d43ea:	f000 000f 	and.w	r0, r0, #15

  // Convert data to something useful
  uint8_t majorminor = Wire.read();

  // MSB is split into two. First nibble major, second is the  minor
  p_app_ver->major = (majorminor >> 4) & 0x0f;
   d43ee:	702b      	strb	r3, [r5, #0]
  p_app_ver->minor = majorminor & 0x0f;
   d43f0:	7068      	strb	r0, [r5, #1]
  p_app_ver->trivial = Wire.read();
   d43f2:	f002 fc61 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d43f6:	6803      	ldr	r3, [r0, #0]
   d43f8:	695b      	ldr	r3, [r3, #20]
   d43fa:	4798      	blx	r3
   d43fc:	70a8      	strb	r0, [r5, #2]
   d43fe:	4620      	mov	r0, r4
   d4400:	bd70      	pop	{r4, r5, r6, pc}

  Wire.beginTransmission(this->address);
  Wire.write(CCS811_APP_VER_REG); // sends register address
  err_code = Wire.endTransmission();  // stop transaction
  if( err_code != 0) {
    return CCS811_COMM_ERR;
   d4402:	2004      	movs	r0, #4
   d4404:	bd70      	pop	{r4, r5, r6, pc}

  uint8_t num_bytes = Wire.requestFrom(this->address, (uint8_t)2); // request the bytes

  // If  not enough bytes were read, error!
  if( num_bytes != 2) {
    return CCS811_NO_DAT_AVAIL;
   d4406:	2002      	movs	r0, #2
  // Serial.printf("%x %x",majorminor,p_app_ver->trivial );

  return CCS811_SUCCESS;


}
   d4408:	bd70      	pop	{r4, r5, r6, pc}
	...

000d440c <_ZN6CCS81110update_appEPK19ccs811_app_update_t>:


uint32_t CCS811::update_app(const ccs811_app_update_t * p_app_update) {
   d440c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4410:	4605      	mov	r5, r0
   d4412:	b087      	sub	sp, #28

  if( p_app_update == NULL ) {
   d4414:	460e      	mov	r6, r1
   d4416:	b189      	cbz	r1, d443c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x30>
  }

  ccs811_app_ver_t current_ver;

  // Check the version
  uint32_t err_code = this->get_app_version(&current_ver);
   d4418:	a901      	add	r1, sp, #4
   d441a:	f7ff ffc4 	bl	d43a6 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>

  // Return if not success
  if( err_code != 0 ) {
   d441e:	2800      	cmp	r0, #0
   d4420:	f040 80c4 	bne.w	d45ac <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  }

  bool start_update = false;

  // If any of the version information is not equal, update
  if( p_app_update->ver.major > current_ver.major ||
   d4424:	7832      	ldrb	r2, [r6, #0]
   d4426:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d442a:	429a      	cmp	r2, r3
   d442c:	d808      	bhi.n	d4440 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x34>
   d442e:	7872      	ldrb	r2, [r6, #1]
   d4430:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4434:	429a      	cmp	r2, r3
   d4436:	d803      	bhi.n	d4440 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x34>
    start_update = true;
  }

  // Return if there's no update
  if( !start_update ) {
    return CCS811_NO_UPDATE_NEEDED;
   d4438:	2005      	movs	r0, #5
   d443a:	e0b7      	b.n	d45ac <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>


uint32_t CCS811::update_app(const ccs811_app_update_t * p_app_update) {

  if( p_app_update == NULL ) {
    return CCS811_NULL_ERROR;
   d443c:	2001      	movs	r0, #1
   d443e:	e0b5      	b.n	d45ac <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  // Return if there's no update
  if( !start_update ) {
    return CCS811_NO_UPDATE_NEEDED;
  }

  Serial.println("start update");
   d4440:	f002 fac4 	bl	d69cc <_Z16_fetch_usbserialv>
   d4444:	495b      	ldr	r1, [pc, #364]	; (d45b4 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a8>)
   d4446:	f001 ffee 	bl	d6426 <_ZN5Print7printlnEPKc>

  // Otherwise there is an update
  // Toggle reset pin
  pinMode(this->rst_pin, OUTPUT);
   d444a:	2101      	movs	r1, #1
   d444c:	7a68      	ldrb	r0, [r5, #9]
   d444e:	f002 fbb1 	bl	d6bb4 <pinMode>
  digitalWrite(this->rst_pin, LOW);
   d4452:	2100      	movs	r1, #0
   d4454:	7a68      	ldrb	r0, [r5, #9]
   d4456:	f002 fbbe 	bl	d6bd6 <digitalWrite>
  delay(1);
   d445a:	2001      	movs	r0, #1
   d445c:	f001 fa2c 	bl	d58b8 <delay>
  pinMode(this->rst_pin, INPUT);
   d4460:	2100      	movs	r1, #0
   d4462:	7a68      	ldrb	r0, [r5, #9]
   d4464:	f002 fba6 	bl	d6bb4 <pinMode>
  delay(30);
   d4468:	201e      	movs	r0, #30
   d446a:	f001 fa25 	bl	d58b8 <delay>

  // Erase codee
  uint8_t cmd[] = CCS811_ERASE_CODE;
   d446e:	4b52      	ldr	r3, [pc, #328]	; (d45b8 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1ac>)
   d4470:	6818      	ldr	r0, [r3, #0]
   d4472:	9002      	str	r0, [sp, #8]

  Serial.println("erase");
   d4474:	f002 faaa 	bl	d69cc <_Z16_fetch_usbserialv>
   d4478:	4950      	ldr	r1, [pc, #320]	; (d45bc <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b0>)
   d447a:	f001 ffd4 	bl	d6426 <_ZN5Print7printlnEPKc>

  // Begin the process
  Wire.beginTransmission(this->address);
   d447e:	f002 fc1b 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4482:	7829      	ldrb	r1, [r5, #0]
   d4484:	f001 fd93 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_ERASE_REG); // sends register address
   d4488:	f002 fc16 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d448c:	21f1      	movs	r1, #241	; 0xf1
   d448e:	f7ff fe10 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.write(cmd, sizeof(cmd));
   d4492:	f002 fc11 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4496:	6803      	ldr	r3, [r0, #0]
   d4498:	2204      	movs	r2, #4
   d449a:	68db      	ldr	r3, [r3, #12]
   d449c:	a902      	add	r1, sp, #8
   d449e:	4798      	blx	r3
  err_code = Wire.endTransmission();  // stop transaction
   d44a0:	f002 fc0a 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d44a4:	f001 fd8e 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d44a8:	4604      	mov	r4, r0
   d44aa:	bbb0      	cbnz	r0, d451a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  delay(500);
   d44ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d44b0:	f001 fa02 	bl	d58b8 <delay>

  // Set up for ops
  uint32_t length = p_app_update->size;
   d44b4:	68b3      	ldr	r3, [r6, #8]
  uint8_t *data = p_app_update->data;
   d44b6:	f8d6 9004 	ldr.w	r9, [r6, #4]

  // Payload to be sent over I2C
  uint8_t payload[9];

  // Set first byte to the command
  payload[0] = CCS811_WRITE_APP_REG;
   d44ba:	af06      	add	r7, sp, #24
   d44bc:	22f2      	movs	r2, #242	; 0xf2

  // Calculate the iterations to run
  uint32_t iterations = length/8;
   d44be:	08de      	lsrs	r6, r3, #3

  // Payload to be sent over I2C
  uint8_t payload[9];

  // Set first byte to the command
  payload[0] = CCS811_WRITE_APP_REG;
   d44c0:	f807 2d0c 	strb.w	r2, [r7, #-12]!

  // Calculate the iterations to run
  uint32_t iterations = length/8;

  Serial.printf("iterations %d", iterations);
   d44c4:	f002 fa82 	bl	d69cc <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d44c8:	4633      	mov	r3, r6
   d44ca:	4a3d      	ldr	r2, [pc, #244]	; (d45c0 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b4>)
   d44cc:	4621      	mov	r1, r4
   d44ce:	f001 ffe3 	bl	d6498 <_ZN5Print11printf_implEbPKcz>

  for( uint32_t i = 0; i < iterations; i++ ) {
   d44d2:	42b4      	cmp	r4, r6
   d44d4:	eb09 08c4 	add.w	r8, r9, r4, lsl #3
   d44d8:	d026      	beq.n	d4528 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x11c>

    Serial.printf("%d\n",i);
   d44da:	f002 fa77 	bl	d69cc <_Z16_fetch_usbserialv>
   d44de:	4a39      	ldr	r2, [pc, #228]	; (d45c4 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b8>)
   d44e0:	2100      	movs	r1, #0
   d44e2:	4623      	mov	r3, r4
   d44e4:	f001 ffd8 	bl	d6498 <_ZN5Print11printf_implEbPKcz>

    // Copy 8 bytes
    memcpy(&payload[1],data,8);
   d44e8:	f8d8 3000 	ldr.w	r3, [r8]
   d44ec:	f8cd 300d 	str.w	r3, [sp, #13]
   d44f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d44f4:	f8cd 3011 	str.w	r3, [sp, #17]

    // Write said 8 bytes
    Wire.beginTransmission(this->address);
   d44f8:	f002 fbde 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d44fc:	7829      	ldrb	r1, [r5, #0]
   d44fe:	f001 fd56 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(payload, sizeof(payload)); // sends register address
   d4502:	f002 fbd9 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4506:	6803      	ldr	r3, [r0, #0]
   d4508:	2209      	movs	r2, #9
   d450a:	68db      	ldr	r3, [r3, #12]
   d450c:	4639      	mov	r1, r7
   d450e:	4798      	blx	r3
    err_code = Wire.endTransmission();  // stop transaction
   d4510:	f002 fbd2 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4514:	f001 fd56 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
    if( err_code != 0) {
   d4518:	b108      	cbz	r0, d451e <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x112>
      return CCS811_COMM_ERR;
   d451a:	2004      	movs	r0, #4
   d451c:	e046      	b.n	d45ac <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
    }

    // Delay
    delay(50);
   d451e:	2032      	movs	r0, #50	; 0x32
   d4520:	f001 f9ca 	bl	d58b8 <delay>
  // Calculate the iterations to run
  uint32_t iterations = length/8;

  Serial.printf("iterations %d", iterations);

  for( uint32_t i = 0; i < iterations; i++ ) {
   d4524:	3401      	adds	r4, #1
   d4526:	e7d4      	b.n	d44d2 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0xc6>
    data+=8;

  }

  // Verify
  Wire.beginTransmission(this->address);
   d4528:	f002 fbc6 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d452c:	7829      	ldrb	r1, [r5, #0]
   d452e:	f001 fd3e 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_VERIFY_REG); // sends register address
   d4532:	f002 fbc1 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4536:	21f3      	movs	r1, #243	; 0xf3
   d4538:	f7ff fdbb 	bl	d40b2 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d453c:	f002 fbbc 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4540:	f001 fd40 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d4544:	4604      	mov	r4, r0
   d4546:	2800      	cmp	r0, #0
   d4548:	d1e7      	bne.n	d451a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  delay(500);
   d454a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d454e:	f001 f9b3 	bl	d58b8 <delay>

  // Check the status
  Wire.beginTransmission(this->address);
   d4552:	f002 fbb1 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4556:	7829      	ldrb	r1, [r5, #0]
   d4558:	f001 fd29 	bl	d5fae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_STATUS_REG);
   d455c:	f002 fbac 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4560:	4621      	mov	r1, r4
   d4562:	f7ff fda6 	bl	d40b2 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d4566:	f002 fba7 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d456a:	f001 fd2b 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d456e:	4604      	mov	r4, r0
   d4570:	2800      	cmp	r0, #0
   d4572:	d1d2      	bne.n	d451a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  Wire.requestFrom(this->address,(uint8_t)1);
   d4574:	f002 fba0 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4578:	2201      	movs	r2, #1
   d457a:	7829      	ldrb	r1, [r5, #0]
   d457c:	f001 fd0f 	bl	d5f9e <_ZN7TwoWire11requestFromEhh>

  uint8_t status = Wire.read();
   d4580:	f002 fb9a 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4584:	6803      	ldr	r3, [r0, #0]
   d4586:	695b      	ldr	r3, [r3, #20]
   d4588:	4798      	blx	r3

  if ((status & 0x30) == 0x30){
   d458a:	f000 0030 	and.w	r0, r0, #48	; 0x30
   d458e:	2830      	cmp	r0, #48	; 0x30
   d4590:	d106      	bne.n	d45a0 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x194>
    // program code valid
    Serial.println("Code is valid!");
   d4592:	f002 fa1b 	bl	d69cc <_Z16_fetch_usbserialv>
   d4596:	490c      	ldr	r1, [pc, #48]	; (d45c8 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1bc>)
   d4598:	f001 ff45 	bl	d6426 <_ZN5Print7printlnEPKc>
    return CCS811_SUCCESS;
   d459c:	4620      	mov	r0, r4
   d459e:	e005      	b.n	d45ac <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  }
  else{
    // program code invalid
    Serial.println("Code is valid!");
   d45a0:	f002 fa14 	bl	d69cc <_Z16_fetch_usbserialv>
   d45a4:	4908      	ldr	r1, [pc, #32]	; (d45c8 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1bc>)
   d45a6:	f001 ff3e 	bl	d6426 <_ZN5Print7printlnEPKc>
    return CCS811_UPDATE_VERIFY_FAIL;
   d45aa:	2006      	movs	r0, #6
  }



}
   d45ac:	b007      	add	sp, #28
   d45ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45b2:	bf00      	nop
   d45b4:	000d7da5 	.word	0x000d7da5
   d45b8:	000d7d84 	.word	0x000d7d84
   d45bc:	000d7db2 	.word	0x000d7db2
   d45c0:	000d7d88 	.word	0x000d7d88
   d45c4:	000d7ec1 	.word	0x000d7ec1
   d45c8:	000d7d96 	.word	0x000d7d96

000d45cc <_GLOBAL__sub_I__ZN6CCS811C2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45cc:	f000 bf50 	b.w	d5470 <HAL_Pin_Map>

000d45d0 <_GLOBAL__sub_I__Z18crc8_dallas_littlePht>:
   d45d0:	f000 bf4e 	b.w	d5470 <HAL_Pin_Map>

000d45d4 <_ZN7HPMA115C1Ev>:
 * License: GNU GPLv3
 */

#include "hpma115.h"

HPMA115::HPMA115(void){}
   d45d4:	4770      	bx	lr

000d45d6 <_ZN7HPMA1156enableEv>:
  this->disable();

  return HPMA115_SUCCESS;
}

uint32_t HPMA115::enable(){
   d45d6:	b510      	push	{r4, lr}
   d45d8:	4604      	mov	r4, r0

  // set gpio high
  pinMode(this->enable_pin, OUTPUT);
   d45da:	2101      	movs	r1, #1
   d45dc:	7a80      	ldrb	r0, [r0, #10]
   d45de:	f002 fae9 	bl	d6bb4 <pinMode>
  digitalWrite(this->enable_pin, HIGH); // Has a pulldown
   d45e2:	7aa0      	ldrb	r0, [r4, #10]
   d45e4:	2101      	movs	r1, #1
   d45e6:	f002 faf6 	bl	d6bd6 <digitalWrite>

  if( this->state == DISABLED ) {
   d45ea:	7a63      	ldrb	r3, [r4, #9]
   d45ec:	2b04      	cmp	r3, #4
    this->state = READY;
   d45ee:	bf04      	itt	eq
   d45f0:	2300      	moveq	r3, #0
   d45f2:	7263      	strbeq	r3, [r4, #9]
  }

  return HPMA115_SUCCESS;
}
   d45f4:	2000      	movs	r0, #0
   d45f6:	bd10      	pop	{r4, pc}

000d45f8 <_ZN7HPMA1157disableEv>:
uint32_t HPMA115::disable() {
   d45f8:	b510      	push	{r4, lr}

  // Disable device
  pinMode(this->enable_pin, INPUT);
   d45fa:	2100      	movs	r1, #0
    this->state = READY;
  }

  return HPMA115_SUCCESS;
}
uint32_t HPMA115::disable() {
   d45fc:	4604      	mov	r4, r0

  // Disable device
  pinMode(this->enable_pin, INPUT);
   d45fe:	7a80      	ldrb	r0, [r0, #10]
   d4600:	f002 fad8 	bl	d6bb4 <pinMode>
  this->state = DISABLED;
   d4604:	2304      	movs	r3, #4

  // Reset rx count
  this->rx_count = 0;
   d4606:	2000      	movs	r0, #0
}
uint32_t HPMA115::disable() {

  // Disable device
  pinMode(this->enable_pin, INPUT);
  this->state = DISABLED;
   d4608:	7263      	strb	r3, [r4, #9]

  // Reset rx count
  this->rx_count = 0;
   d460a:	72e0      	strb	r0, [r4, #11]

  return HPMA115_SUCCESS;
}
   d460c:	bd10      	pop	{r4, pc}

000d460e <_ZN7HPMA1155setupEP14hpma115_init_t>:

#include "hpma115.h"

HPMA115::HPMA115(void){}

uint32_t HPMA115::setup(hpma115_init_t *p_init) {
   d460e:	b538      	push	{r3, r4, r5, lr}
   d4610:	460d      	mov	r5, r1
   d4612:	4604      	mov	r4, r0

  // Set up serial
  Serial1.begin(HPMA115_BAUD);
   d4614:	f002 f952 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d4618:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d461c:	f002 f948 	bl	d68b0 <_ZN11USARTSerial5beginEm>

  // Set up callback
  this->callback = p_init->callback;
   d4620:	682b      	ldr	r3, [r5, #0]
   d4622:	6023      	str	r3, [r4, #0]

  // Set enable pin
  this->enable_pin = p_init->enable_pin;
   d4624:	792b      	ldrb	r3, [r5, #4]
   d4626:	72a3      	strb	r3, [r4, #10]

  // Set rx count to 0
  this->rx_count = 0;
   d4628:	2500      	movs	r5, #0
   d462a:	72e5      	strb	r5, [r4, #11]

  // Stop device
  this->disable();
   d462c:	4620      	mov	r0, r4
   d462e:	f7ff ffe3 	bl	d45f8 <_ZN7HPMA1157disableEv>

  return HPMA115_SUCCESS;
}
   d4632:	4628      	mov	r0, r5
   d4634:	bd38      	pop	{r3, r4, r5, pc}

000d4636 <_ZN7HPMA11511int_handlerEv>:
}

void HPMA115::int_handler() {

  // If we are ready, change state
  if ( this->state == READY ) {
   d4636:	7a43      	ldrb	r3, [r0, #9]
   d4638:	b90b      	cbnz	r3, d463e <_ZN7HPMA11511int_handlerEv+0x8>
    this->state = DATA_AVAILABLE;
   d463a:	2301      	movs	r3, #1
   d463c:	7243      	strb	r3, [r0, #9]
   d463e:	4770      	bx	lr

000d4640 <_ZN7HPMA11510is_enabledEv>:
  }

}

bool HPMA115::is_enabled() {
   d4640:	b508      	push	{r3, lr}

  // If we are ready, change state
  if ( getPinMode(this->enable_pin) == OUTPUT ) {
   d4642:	7a80      	ldrb	r0, [r0, #10]
   d4644:	f002 fa90 	bl	d6b68 <getPinMode>
    return true;
  } else {
    return false;
  }

}
   d4648:	1e43      	subs	r3, r0, #1
   d464a:	4258      	negs	r0, r3
   d464c:	4158      	adcs	r0, r3
   d464e:	bd08      	pop	{r3, pc}

000d4650 <_ZN7HPMA1157processEv>:

void HPMA115::process() {
   d4650:	b530      	push	{r4, r5, lr}

    // First read
    if( this->state == DATA_AVAILABLE && Serial1.available() >= 2 ) {
   d4652:	7a43      	ldrb	r3, [r0, #9]
   d4654:	2b01      	cmp	r3, #1
    return false;
  }

}

void HPMA115::process() {
   d4656:	b085      	sub	sp, #20
   d4658:	4604      	mov	r4, r0

    // First read
    if( this->state == DATA_AVAILABLE && Serial1.available() >= 2 ) {
   d465a:	d121      	bne.n	d46a0 <_ZN7HPMA1157processEv+0x50>
   d465c:	f002 f92e 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d4660:	6803      	ldr	r3, [r0, #0]
   d4662:	691b      	ldr	r3, [r3, #16]
   d4664:	4798      	blx	r3
   d4666:	2801      	cmp	r0, #1
   d4668:	dd1a      	ble.n	d46a0 <_ZN7HPMA1157processEv+0x50>

      // Erase the rx_buf
      memset(this->rx_buf,0,32);
   d466a:	2220      	movs	r2, #32
   d466c:	2100      	movs	r1, #0
   d466e:	f104 000c 	add.w	r0, r4, #12
   d4672:	f003 fa90 	bl	d7b96 <memset>

      // Read first byte in
      this->rx_buf[0] = Serial1.read();
   d4676:	f002 f921 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d467a:	6803      	ldr	r3, [r0, #0]
   d467c:	695b      	ldr	r3, [r3, #20]
   d467e:	4798      	blx	r3
   d4680:	b2c0      	uxtb	r0, r0

      // Make sure first byte is equal otherwise return
      if( this->rx_buf[0] != 0x42 ) {
   d4682:	2842      	cmp	r0, #66	; 0x42

      // Erase the rx_buf
      memset(this->rx_buf,0,32);

      // Read first byte in
      this->rx_buf[0] = Serial1.read();
   d4684:	7320      	strb	r0, [r4, #12]

      // Make sure first byte is equal otherwise return
      if( this->rx_buf[0] != 0x42 ) {
   d4686:	d177      	bne.n	d4778 <_ZN7HPMA1157processEv+0x128>
        return;
      }

      // Reaad the second byte in
      this->rx_buf[1] = Serial1.read();
   d4688:	f002 f918 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d468c:	6803      	ldr	r3, [r0, #0]
   d468e:	695b      	ldr	r3, [r3, #20]
   d4690:	4798      	blx	r3
   d4692:	b2c0      	uxtb	r0, r0

      // Confirm its value
      if( this->rx_buf[1] == 0x4d ) {
   d4694:	284d      	cmp	r0, #77	; 0x4d
        this->state = DATA_READ;
   d4696:	bf08      	it	eq
   d4698:	2303      	moveq	r3, #3
      if( this->rx_buf[0] != 0x42 ) {
        return;
      }

      // Reaad the second byte in
      this->rx_buf[1] = Serial1.read();
   d469a:	7360      	strb	r0, [r4, #13]

      // Confirm its value
      if( this->rx_buf[1] == 0x4d ) {
        this->state = DATA_READ;
   d469c:	bf08      	it	eq
   d469e:	7263      	strbeq	r3, [r4, #9]
      }

    }

    // Read remaining bytes
    if( this->state == DATA_READ && Serial1.available() >= 30) {
   d46a0:	7a63      	ldrb	r3, [r4, #9]
   d46a2:	2b03      	cmp	r3, #3
   d46a4:	d168      	bne.n	d4778 <_ZN7HPMA1157processEv+0x128>
   d46a6:	f002 f909 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d46aa:	6803      	ldr	r3, [r0, #0]
   d46ac:	691b      	ldr	r3, [r3, #16]
   d46ae:	4798      	blx	r3
   d46b0:	281d      	cmp	r0, #29
   d46b2:	dd61      	ble.n	d4778 <_ZN7HPMA1157processEv+0x128>
      // Then read
      Serial1.readBytes(this->rx_buf+2,30);
   d46b4:	f002 f902 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d46b8:	221e      	movs	r2, #30
   d46ba:	f104 010e 	add.w	r1, r4, #14
   d46be:	f001 ff6d 	bl	d659c <_ZN6Stream9readBytesEPcj>
   d46c2:	f104 020b 	add.w	r2, r4, #11
   d46c6:	f104 0129 	add.w	r1, r4, #41	; 0x29

      uint16_t calc_checksum = 0;
   d46ca:	2300      	movs	r3, #0

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
        calc_checksum += this->rx_buf[i];
   d46cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d46d0:	4403      	add	r3, r0
      Serial1.readBytes(this->rx_buf+2,30);

      uint16_t calc_checksum = 0;

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
   d46d2:	428a      	cmp	r2, r1
        calc_checksum += this->rx_buf[i];
   d46d4:	b29b      	uxth	r3, r3
      Serial1.readBytes(this->rx_buf+2,30);

      uint16_t calc_checksum = 0;

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
   d46d6:	d1f9      	bne.n	d46cc <_ZN7HPMA1157processEv+0x7c>
      // Serial.printf("%x %x\n",calc_checksum,data_checksum);

      // Make sure the calculated and the provided are the same
      // or, make sure we've collected a few data points before
      // sending the data
      if ( calc_checksum != data_checksum ) {
   d46d8:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d46dc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   d46e0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   d46e4:	b292      	uxth	r2, r2
   d46e6:	4293      	cmp	r3, r2
   d46e8:	d024      	beq.n	d4734 <_ZN7HPMA1157processEv+0xe4>

        Serial.println("hpma: checksum fail");
   d46ea:	f002 f96f 	bl	d69cc <_Z16_fetch_usbserialv>
   d46ee:	4923      	ldr	r1, [pc, #140]	; (d477c <_ZN7HPMA1157processEv+0x12c>)
   d46f0:	f001 fe99 	bl	d6426 <_ZN5Print7printlnEPKc>
   d46f4:	4b22      	ldr	r3, [pc, #136]	; (d4780 <_ZN7HPMA1157processEv+0x130>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46f6:	4923      	ldr	r1, [pc, #140]	; (d4784 <_ZN7HPMA1157processEv+0x134>)
   d46f8:	781a      	ldrb	r2, [r3, #0]
   d46fa:	4b23      	ldr	r3, [pc, #140]	; (d4788 <_ZN7HPMA1157processEv+0x138>)
   d46fc:	781b      	ldrb	r3, [r3, #0]
   d46fe:	4313      	orrs	r3, r2
   d4700:	f88d 3000 	strb.w	r3, [sp]
   d4704:	4a21      	ldr	r2, [pc, #132]	; (d478c <_ZN7HPMA1157processEv+0x13c>)
   d4706:	233c      	movs	r3, #60	; 0x3c
   d4708:	a802      	add	r0, sp, #8
   d470a:	f001 fa53 	bl	d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d470e:	9d03      	ldr	r5, [sp, #12]
   d4710:	b1fd      	cbz	r5, d4752 <_ZN7HPMA1157processEv+0x102>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4712:	686b      	ldr	r3, [r5, #4]
   d4714:	3b01      	subs	r3, #1
   d4716:	606b      	str	r3, [r5, #4]
   d4718:	b9db      	cbnz	r3, d4752 <_ZN7HPMA1157processEv+0x102>
        {
          _M_dispose();
   d471a:	682b      	ldr	r3, [r5, #0]
   d471c:	4628      	mov	r0, r5
   d471e:	689b      	ldr	r3, [r3, #8]
   d4720:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4722:	68ab      	ldr	r3, [r5, #8]
   d4724:	3b01      	subs	r3, #1
   d4726:	60ab      	str	r3, [r5, #8]
   d4728:	b99b      	cbnz	r3, d4752 <_ZN7HPMA1157processEv+0x102>
            _M_destroy();
   d472a:	682b      	ldr	r3, [r5, #0]
   d472c:	4628      	mov	r0, r5
   d472e:	68db      	ldr	r3, [r3, #12]
   d4730:	4798      	blx	r3
   d4732:	e00e      	b.n	d4752 <_ZN7HPMA1157processEv+0x102>
        this->state = READY;
        return;
      }

      // Increment the valid rx count
      this->rx_count++;
   d4734:	7ae3      	ldrb	r3, [r4, #11]
   d4736:	3301      	adds	r3, #1
   d4738:	b2db      	uxtb	r3, r3

      // Take another reading. Minimum of HPMA115_READING_CNT readings
      if ( this->rx_count < HPMA115_READING_CNT ) {
   d473a:	2b02      	cmp	r3, #2
        this->state = READY;
        return;
      }

      // Increment the valid rx count
      this->rx_count++;
   d473c:	72e3      	strb	r3, [r4, #11]

      // Take another reading. Minimum of HPMA115_READING_CNT readings
      if ( this->rx_count < HPMA115_READING_CNT ) {
   d473e:	d80b      	bhi.n	d4758 <_ZN7HPMA1157processEv+0x108>

        // Go right to read or go to ready state if no data
        if( Serial1.available() > 0 ) {
   d4740:	f002 f8bc 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d4744:	6803      	ldr	r3, [r0, #0]
   d4746:	691b      	ldr	r3, [r3, #16]
   d4748:	4798      	blx	r3
   d474a:	2800      	cmp	r0, #0
   d474c:	dd01      	ble.n	d4752 <_ZN7HPMA1157processEv+0x102>
          this->state = DATA_AVAILABLE;
   d474e:	2301      	movs	r3, #1
   d4750:	e000      	b.n	d4754 <_ZN7HPMA1157processEv+0x104>
        } else {
          this->state = READY;
   d4752:	2300      	movs	r3, #0
   d4754:	7263      	strb	r3, [r4, #9]
   d4756:	e00f      	b.n	d4778 <_ZN7HPMA1157processEv+0x128>

      // Reset this
      this->rx_count = 0;

      // Combine the serialized data
      this->data.pm25 = (this->rx_buf[6] << 8) + this->rx_buf[7];
   d4758:	7ca2      	ldrb	r2, [r4, #18]
   d475a:	7ce3      	ldrb	r3, [r4, #19]
   d475c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4760:	80a3      	strh	r3, [r4, #4]
      this->data.pm10 = (this->rx_buf[8] << 8) + this->rx_buf[9];
   d4762:	7d22      	ldrb	r2, [r4, #20]
   d4764:	7d63      	ldrb	r3, [r4, #21]

        return;
      }

      // Reset this
      this->rx_count = 0;
   d4766:	2500      	movs	r5, #0

      // Combine the serialized data
      this->data.pm25 = (this->rx_buf[6] << 8) + this->rx_buf[7];
      this->data.pm10 = (this->rx_buf[8] << 8) + this->rx_buf[9];
   d4768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d476c:	80e3      	strh	r3, [r4, #6]

        return;
      }

      // Reset this
      this->rx_count = 0;
   d476e:	72e5      	strb	r5, [r4, #11]
      // Combine the serialized data
      this->data.pm25 = (this->rx_buf[6] << 8) + this->rx_buf[7];
      this->data.pm10 = (this->rx_buf[8] << 8) + this->rx_buf[9];

      // Callback
      this->callback(&this->data);
   d4770:	6823      	ldr	r3, [r4, #0]
   d4772:	1d20      	adds	r0, r4, #4
   d4774:	4798      	blx	r3

      // State is back to ready
      this->state = READY;
   d4776:	7265      	strb	r5, [r4, #9]

    }
   d4778:	b005      	add	sp, #20
   d477a:	bd30      	pop	{r4, r5, pc}
   d477c:	000d7db8 	.word	0x000d7db8
   d4780:	2003e2fc 	.word	0x2003e2fc
   d4784:	000d7ea7 	.word	0x000d7ea7
   d4788:	2003e2fd 	.word	0x2003e2fd
   d478c:	000d7dcc 	.word	0x000d7dcc

000d4790 <_GLOBAL__sub_I__ZN7HPMA115C2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4790:	4b03      	ldr	r3, [pc, #12]	; (d47a0 <_GLOBAL__sub_I__ZN7HPMA115C2Ev+0x10>)
   d4792:	2201      	movs	r2, #1
   d4794:	701a      	strb	r2, [r3, #0]
   d4796:	4b03      	ldr	r3, [pc, #12]	; (d47a4 <_GLOBAL__sub_I__ZN7HPMA115C2Ev+0x14>)
   d4798:	2202      	movs	r2, #2
   d479a:	701a      	strb	r2, [r3, #0]
   d479c:	f000 be68 	b.w	d5470 <HAL_Pin_Map>
   d47a0:	2003e2fd 	.word	0x2003e2fd
   d47a4:	2003e2fc 	.word	0x2003e2fc

000d47a8 <_Z13timer_handlerv>:
}
#endif

// Definition of timer handler
void timer_handler() {
  data_check = true;
   d47a8:	4b01      	ldr	r3, [pc, #4]	; (d47b0 <_Z13timer_handlerv+0x8>)
   d47aa:	2201      	movs	r2, #1
   d47ac:	701a      	strb	r2, [r3, #0]
   d47ae:	4770      	bx	lr
   d47b0:	2003e34a 	.word	0x2003e34a

000d47b4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d47b4:	6803      	ldr	r3, [r0, #0]
   d47b6:	4718      	bx	r3

000d47b8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d47b8:	2a01      	cmp	r2, #1
   d47ba:	d002      	beq.n	d47c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d47bc:	2a02      	cmp	r2, #2
   d47be:	d002      	beq.n	d47c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d47c0:	e004      	b.n	d47cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d47c2:	6001      	str	r1, [r0, #0]
	      break;
   d47c4:	e002      	b.n	d47cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d47c6:	680b      	ldr	r3, [r1, #0]
   d47c8:	b100      	cbz	r0, d47cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d47ca:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d47cc:	2000      	movs	r0, #0
   d47ce:	4770      	bx	lr

000d47d0 <_Z20ccs811_pin_interruptv>:
  m_data_ready = true;
}

// ccs811_pin_interrupt() forwards pin interrupt on to the specific handler
void ccs811_pin_interrupt() {
  ccs811.int_handler();
   d47d0:	4801      	ldr	r0, [pc, #4]	; (d47d8 <_Z20ccs811_pin_interruptv+0x8>)
   d47d2:	f7ff bc73 	b.w	d40bc <_ZN6CCS81111int_handlerEv>
   d47d6:	bf00      	nop
   d47d8:	2003e300 	.word	0x2003e300

000d47dc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d47dc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d47de:	2100      	movs	r1, #0
   d47e0:	4604      	mov	r4, r0
   d47e2:	4608      	mov	r0, r1
   d47e4:	f000 fdbc 	bl	d5360 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d47e8:	a902      	add	r1, sp, #8
   d47ea:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d47ec:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d47ee:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d47f2:	f000 fdcd 	bl	d5390 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d47f6:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d47f8:	b10c      	cbz	r4, d47fe <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d47fa:	2301      	movs	r3, #1
   d47fc:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d47fe:	2100      	movs	r1, #0
   d4800:	2001      	movs	r0, #1
   d4802:	f000 fdad 	bl	d5360 <os_thread_scheduling>
            }
        }
        if (t) {
   d4806:	b12c      	cbz	r4, d4814 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4808:	6823      	ldr	r3, [r4, #0]
   d480a:	4620      	mov	r0, r4
   d480c:	689b      	ldr	r3, [r3, #8]
   d480e:	4798      	blx	r3
            t->running = false;
   d4810:	2300      	movs	r3, #0
   d4812:	7123      	strb	r3, [r4, #4]
        }
    }
   d4814:	b002      	add	sp, #8
   d4816:	bd10      	pop	{r4, pc}

000d4818 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4818:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d481a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d481c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d481e:	b113      	cbz	r3, d4826 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4820:	2203      	movs	r2, #3
   d4822:	4601      	mov	r1, r0
   d4824:	4798      	blx	r3
    }
   d4826:	4620      	mov	r0, r4
   d4828:	bd10      	pop	{r4, pc}

000d482a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d482a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d482c:	4604      	mov	r4, r0
   d482e:	b170      	cbz	r0, d484e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4830:	6805      	ldr	r5, [r0, #0]
   d4832:	b135      	cbz	r5, d4842 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4834:	4628      	mov	r0, r5
   d4836:	f7ff ffef 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d483a:	2110      	movs	r1, #16
   d483c:	4628      	mov	r0, r5
   d483e:	f002 fa82 	bl	d6d46 <_ZdlPvj>
   d4842:	4620      	mov	r0, r4
   d4844:	2114      	movs	r1, #20
      }
   d4846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d484a:	f002 ba7c 	b.w	d6d46 <_ZdlPvj>
   d484e:	bd38      	pop	{r3, r4, r5, pc}

000d4850 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
   d4850:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4852:	6943      	ldr	r3, [r0, #20]
   d4854:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4856:	b1bb      	cbz	r3, d4888 <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4858:	6858      	ldr	r0, [r3, #4]
   d485a:	f000 fd61 	bl	d5320 <os_thread_is_current>
   d485e:	b978      	cbnz	r0, d4880 <_ZN19ApplicationWatchdogD1Ev+0x30>
   d4860:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4862:	7c5a      	ldrb	r2, [r3, #17]
   d4864:	b912      	cbnz	r2, d486c <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4866:	6858      	ldr	r0, [r3, #4]
   d4868:	f000 fd6a 	bl	d5340 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d486c:	6963      	ldr	r3, [r4, #20]
   d486e:	6858      	ldr	r0, [r3, #4]
   d4870:	f000 fd6e 	bl	d5350 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4874:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4876:	2300      	movs	r3, #0
   d4878:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d487a:	b128      	cbz	r0, d4888 <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
   d487c:	f7ff ffd5 	bl	d482a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4880:	6960      	ldr	r0, [r4, #20]
   d4882:	b108      	cbz	r0, d4888 <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
   d4884:	f7ff ffd1 	bl	d482a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
   d4888:	1d20      	adds	r0, r4, #4
   d488a:	f7ff ffc5 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d488e:	4620      	mov	r0, r4
   d4890:	bd10      	pop	{r4, pc}
	...

000d4894 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
   d4894:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4896:	f000 fdc3 	bl	d5420 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d489a:	4b01      	ldr	r3, [pc, #4]	; (d48a0 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
   d489c:	6018      	str	r0, [r3, #0]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	2003e708 	.word	0x2003e708

000d48a4 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
   d48a4:	b530      	push	{r4, r5, lr}
   d48a6:	b087      	sub	sp, #28
   d48a8:	461d      	mov	r5, r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48aa:	2300      	movs	r3, #0
   d48ac:	4604      	mov	r4, r0
   d48ae:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d48b0:	b122      	cbz	r2, d48bc <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d48b2:	4b21      	ldr	r3, [pc, #132]	; (d4938 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x94>)
   d48b4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d48b6:	4b21      	ldr	r3, [pc, #132]	; (d493c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48b8:	9202      	str	r2, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d48ba:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48bc:	2300      	movs	r3, #0
   d48be:	60e3      	str	r3, [r4, #12]
   d48c0:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d48c2:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d48c4:	b13b      	cbz	r3, d48d6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d48c6:	2202      	movs	r2, #2
   d48c8:	a902      	add	r1, sp, #8
   d48ca:	1d20      	adds	r0, r4, #4
   d48cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d48ce:	9b05      	ldr	r3, [sp, #20]
   d48d0:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d48d2:	9b04      	ldr	r3, [sp, #16]
   d48d4:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d48d6:	491a      	ldr	r1, [pc, #104]	; (d4940 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
   d48d8:	2014      	movs	r0, #20
   d48da:	f002 fa3f 	bl	d6d5c <_ZnwjRKSt9nothrow_t>
   d48de:	b130      	cbz	r0, d48ee <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d48e0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d48e2:	7403      	strb	r3, [r0, #16]
   d48e4:	6003      	str	r3, [r0, #0]
   d48e6:	6043      	str	r3, [r0, #4]
   d48e8:	6083      	str	r3, [r0, #8]
   d48ea:	60c3      	str	r3, [r0, #12]
   d48ec:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d48ee:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d48f0:	b198      	cbz	r0, d491a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x76>
            goto error;
        }
        d_->func = function;
   d48f2:	4b14      	ldr	r3, [pc, #80]	; (d4944 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
   d48f4:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d48f6:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d48f8:	4913      	ldr	r1, [pc, #76]	; (d4948 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d48fa:	60dc      	str	r4, [r3, #12]
   d48fc:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d48fe:	4b13      	ldr	r3, [pc, #76]	; (d494c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
   d4900:	e88d 0021 	stmia.w	sp, {r0, r5}
   d4904:	2209      	movs	r2, #9
   d4906:	3004      	adds	r0, #4
   d4908:	f000 fd02 	bl	d5310 <os_thread_create>
   d490c:	b928      	cbnz	r0, d491a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x76>
   d490e:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
   d4910:	7c1b      	ldrb	r3, [r3, #16]
   d4912:	b943      	cbnz	r3, d4926 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x82>
            os_thread_yield();
   d4914:	f000 fd0c 	bl	d5330 <os_thread_yield>
   d4918:	e7f9      	b.n	d490e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d491a:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d491c:	2300      	movs	r3, #0
   d491e:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4920:	b108      	cbz	r0, d4926 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x82>
	  get_deleter()(__p);
   d4922:	f7ff ff82 	bl	d482a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
	{
		checkin();
   d4926:	f7ff ffb5 	bl	d4894 <_ZN19ApplicationWatchdog7checkinEv>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d492a:	a802      	add	r0, sp, #8
   d492c:	f7ff ff74 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
   d4930:	4620      	mov	r0, r4
   d4932:	b007      	add	sp, #28
   d4934:	bd30      	pop	{r4, r5, pc}
   d4936:	bf00      	nop
   d4938:	000d47b5 	.word	0x000d47b5
   d493c:	000d47b9 	.word	0x000d47b9
   d4940:	000d8208 	.word	0x000d8208
   d4944:	000d6c81 	.word	0x000d6c81
   d4948:	000d7df0 	.word	0x000d7df0
   d494c:	000d4b19 	.word	0x000d4b19

000d4950 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4950:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4952:	2500      	movs	r5, #0
   d4954:	468e      	mov	lr, r1
   d4956:	4915      	ldr	r1, [pc, #84]	; (d49ac <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4958:	7105      	strb	r5, [r0, #4]
   d495a:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d495c:	6145      	str	r5, [r0, #20]
   d495e:	6001      	str	r1, [r0, #0]
   d4960:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4962:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4966:	b085      	sub	sp, #20
   d4968:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d496a:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d496e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4972:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4976:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d497a:	e897 0003 	ldmia.w	r7, {r0, r1}
   d497e:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4982:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4984:	6960      	ldr	r0, [r4, #20]
   d4986:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4988:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d498a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d498c:	69a0      	ldr	r0, [r4, #24]
   d498e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4990:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4992:	e88d 0028 	stmia.w	sp, {r3, r5}
   d4996:	4a06      	ldr	r2, [pc, #24]	; (d49b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4998:	4623      	mov	r3, r4
   d499a:	4671      	mov	r1, lr
   d499c:	f104 0008 	add.w	r0, r4, #8
   d49a0:	f000 fce6 	bl	d5370 <os_timer_create>
    }
   d49a4:	4620      	mov	r0, r4
   d49a6:	b005      	add	sp, #20
   d49a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49aa:	bf00      	nop
   d49ac:	000d7de4 	.word	0x000d7de4
   d49b0:	000d47dd 	.word	0x000d47dd

000d49b4 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d49b4:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d49b6:	6880      	ldr	r0, [r0, #8]
   d49b8:	2300      	movs	r3, #0
   d49ba:	b138      	cbz	r0, d49cc <_ZN5Timer5_stopEjb+0x18>
   d49bc:	e88d 000a 	stmia.w	sp, {r1, r3}
   d49c0:	2102      	movs	r1, #2
   d49c2:	f000 fced 	bl	d53a0 <os_timer_change>
   d49c6:	fab0 f080 	clz	r0, r0
   d49ca:	0940      	lsrs	r0, r0, #5
    }
   d49cc:	b003      	add	sp, #12
   d49ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d49d4 <_Z16hpma_evt_handlerP14hpma115_data_t>:
void serialEvent1() {
  hpma115.int_handler();
}

// Async publish event
void hpma_evt_handler(hpma115_data_t *p_data) {
   d49d4:	b530      	push	{r4, r5, lr}
   d49d6:	4605      	mov	r5, r0
   d49d8:	b08d      	sub	sp, #52	; 0x34

  // Disable HPMA
  #ifdef HAS_HPMA
  hpma115.disable();
   d49da:	481b      	ldr	r0, [pc, #108]	; (d4a48 <_Z16hpma_evt_handlerP14hpma115_data_t+0x74>)
  hpma_timer.stop();
  #endif

  // Copy the data.
  hpma115_data = *p_data;
   d49dc:	4c1b      	ldr	r4, [pc, #108]	; (d4a4c <_Z16hpma_evt_handlerP14hpma115_data_t+0x78>)
// Async publish event
void hpma_evt_handler(hpma115_data_t *p_data) {

  // Disable HPMA
  #ifdef HAS_HPMA
  hpma115.disable();
   d49de:	f7ff fe0b 	bl	d45f8 <_ZN7HPMA1157disableEv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d49e2:	2200      	movs	r2, #0
   d49e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d49e8:	4819      	ldr	r0, [pc, #100]	; (d4a50 <_Z16hpma_evt_handlerP14hpma115_data_t+0x7c>)
   d49ea:	f7ff ffe3 	bl	d49b4 <_ZN5Timer5_stopEjb>
  hpma_timer.stop();
  #endif

  // Copy the data.
  hpma115_data = *p_data;
   d49ee:	682b      	ldr	r3, [r5, #0]
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d49f0:	4d18      	ldr	r5, [pc, #96]	; (d4a54 <_Z16hpma_evt_handlerP14hpma115_data_t+0x80>)
   d49f2:	6023      	str	r3, [r4, #0]
   d49f4:	4629      	mov	r1, r5
   d49f6:	a804      	add	r0, sp, #16
   d49f8:	f001 fe6b 	bl	d66d2 <_ZN6StringC1ERKS_>

  // Serial.printf("pm25 %dμg/m3 pm10 %dμg/m3\n", hpma115_data.pm25, hpma115_data.pm10);

  // Concat the data into the json blob
  m_out = String( m_out + String::format(",\"pm25\":%d,\"pm10\":%d", hpma115_data.pm25,hpma115_data.pm10) );
   d49fc:	8863      	ldrh	r3, [r4, #2]
   d49fe:	8822      	ldrh	r2, [r4, #0]
   d4a00:	4915      	ldr	r1, [pc, #84]	; (d4a58 <_Z16hpma_evt_handlerP14hpma115_data_t+0x84>)
   d4a02:	4668      	mov	r0, sp
   d4a04:	f001 feb2 	bl	d676c <_ZN6String6formatEPKcz>
   d4a08:	4669      	mov	r1, sp
   d4a0a:	a804      	add	r0, sp, #16
   d4a0c:	f001 fe8b 	bl	d6726 <_ZplRK15StringSumHelperRK6String>
   d4a10:	4601      	mov	r1, r0
   d4a12:	a808      	add	r0, sp, #32
   d4a14:	f001 fe5d 	bl	d66d2 <_ZN6StringC1ERKS_>
   d4a18:	a908      	add	r1, sp, #32
   d4a1a:	4628      	mov	r0, r5
   d4a1c:	f001 fe64 	bl	d66e8 <_ZN6StringaSEOS_>
   d4a20:	a808      	add	r0, sp, #32
   d4a22:	f001 fdd0 	bl	d65c6 <_ZN6StringD1Ev>
   d4a26:	4668      	mov	r0, sp
   d4a28:	f001 fdcd 	bl	d65c6 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4a2c:	a804      	add	r0, sp, #16
   d4a2e:	f001 fdca 	bl	d65c6 <_ZN6StringD1Ev>

  // Set the data ready!
  m_data_ready = true;
   d4a32:	4b0a      	ldr	r3, [pc, #40]	; (d4a5c <_Z16hpma_evt_handlerP14hpma115_data_t+0x88>)
   d4a34:	2201      	movs	r2, #1
   d4a36:	701a      	strb	r2, [r3, #0]

  Serial.println("hpma rdy");
   d4a38:	f001 ffc8 	bl	d69cc <_Z16_fetch_usbserialv>
   d4a3c:	4908      	ldr	r1, [pc, #32]	; (d4a60 <_Z16hpma_evt_handlerP14hpma115_data_t+0x8c>)
   d4a3e:	f001 fcf2 	bl	d6426 <_ZN5Print7printlnEPKc>
}
   d4a42:	b00d      	add	sp, #52	; 0x34
   d4a44:	bd30      	pop	{r4, r5, pc}
   d4a46:	bf00      	nop
   d4a48:	2003e374 	.word	0x2003e374
   d4a4c:	2003e346 	.word	0x2003e346
   d4a50:	2003e3a8 	.word	0x2003e3a8
   d4a54:	2003e310 	.word	0x2003e310
   d4a58:	000d7df7 	.word	0x000d7df7
   d4a5c:	2003e34c 	.word	0x2003e34c
   d4a60:	000d7e0c 	.word	0x000d7e0c

000d4a64 <_ZN5Timer5startEj>:
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a66:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4a68:	2200      	movs	r2, #0
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4a6a:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4a6c:	4611      	mov	r1, r2
   d4a6e:	f7ff ffa1 	bl	d49b4 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4a72:	68a8      	ldr	r0, [r5, #8]
   d4a74:	2300      	movs	r3, #0
   d4a76:	b140      	cbz	r0, d4a8a <_ZN5Timer5startEj+0x26>
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	9400      	str	r4, [sp, #0]
   d4a7c:	461a      	mov	r2, r3
   d4a7e:	4619      	mov	r1, r3
   d4a80:	f000 fc8e 	bl	d53a0 <os_timer_change>
   d4a84:	fab0 f080 	clz	r0, r0
   d4a88:	0940      	lsrs	r0, r0, #5
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4a8a:	b003      	add	sp, #12
   d4a8c:	bd30      	pop	{r4, r5, pc}
	...

000d4a90 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4a90:	b538      	push	{r3, r4, r5, lr}
   d4a92:	4b10      	ldr	r3, [pc, #64]	; (d4ad4 <_ZN5TimerD1Ev+0x44>)
   d4a94:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4a96:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4a98:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4a9a:	b1a3      	cbz	r3, d4ac6 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4aa0:	2200      	movs	r2, #0
   d4aa2:	f7ff ff87 	bl	d49b4 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4aa6:	2100      	movs	r1, #0
   d4aa8:	68a0      	ldr	r0, [r4, #8]
   d4aaa:	f000 fc99 	bl	d53e0 <os_timer_set_id>
            while (running) {
   d4aae:	7923      	ldrb	r3, [r4, #4]
   d4ab0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4ab4:	b113      	cbz	r3, d4abc <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4ab6:	f000 fc3b 	bl	d5330 <os_thread_yield>
   d4aba:	e7f8      	b.n	d4aae <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4abc:	4629      	mov	r1, r5
   d4abe:	68a0      	ldr	r0, [r4, #8]
   d4ac0:	f000 fc5e 	bl	d5380 <os_timer_destroy>
            handle = nullptr;
   d4ac4:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ac6:	f104 000c 	add.w	r0, r4, #12
   d4aca:	f7ff fea5 	bl	d4818 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd38      	pop	{r3, r4, r5, pc}
   d4ad2:	bf00      	nop
   d4ad4:	000d7de4 	.word	0x000d7de4

000d4ad8 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4ad8:	b510      	push	{r4, lr}
   d4ada:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4adc:	f7ff ffd8 	bl	d4a90 <_ZN5TimerD1Ev>
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	211c      	movs	r1, #28
   d4ae4:	f002 f92f 	bl	d6d46 <_ZdlPvj>
   d4ae8:	4620      	mov	r0, r4
   d4aea:	bd10      	pop	{r4, pc}

000d4aec <_Z12serialEvent1v>:
  ccs811.int_handler();
}

// forwards serial data interrupt to HPMA driver
void serialEvent1() {
  hpma115.int_handler();
   d4aec:	4801      	ldr	r0, [pc, #4]	; (d4af4 <_Z12serialEvent1v+0x8>)
   d4aee:	f7ff bda2 	b.w	d4636 <_ZN7HPMA11511int_handlerEv>
   d4af2:	bf00      	nop
   d4af4:	2003e374 	.word	0x2003e374

000d4af8 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4af8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4afa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4afc:	b90a      	cbnz	r2, d4b02 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d4afe:	f002 f93c 	bl	d6d7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b02:	68c3      	ldr	r3, [r0, #12]
    }
   d4b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b08:	4718      	bx	r3

000d4b0a <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
   d4b0a:	b508      	push	{r3, lr}
    {
        if (callback) {
   d4b0c:	6943      	ldr	r3, [r0, #20]
   d4b0e:	b113      	cbz	r3, d4b16 <_ZN5Timer7timeoutEv+0xc>
            callback();
   d4b10:	300c      	adds	r0, #12
   d4b12:	f7ff fff1 	bl	d4af8 <_ZNKSt8functionIFvvEEclEv>
   d4b16:	bd08      	pop	{r3, pc}

000d4b18 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4b18:	b538      	push	{r3, r4, r5, lr}
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d4b1a:	6882      	ldr	r2, [r0, #8]

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
   d4b1c:	2301      	movs	r3, #1
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4b1e:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
   d4b20:	7403      	strb	r3, [r0, #16]
   d4b22:	461d      	mov	r5, r3
        if (th->func) {
   d4b24:	b112      	cbz	r2, d4b2c <_ZN6Thread3runEPv+0x14>
            (*(th->func))(th->func_param);
   d4b26:	68c0      	ldr	r0, [r0, #12]
   d4b28:	4790      	blx	r2
   d4b2a:	e003      	b.n	d4b34 <_ZN6Thread3runEPv+0x1c>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b2c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4b2e:	b108      	cbz	r0, d4b34 <_ZN6Thread3runEPv+0x1c>
            (*(th->wrapper))();
   d4b30:	f7ff ffe2 	bl	d4af8 <_ZNKSt8functionIFvvEEclEv>
        }
        th->exited = true;
   d4b34:	7465      	strb	r5, [r4, #17]
        os_thread_exit(nullptr);
   d4b36:	2000      	movs	r0, #0
    }
   d4b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d4b3c:	f000 bc48 	b.w	d53d0 <os_thread_exit>

000d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b40:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4b42:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b44:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4b46:	b17c      	cbz	r4, d4b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4b48:	6863      	ldr	r3, [r4, #4]
   d4b4a:	3b01      	subs	r3, #1
   d4b4c:	6063      	str	r3, [r4, #4]
   d4b4e:	b95b      	cbnz	r3, d4b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4b50:	6823      	ldr	r3, [r4, #0]
   d4b52:	4620      	mov	r0, r4
   d4b54:	689b      	ldr	r3, [r3, #8]
   d4b56:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b58:	68a3      	ldr	r3, [r4, #8]
   d4b5a:	3b01      	subs	r3, #1
   d4b5c:	60a3      	str	r3, [r4, #8]
   d4b5e:	b91b      	cbnz	r3, d4b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4b60:	6823      	ldr	r3, [r4, #0]
   d4b62:	4620      	mov	r0, r4
   d4b64:	68db      	ldr	r3, [r3, #12]
   d4b66:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4b68:	4628      	mov	r0, r5
   d4b6a:	bd38      	pop	{r3, r4, r5, pc}

000d4b6c <_Z20hpma_timeout_handlerv>:
void timer_handler() {
  data_check = true;
}

// This fires after the hpma should have finished...
void hpma_timeout_handler() {
   d4b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if( hpma115.is_enabled() ) {
   d4b6e:	4811      	ldr	r0, [pc, #68]	; (d4bb4 <_Z20hpma_timeout_handlerv+0x48>)
   d4b70:	f7ff fd66 	bl	d4640 <_ZN7HPMA11510is_enabledEv>
   d4b74:	b1b8      	cbz	r0, d4ba6 <_Z20hpma_timeout_handlerv+0x3a>
    Serial.println("hpma timeout");
   d4b76:	f001 ff29 	bl	d69cc <_Z16_fetch_usbserialv>
   d4b7a:	490f      	ldr	r1, [pc, #60]	; (d4bb8 <_Z20hpma_timeout_handlerv+0x4c>)
   d4b7c:	f001 fc53 	bl	d6426 <_ZN5Print7printlnEPKc>
   d4b80:	4b0e      	ldr	r3, [pc, #56]	; (d4bbc <_Z20hpma_timeout_handlerv+0x50>)
   d4b82:	490f      	ldr	r1, [pc, #60]	; (d4bc0 <_Z20hpma_timeout_handlerv+0x54>)
   d4b84:	781a      	ldrb	r2, [r3, #0]
   d4b86:	4b0f      	ldr	r3, [pc, #60]	; (d4bc4 <_Z20hpma_timeout_handlerv+0x58>)
   d4b88:	781b      	ldrb	r3, [r3, #0]
   d4b8a:	4313      	orrs	r3, r2
   d4b8c:	f88d 3000 	strb.w	r3, [sp]
   d4b90:	4a09      	ldr	r2, [pc, #36]	; (d4bb8 <_Z20hpma_timeout_handlerv+0x4c>)
   d4b92:	233c      	movs	r3, #60	; 0x3c
   d4b94:	a802      	add	r0, sp, #8
   d4b96:	f001 f80d 	bl	d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b9a:	a803      	add	r0, sp, #12
   d4b9c:	f7ff ffd0 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("err", "hpma timeout" , PRIVATE, NO_ACK);
    hpma115.disable();
   d4ba0:	4804      	ldr	r0, [pc, #16]	; (d4bb4 <_Z20hpma_timeout_handlerv+0x48>)
   d4ba2:	f7ff fd29 	bl	d45f8 <_ZN7HPMA1157disableEv>
  }

  m_data_ready = true;
   d4ba6:	4b08      	ldr	r3, [pc, #32]	; (d4bc8 <_Z20hpma_timeout_handlerv+0x5c>)
   d4ba8:	2201      	movs	r2, #1
   d4baa:	701a      	strb	r2, [r3, #0]
}
   d4bac:	b005      	add	sp, #20
   d4bae:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bb2:	bf00      	nop
   d4bb4:	2003e374 	.word	0x2003e374
   d4bb8:	000d7e15 	.word	0x000d7e15
   d4bbc:	2003e344 	.word	0x2003e344
   d4bc0:	000d7ea7 	.word	0x000d7ea7
   d4bc4:	2003e34b 	.word	0x2003e34b
   d4bc8:	2003e34c 	.word	0x2003e34c

000d4bcc <loop>:
  Particle.keepAlive(60);

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4bce:	b08f      	sub	sp, #60	; 0x3c
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bd0:	f000 fdd2 	bl	d5778 <spark_cloud_flag_connected>
  if (Mesh.ready() == false) {
    Serial.println("Not connected..");
    Mesh.connect();
  }
  #else
  if (Particle.connected() == false) {
   d4bd4:	b908      	cbnz	r0, d4bda <loop+0xe>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4bd6:	f000 fdc7 	bl	d5768 <spark_cloud_flag_connect>
    Particle.connect();
  }
  #endif

  // If all the data is ready, send it as one data blob
  if ( m_data_ready ) {
   d4bda:	4d88      	ldr	r5, [pc, #544]	; (d4dfc <loop+0x230>)
   d4bdc:	782b      	ldrb	r3, [r5, #0]
   d4bde:	b36b      	cbz	r3, d4c3c <loop+0x70>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4be0:	4c87      	ldr	r4, [pc, #540]	; (d4e00 <loop+0x234>)
    Serial.println("data send");
   d4be2:	f001 fef3 	bl	d69cc <_Z16_fetch_usbserialv>
   d4be6:	4987      	ldr	r1, [pc, #540]	; (d4e04 <loop+0x238>)
   d4be8:	f001 fc1d 	bl	d6426 <_ZN5Print7printlnEPKc>
   d4bec:	4621      	mov	r1, r4
   d4bee:	a806      	add	r0, sp, #24
   d4bf0:	f001 fd6f 	bl	d66d2 <_ZN6StringC1ERKS_>

    // Cap off the JSON
    m_out = String( m_out + "}");
   d4bf4:	4984      	ldr	r1, [pc, #528]	; (d4e08 <loop+0x23c>)
   d4bf6:	a806      	add	r0, sp, #24
   d4bf8:	f001 fda1 	bl	d673e <_ZplRK15StringSumHelperPKc>
   d4bfc:	4601      	mov	r1, r0
   d4bfe:	a80a      	add	r0, sp, #40	; 0x28
   d4c00:	f001 fd67 	bl	d66d2 <_ZN6StringC1ERKS_>
   d4c04:	a90a      	add	r1, sp, #40	; 0x28
   d4c06:	4620      	mov	r0, r4
   d4c08:	f001 fd6e 	bl	d66e8 <_ZN6StringaSEOS_>
   d4c0c:	a80a      	add	r0, sp, #40	; 0x28
   d4c0e:	f001 fcda 	bl	d65c6 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4c12:	a806      	add	r0, sp, #24
   d4c14:	f001 fcd7 	bl	d65c6 <_ZN6StringD1Ev>
   d4c18:	4b7c      	ldr	r3, [pc, #496]	; (d4e0c <loop+0x240>)
   d4c1a:	6822      	ldr	r2, [r4, #0]
   d4c1c:	7819      	ldrb	r1, [r3, #0]
   d4c1e:	4b7c      	ldr	r3, [pc, #496]	; (d4e10 <loop+0x244>)
   d4c20:	781b      	ldrb	r3, [r3, #0]
   d4c22:	430b      	orrs	r3, r1
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c24:	f88d 3000 	strb.w	r3, [sp]
   d4c28:	497a      	ldr	r1, [pc, #488]	; (d4e14 <loop+0x248>)
   d4c2a:	233c      	movs	r3, #60	; 0x3c
   d4c2c:	a80a      	add	r0, sp, #40	; 0x28
   d4c2e:	f000 ffc1 	bl	d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4c32:	a80b      	add	r0, sp, #44	; 0x2c
   d4c34:	f7ff ff84 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // Publish data
    Particle.publish("blob", m_out , PRIVATE, WITH_ACK);

    // Reset to false
    m_data_ready = false;
   d4c38:	2300      	movs	r3, #0
   d4c3a:	702b      	strb	r3, [r5, #0]
  }

  // If we're greater than or equal to the measurement delay
  // start taking measurements!
  if( data_check ) {
   d4c3c:	4b76      	ldr	r3, [pc, #472]	; (d4e18 <loop+0x24c>)
   d4c3e:	4d77      	ldr	r5, [pc, #476]	; (d4e1c <loop+0x250>)
   d4c40:	781a      	ldrb	r2, [r3, #0]
   d4c42:	2a00      	cmp	r2, #0
   d4c44:	f000 80b5 	beq.w	d4db2 <loop+0x1e6>

    // Set state variable to false
    data_check = false;
   d4c48:	2200      	movs	r2, #0

    // Set start of string.
    m_out = String("{");
   d4c4a:	4975      	ldr	r1, [pc, #468]	; (d4e20 <loop+0x254>)
  // If we're greater than or equal to the measurement delay
  // start taking measurements!
  if( data_check ) {

    // Set state variable to false
    data_check = false;
   d4c4c:	701a      	strb	r2, [r3, #0]

    // Set start of string.
    m_out = String("{");
   d4c4e:	a80a      	add	r0, sp, #40	; 0x28
   d4c50:	f001 fd00 	bl	d6654 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c54:	a90a      	add	r1, sp, #40	; 0x28
   d4c56:	486a      	ldr	r0, [pc, #424]	; (d4e00 <loop+0x234>)
    #ifdef HAS_HPMA
    hpma115.disable();
    #endif

    // Read temp and humiity
    err_code = si7021.read(&si7021_data);
   d4c58:	4c72      	ldr	r4, [pc, #456]	; (d4e24 <loop+0x258>)

    // Set state variable to false
    data_check = false;

    // Set start of string.
    m_out = String("{");
   d4c5a:	f001 fd45 	bl	d66e8 <_ZN6StringaSEOS_>
   d4c5e:	a80a      	add	r0, sp, #40	; 0x28
   d4c60:	f001 fcb1 	bl	d65c6 <_ZN6StringD1Ev>

    // Disable HPMA
    #ifdef HAS_HPMA
    hpma115.disable();
   d4c64:	4870      	ldr	r0, [pc, #448]	; (d4e28 <loop+0x25c>)
   d4c66:	f7ff fcc7 	bl	d45f8 <_ZN7HPMA1157disableEv>
    #endif

    // Read temp and humiity
    err_code = si7021.read(&si7021_data);
   d4c6a:	4621      	mov	r1, r4
   d4c6c:	486f      	ldr	r0, [pc, #444]	; (d4e2c <loop+0x260>)
   d4c6e:	f000 facf 	bl	d5210 <_ZN6Si70214readEP13si7021_data_t>

    if( err_code == SI7021_SUCCESS ) {
   d4c72:	2800      	cmp	r0, #0
   d4c74:	d133      	bne.n	d4cde <loop+0x112>
      // Set env data in the CCS811
      #ifdef HAS_CCS811
      ccs811.set_env(si7021_data.temperature,si7021_data.humidity);
   d4c76:	edd4 0a01 	vldr	s1, [r4, #4]
   d4c7a:	ed94 0a00 	vldr	s0, [r4]
   d4c7e:	486c      	ldr	r0, [pc, #432]	; (d4e30 <loop+0x264>)
   d4c80:	f7ff fa86 	bl	d4190 <_ZN6CCS8117set_envEff>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4c84:	495e      	ldr	r1, [pc, #376]	; (d4e00 <loop+0x234>)
   d4c86:	a806      	add	r0, sp, #24
   d4c88:	f001 fd23 	bl	d66d2 <_ZN6StringC1ERKS_>
      #ifdef HAS_SGP30
      sgp30.set_env(si7021_data.temperature,si7021_data.humidity);
      #endif

      // Concatinate temp and humidity data
      m_out = String( m_out + String::format("\"temperature\":%.2f,\"humidity\":%.2f",si7021_data.temperature, si7021_data.humidity) );
   d4c8c:	6820      	ldr	r0, [r4, #0]
   d4c8e:	f002 fb23 	bl	d72d8 <__aeabi_f2d>
   d4c92:	4606      	mov	r6, r0
   d4c94:	6860      	ldr	r0, [r4, #4]
   d4c96:	460f      	mov	r7, r1
   d4c98:	f002 fb1e 	bl	d72d8 <__aeabi_f2d>
   d4c9c:	4632      	mov	r2, r6
   d4c9e:	463b      	mov	r3, r7
   d4ca0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ca4:	4963      	ldr	r1, [pc, #396]	; (d4e34 <loop+0x268>)
   d4ca6:	a802      	add	r0, sp, #8
   d4ca8:	f001 fd60 	bl	d676c <_ZN6String6formatEPKcz>
   d4cac:	a902      	add	r1, sp, #8
   d4cae:	a806      	add	r0, sp, #24
   d4cb0:	f001 fd39 	bl	d6726 <_ZplRK15StringSumHelperRK6String>
   d4cb4:	4601      	mov	r1, r0
   d4cb6:	a80a      	add	r0, sp, #40	; 0x28
   d4cb8:	f001 fd0b 	bl	d66d2 <_ZN6StringC1ERKS_>
   d4cbc:	a90a      	add	r1, sp, #40	; 0x28
   d4cbe:	4850      	ldr	r0, [pc, #320]	; (d4e00 <loop+0x234>)
   d4cc0:	f001 fd12 	bl	d66e8 <_ZN6StringaSEOS_>
   d4cc4:	a80a      	add	r0, sp, #40	; 0x28
   d4cc6:	f001 fc7e 	bl	d65c6 <_ZN6StringD1Ev>
   d4cca:	a802      	add	r0, sp, #8
   d4ccc:	f001 fc7b 	bl	d65c6 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4cd0:	a806      	add	r0, sp, #24
   d4cd2:	f001 fc78 	bl	d65c6 <_ZN6StringD1Ev>
      Serial.println("temp rdy");
   d4cd6:	f001 fe79 	bl	d69cc <_Z16_fetch_usbserialv>
   d4cda:	4957      	ldr	r1, [pc, #348]	; (d4e38 <loop+0x26c>)
   d4cdc:	e012      	b.n	d4d04 <loop+0x138>
   d4cde:	4b57      	ldr	r3, [pc, #348]	; (d4e3c <loop+0x270>)
   d4ce0:	4957      	ldr	r1, [pc, #348]	; (d4e40 <loop+0x274>)
   d4ce2:	781a      	ldrb	r2, [r3, #0]
   d4ce4:	4b4a      	ldr	r3, [pc, #296]	; (d4e10 <loop+0x244>)
   d4ce6:	781b      	ldrb	r3, [r3, #0]
   d4ce8:	4313      	orrs	r3, r2
   d4cea:	f88d 3000 	strb.w	r3, [sp]
   d4cee:	4a55      	ldr	r2, [pc, #340]	; (d4e44 <loop+0x278>)
   d4cf0:	233c      	movs	r3, #60	; 0x3c
   d4cf2:	a80a      	add	r0, sp, #40	; 0x28
   d4cf4:	f000 ff5e 	bl	d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4cf8:	a80b      	add	r0, sp, #44	; 0x2c
   d4cfa:	f7ff ff21 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
      Particle.publish("err", "temp" , PRIVATE, NO_ACK);
      Serial.println("temp err");
   d4cfe:	f001 fe65 	bl	d69cc <_Z16_fetch_usbserialv>
   d4d02:	4951      	ldr	r1, [pc, #324]	; (d4e48 <loop+0x27c>)
    }

    // Process CCS811
    #ifdef HAS_CCS811
    err_code = ccs811.read(&ccs811_data);
   d4d04:	4c51      	ldr	r4, [pc, #324]	; (d4e4c <loop+0x280>)
      // Concatinate temp and humidity data
      m_out = String( m_out + String::format("\"temperature\":%.2f,\"humidity\":%.2f",si7021_data.temperature, si7021_data.humidity) );
      Serial.println("temp rdy");
    } else {
      Particle.publish("err", "temp" , PRIVATE, NO_ACK);
      Serial.println("temp err");
   d4d06:	f001 fb8e 	bl	d6426 <_ZN5Print7printlnEPKc>
    }

    // Process CCS811
    #ifdef HAS_CCS811
    err_code = ccs811.read(&ccs811_data);
   d4d0a:	4621      	mov	r1, r4
   d4d0c:	4848      	ldr	r0, [pc, #288]	; (d4e30 <loop+0x264>)
   d4d0e:	f7ff fb07 	bl	d4320 <_ZN6CCS8114readEP13ccs811_data_t>

    if ( err_code == CCS811_SUCCESS ) {
   d4d12:	bb10      	cbnz	r0, d4d5a <loop+0x18e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4d14:	493a      	ldr	r1, [pc, #232]	; (d4e00 <loop+0x234>)
   d4d16:	a806      	add	r0, sp, #24
   d4d18:	f001 fcdb 	bl	d66d2 <_ZN6StringC1ERKS_>

      // Concatinate ccs811 tvoc
      m_out = String( m_out + String::format(",\"tvoc\":%d,\"c02\":%d", ccs811_data.tvoc, ccs811_data.c02) );
   d4d1c:	8823      	ldrh	r3, [r4, #0]
   d4d1e:	8862      	ldrh	r2, [r4, #2]
   d4d20:	494b      	ldr	r1, [pc, #300]	; (d4e50 <loop+0x284>)
   d4d22:	a802      	add	r0, sp, #8
   d4d24:	f001 fd22 	bl	d676c <_ZN6String6formatEPKcz>
   d4d28:	a902      	add	r1, sp, #8
   d4d2a:	a806      	add	r0, sp, #24
   d4d2c:	f001 fcfb 	bl	d6726 <_ZplRK15StringSumHelperRK6String>
   d4d30:	4601      	mov	r1, r0
   d4d32:	a80a      	add	r0, sp, #40	; 0x28
   d4d34:	f001 fccd 	bl	d66d2 <_ZN6StringC1ERKS_>
   d4d38:	a90a      	add	r1, sp, #40	; 0x28
   d4d3a:	4831      	ldr	r0, [pc, #196]	; (d4e00 <loop+0x234>)
   d4d3c:	f001 fcd4 	bl	d66e8 <_ZN6StringaSEOS_>
   d4d40:	a80a      	add	r0, sp, #40	; 0x28
   d4d42:	f001 fc40 	bl	d65c6 <_ZN6StringD1Ev>
   d4d46:	a802      	add	r0, sp, #8
   d4d48:	f001 fc3d 	bl	d65c6 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4d4c:	a806      	add	r0, sp, #24
   d4d4e:	f001 fc3a 	bl	d65c6 <_ZN6StringD1Ev>
      Serial.println("tvoc rdy");
   d4d52:	f001 fe3b 	bl	d69cc <_Z16_fetch_usbserialv>
   d4d56:	493f      	ldr	r1, [pc, #252]	; (d4e54 <loop+0x288>)
   d4d58:	e021      	b.n	d4d9e <loop+0x1d2>
    } else if( err_code == CCS811_NO_DAT_AVAIL ) {
   d4d5a:	2802      	cmp	r0, #2
   d4d5c:	d10c      	bne.n	d4d78 <loop+0x1ac>
      Serial.println("fatal tvoc error");
   d4d5e:	f001 fe35 	bl	d69cc <_Z16_fetch_usbserialv>
   d4d62:	493d      	ldr	r1, [pc, #244]	; (d4e58 <loop+0x28c>)
   d4d64:	f001 fb5f 	bl	d6426 <_ZN5Print7printlnEPKc>
      Serial.flush();
   d4d68:	f001 fe30 	bl	d69cc <_Z16_fetch_usbserialv>
   d4d6c:	6803      	ldr	r3, [r0, #0]
   d4d6e:	69db      	ldr	r3, [r3, #28]
   d4d70:	4798      	blx	r3
      m_error_flag = true;
   d4d72:	2301      	movs	r3, #1
   d4d74:	702b      	strb	r3, [r5, #0]
   d4d76:	e014      	b.n	d4da2 <loop+0x1d6>
   d4d78:	4b30      	ldr	r3, [pc, #192]	; (d4e3c <loop+0x270>)
   d4d7a:	4931      	ldr	r1, [pc, #196]	; (d4e40 <loop+0x274>)
   d4d7c:	781a      	ldrb	r2, [r3, #0]
   d4d7e:	4b24      	ldr	r3, [pc, #144]	; (d4e10 <loop+0x244>)
   d4d80:	781b      	ldrb	r3, [r3, #0]
   d4d82:	4313      	orrs	r3, r2
   d4d84:	f88d 3000 	strb.w	r3, [sp]
   d4d88:	4a34      	ldr	r2, [pc, #208]	; (d4e5c <loop+0x290>)
   d4d8a:	233c      	movs	r3, #60	; 0x3c
   d4d8c:	a80a      	add	r0, sp, #40	; 0x28
   d4d8e:	f000 ff11 	bl	d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4d92:	a80b      	add	r0, sp, #44	; 0x2c
   d4d94:	f7ff fed4 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
      Particle.publish("err", "tvoc" , PRIVATE, NO_ACK);
      Serial.println("tvoc err");
   d4d98:	f001 fe18 	bl	d69cc <_Z16_fetch_usbserialv>
   d4d9c:	4930      	ldr	r1, [pc, #192]	; (d4e60 <loop+0x294>)
   d4d9e:	f001 fb42 	bl	d6426 <_ZN5Print7printlnEPKc>
    // Process PM2.5 and PM10 results
    // This is slightly different from the other readings
    // due to the fact that it should be shut off when not taking a reading
    // (extends the life of the device)
    #ifdef HAS_HPMA
    hpma115.enable();
   d4da2:	4821      	ldr	r0, [pc, #132]	; (d4e28 <loop+0x25c>)
   d4da4:	f7ff fc17 	bl	d45d6 <_ZN7HPMA1156enableEv>
    hpma_timer.start();
   d4da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4dac:	482d      	ldr	r0, [pc, #180]	; (d4e64 <loop+0x298>)
   d4dae:	f7ff fe59 	bl	d4a64 <_ZN5Timer5startEj>
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
    }

    static unsigned uptime() {
        return (hal_timer_millis(nullptr) / 1000);
   d4db2:	2000      	movs	r0, #0
   d4db4:	f000 fb54 	bl	d5460 <hal_timer_millis>
    #endif

  }

  // Save the baseline if we're > 4hr
  uint32_t periods = System.uptime()/60/60/4;
   d4db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	f002 fd41 	bl	d7844 <__aeabi_uldivmod>
   d4dc2:	f44f 5361 	mov.w	r3, #14400	; 0x3840
   d4dc6:	fbb0 f0f3 	udiv	r0, r0, r3
  if( periods > m_period_counter) {
   d4dca:	4b27      	ldr	r3, [pc, #156]	; (d4e68 <loop+0x29c>)
   d4dcc:	681a      	ldr	r2, [r3, #0]
   d4dce:	4290      	cmp	r0, r2
   d4dd0:	d903      	bls.n	d4dda <loop+0x20e>

    //Update the counter
    m_period_counter = periods;
   d4dd2:	6018      	str	r0, [r3, #0]

    #ifdef HAS_CCS811
    ccs811.save_baseline();
   d4dd4:	4816      	ldr	r0, [pc, #88]	; (d4e30 <loop+0x264>)
   d4dd6:	f7ff fa44 	bl	d4262 <_ZN6CCS81113save_baselineEv>
  if( err_code != SGP30_SUCCESS ) {
    Serial.println("sp30 process error");
  }
  #endif

  hpma115.process();
   d4dda:	4813      	ldr	r0, [pc, #76]	; (d4e28 <loop+0x25c>)
   d4ddc:	f7ff fc38 	bl	d4650 <_ZN7HPMA1157processEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4de0:	f000 fcca 	bl	d5778 <spark_cloud_flag_connected>
    checkIaqSensorStatus();
  }
  #endif

  // Send updates/communicate with service when connected
  if( Particle.connected() ) {
   d4de4:	b118      	cbz	r0, d4dee <loop+0x222>
		last_checkin = current_time();
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
   d4de6:	f7ff fd55 	bl	d4894 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4dea:	f000 fcb5 	bl	d5758 <spark_process>
    Particle.process();
  }

  // Checking with WD -- if there's an error flag, no check in. That allows for a sufficent update window.
  if( !m_error_flag ) {
   d4dee:	782b      	ldrb	r3, [r5, #0]
   d4df0:	b90b      	cbnz	r3, d4df6 <loop+0x22a>
    wd.checkin();
   d4df2:	f7ff fd4f 	bl	d4894 <_ZN19ApplicationWatchdog7checkinEv>
  }

   d4df6:	b00f      	add	sp, #60	; 0x3c
   d4df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dfa:	bf00      	nop
   d4dfc:	2003e34c 	.word	0x2003e34c
   d4e00:	2003e310 	.word	0x2003e310
   d4e04:	000d7e22 	.word	0x000d7e22
   d4e08:	000d7e2c 	.word	0x000d7e2c
   d4e0c:	2003e30c 	.word	0x2003e30c
   d4e10:	2003e34b 	.word	0x2003e34b
   d4e14:	000d7e2e 	.word	0x000d7e2e
   d4e18:	2003e34a 	.word	0x2003e34a
   d4e1c:	2003e2fe 	.word	0x2003e2fe
   d4e20:	000d7e33 	.word	0x000d7e33
   d4e24:	2003e3a0 	.word	0x2003e3a0
   d4e28:	2003e374 	.word	0x2003e374
   d4e2c:	2003e36c 	.word	0x2003e36c
   d4e30:	2003e300 	.word	0x2003e300
   d4e34:	000d7e35 	.word	0x000d7e35
   d4e38:	000d7e58 	.word	0x000d7e58
   d4e3c:	2003e344 	.word	0x2003e344
   d4e40:	000d7ea7 	.word	0x000d7ea7
   d4e44:	000d7e61 	.word	0x000d7e61
   d4e48:	000d7e66 	.word	0x000d7e66
   d4e4c:	2003e36e 	.word	0x2003e36e
   d4e50:	000d7e6f 	.word	0x000d7e6f
   d4e54:	000d7e83 	.word	0x000d7e83
   d4e58:	000d7e8c 	.word	0x000d7e8c
   d4e5c:	000d7e9d 	.word	0x000d7e9d
   d4e60:	000d7ea2 	.word	0x000d7ea2
   d4e64:	2003e3a8 	.word	0x2003e3a8
   d4e68:	2003e328 	.word	0x2003e328

000d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>:
   d4e6c:	4613      	mov	r3, r2
   d4e6e:	460a      	mov	r2, r1
   d4e70:	2100      	movs	r1, #0
   d4e72:	f001 bb11 	b.w	d6498 <_ZN5Print11printf_implEbPKcz>
	...

000d4e78 <_Z18set_reading_period6String>:
  m_data_ready = true;

  Serial.println("hpma rdy");
}

int set_reading_period( String period ) {
   d4e78:	b537      	push	{r0, r1, r2, r4, r5, lr}

  uint32_t temp_period = (uint32_t)period.toInt();

  if( temp_period != m_reading_period && temp_period >= MIN_MEASUREMENT_DELAY_MS ) {
   d4e7a:	4d12      	ldr	r5, [pc, #72]	; (d4ec4 <_Z18set_reading_period6String+0x4c>)
  Serial.println("hpma rdy");
}

int set_reading_period( String period ) {

  uint32_t temp_period = (uint32_t)period.toInt();
   d4e7c:	f001 fc71 	bl	d6762 <_ZNK6String5toIntEv>

  if( temp_period != m_reading_period && temp_period >= MIN_MEASUREMENT_DELAY_MS ) {
   d4e80:	682b      	ldr	r3, [r5, #0]
   d4e82:	4298      	cmp	r0, r3
  Serial.println("hpma rdy");
}

int set_reading_period( String period ) {

  uint32_t temp_period = (uint32_t)period.toInt();
   d4e84:	4604      	mov	r4, r0

  if( temp_period != m_reading_period && temp_period >= MIN_MEASUREMENT_DELAY_MS ) {
   d4e86:	d017      	beq.n	d4eb8 <_Z18set_reading_period6String+0x40>
   d4e88:	f242 730f 	movw	r3, #9999	; 0x270f
   d4e8c:	4298      	cmp	r0, r3
   d4e8e:	d913      	bls.n	d4eb8 <_Z18set_reading_period6String+0x40>
    Serial.printf("update reading period %d\n",temp_period);
   d4e90:	f001 fd9c 	bl	d69cc <_Z16_fetch_usbserialv>
   d4e94:	4622      	mov	r2, r4
   d4e96:	490c      	ldr	r1, [pc, #48]	; (d4ec8 <_Z18set_reading_period6String+0x50>)
   d4e98:	f7ff ffe8 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4e9c:	4b0b      	ldr	r3, [pc, #44]	; (d4ecc <_Z18set_reading_period6String+0x54>)
    m_reading_period = temp_period;
   d4e9e:	602c      	str	r4, [r5, #0]
   d4ea0:	6898      	ldr	r0, [r3, #8]
   d4ea2:	b160      	cbz	r0, d4ebe <_Z18set_reading_period6String+0x46>
   d4ea4:	2200      	movs	r2, #0
   d4ea6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4eaa:	9300      	str	r3, [sp, #0]
   d4eac:	9201      	str	r2, [sp, #4]
   d4eae:	4623      	mov	r3, r4
   d4eb0:	2103      	movs	r1, #3
   d4eb2:	f000 fa75 	bl	d53a0 <os_timer_change>
   d4eb6:	e002      	b.n	d4ebe <_Z18set_reading_period6String+0x46>

    return 1;

  }

  return -1;
   d4eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4ebc:	e000      	b.n	d4ec0 <_Z18set_reading_period6String+0x48>
    m_reading_period = temp_period;

    // Change period if variable is updated
    timer.changePeriod(m_reading_period);

    return 1;
   d4ebe:	2001      	movs	r0, #1

  }

  return -1;

}
   d4ec0:	b003      	add	sp, #12
   d4ec2:	bd30      	pop	{r4, r5, pc}
   d4ec4:	2003e284 	.word	0x2003e284
   d4ec8:	000d7eab 	.word	0x000d7eab
   d4ecc:	2003e350 	.word	0x2003e350

000d4ed0 <setup>:
  }
}
#endif

// setup() runs once, when the device is first turned on.
void setup() {
   d4ed0:	b530      	push	{r4, r5, lr}
   d4ed2:	b08f      	sub	sp, #60	; 0x3c
  // Turn off the LED
  // RGB.control(true);
  // RGB.brightness(0);

  // Set up PC based UART (for debugging)
  Serial.blockOnOverrun(false);
   d4ed4:	f001 fd7a 	bl	d69cc <_Z16_fetch_usbserialv>
   d4ed8:	6803      	ldr	r3, [r0, #0]
   d4eda:	2100      	movs	r1, #0
   d4edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ede:	4798      	blx	r3
  Serial.begin();
   d4ee0:	f001 fd74 	bl	d69cc <_Z16_fetch_usbserialv>
   d4ee4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ee8:	f001 fd64 	bl	d69b4 <_ZN9USBSerial5beginEl>

  // Set up I2C
  Wire.setSpeed(I2C_CLK_SPEED);
   d4eec:	f001 fee4 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4ef0:	495e      	ldr	r1, [pc, #376]	; (d506c <setup+0x19c>)
   d4ef2:	f001 f841 	bl	d5f78 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   d4ef6:	f001 fedf 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d4efa:	f001 f841 	bl	d5f80 <_ZN7TwoWire5beginEv>

  // Set up Si7021;
  si7021_data_last.humidity = 0;
  si7021_data_last.temperature = 0;

  uint32_t err_code = si7021.setup();
   d4efe:	485c      	ldr	r0, [pc, #368]	; (d5070 <setup+0x1a0>)
   d4f00:	f000 f979 	bl	d51f6 <_ZN6Si70215setupEv>
  if( err_code != 0 ) {
   d4f04:	4604      	mov	r4, r0
   d4f06:	b168      	cbz	r0, d4f24 <setup+0x54>
    Serial.printf("si7021 setup err %d\n", err_code);
   d4f08:	f001 fd60 	bl	d69cc <_Z16_fetch_usbserialv>
   d4f0c:	4622      	mov	r2, r4
   d4f0e:	4959      	ldr	r1, [pc, #356]	; (d5074 <setup+0x1a4>)
   d4f10:	f7ff ffac 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
    Serial.flush();
   d4f14:	f001 fd5a 	bl	d69cc <_Z16_fetch_usbserialv>
   d4f18:	6803      	ldr	r3, [r0, #0]
   d4f1a:	69db      	ldr	r3, [r3, #28]
   d4f1c:	4798      	blx	r3
    m_error_flag = true;
   d4f1e:	4b56      	ldr	r3, [pc, #344]	; (d5078 <setup+0x1a8>)
   d4f20:	2201      	movs	r2, #1
   d4f22:	701a      	strb	r2, [r3, #0]
  }

  // Setup CC8012
  #ifdef HAS_CCS811
  ccs811_init_t ccs811_init;
  ccs811_init.int_pin = CCS811_INT_PIN;
   d4f24:	2308      	movs	r3, #8
   d4f26:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  ccs811_init.address = CCS811_ADDRESS;
   d4f2a:	235a      	movs	r3, #90	; 0x5a
   d4f2c:	f88d 3020 	strb.w	r3, [sp, #32]
  ccs811_init.pin_interrupt = ccs811_pin_interrupt;
   d4f30:	4b52      	ldr	r3, [pc, #328]	; (d507c <setup+0x1ac>)
   d4f32:	9309      	str	r3, [sp, #36]	; 0x24
  ccs811_init.rst_pin = CCS811_RST_PIN;
   d4f34:	2307      	movs	r3, #7
   d4f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  ccs811_init.wake_pin = CCS811_WAKE_PIN;

  // Init the TVOC & C02 sensor
  err_code = ccs811.setup(&ccs811_init);
   d4f3a:	a908      	add	r1, sp, #32
  ccs811_init_t ccs811_init;
  ccs811_init.int_pin = CCS811_INT_PIN;
  ccs811_init.address = CCS811_ADDRESS;
  ccs811_init.pin_interrupt = ccs811_pin_interrupt;
  ccs811_init.rst_pin = CCS811_RST_PIN;
  ccs811_init.wake_pin = CCS811_WAKE_PIN;
   d4f3c:	2306      	movs	r3, #6

  // Init the TVOC & C02 sensor
  err_code = ccs811.setup(&ccs811_init);
   d4f3e:	4850      	ldr	r0, [pc, #320]	; (d5080 <setup+0x1b0>)
  ccs811_init_t ccs811_init;
  ccs811_init.int_pin = CCS811_INT_PIN;
  ccs811_init.address = CCS811_ADDRESS;
  ccs811_init.pin_interrupt = ccs811_pin_interrupt;
  ccs811_init.rst_pin = CCS811_RST_PIN;
  ccs811_init.wake_pin = CCS811_WAKE_PIN;
   d4f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a

  // Init the TVOC & C02 sensor
  err_code = ccs811.setup(&ccs811_init);
   d4f44:	f7ff f8bd 	bl	d40c2 <_ZN6CCS8115setupEP13ccs811_init_t>
  if( err_code != 0 ) {
   d4f48:	4604      	mov	r4, r0
   d4f4a:	b168      	cbz	r0, d4f68 <setup+0x98>
    Serial.printf("ccs811 setup err %d\n", err_code);
   d4f4c:	f001 fd3e 	bl	d69cc <_Z16_fetch_usbserialv>
   d4f50:	4622      	mov	r2, r4
   d4f52:	494c      	ldr	r1, [pc, #304]	; (d5084 <setup+0x1b4>)
   d4f54:	f7ff ff8a 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
    Serial.flush();
   d4f58:	f001 fd38 	bl	d69cc <_Z16_fetch_usbserialv>
   d4f5c:	6803      	ldr	r3, [r0, #0]
   d4f5e:	69db      	ldr	r3, [r3, #28]
   d4f60:	4798      	blx	r3
    m_error_flag = true;
   d4f62:	4b45      	ldr	r3, [pc, #276]	; (d5078 <setup+0x1a8>)
   d4f64:	2201      	movs	r2, #1
   d4f66:	701a      	strb	r2, [r3, #0]
      .minor = 0,
      .trivial = 1
    },
    .data = CCS811_FW_App_v2_0_1_bin,
    .size = CCS811_FW_App_v2_0_1_bin_len
  };
   d4f68:	2500      	movs	r5, #0
   d4f6a:	2302      	movs	r3, #2
   d4f6c:	950b      	str	r5, [sp, #44]	; 0x2c
   d4f6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d4f72:	2301      	movs	r3, #1
   d4f74:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d4f78:	4b43      	ldr	r3, [pc, #268]	; (d5088 <setup+0x1b8>)
   d4f7a:	930c      	str	r3, [sp, #48]	; 0x30
   d4f7c:	4b43      	ldr	r3, [pc, #268]	; (d508c <setup+0x1bc>)

    // Get the version and print it
  ccs811_app_ver_t version;
  ccs811.get_app_version(&version);
   d4f7e:	4840      	ldr	r0, [pc, #256]	; (d5080 <setup+0x1b0>)
      .minor = 0,
      .trivial = 1
    },
    .data = CCS811_FW_App_v2_0_1_bin,
    .size = CCS811_FW_App_v2_0_1_bin_len
  };
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	930d      	str	r3, [sp, #52]	; 0x34

    // Get the version and print it
  ccs811_app_ver_t version;
  ccs811.get_app_version(&version);
   d4f84:	a903      	add	r1, sp, #12
   d4f86:	f7ff fa0e 	bl	d43a6 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>

  Serial.printf("ccs811 ver %x.%d.%d\n", version.major, version.minor, version.trivial);
   d4f8a:	f001 fd1f 	bl	d69cc <_Z16_fetch_usbserialv>
   d4f8e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   d4f92:	9201      	str	r2, [sp, #4]
   d4f94:	f89d 200d 	ldrb.w	r2, [sp, #13]
   d4f98:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4f9c:	9200      	str	r2, [sp, #0]
   d4f9e:	4629      	mov	r1, r5
   d4fa0:	4a3b      	ldr	r2, [pc, #236]	; (d5090 <setup+0x1c0>)
   d4fa2:	f001 fa79 	bl	d6498 <_ZN5Print11printf_implEbPKcz>

  // Checkfor updates
  err_code = ccs811.update_app(&update);
   d4fa6:	a90b      	add	r1, sp, #44	; 0x2c
   d4fa8:	4835      	ldr	r0, [pc, #212]	; (d5080 <setup+0x1b0>)
   d4faa:	f7ff fa2f 	bl	d440c <_ZN6CCS81110update_appEPK19ccs811_app_update_t>
  if( err_code == CCS811_NO_UPDATE_NEEDED ) {
   d4fae:	2805      	cmp	r0, #5
  ccs811.get_app_version(&version);

  Serial.printf("ccs811 ver %x.%d.%d\n", version.major, version.minor, version.trivial);

  // Checkfor updates
  err_code = ccs811.update_app(&update);
   d4fb0:	4604      	mov	r4, r0
  if( err_code == CCS811_NO_UPDATE_NEEDED ) {
   d4fb2:	d106      	bne.n	d4fc2 <setup+0xf2>
    Serial.printf("ccs811 no update needed\n");
   d4fb4:	f001 fd0a 	bl	d69cc <_Z16_fetch_usbserialv>
   d4fb8:	4a36      	ldr	r2, [pc, #216]	; (d5094 <setup+0x1c4>)
   d4fba:	4629      	mov	r1, r5
   d4fbc:	f001 fa6c 	bl	d6498 <_ZN5Print11printf_implEbPKcz>
   d4fc0:	e006      	b.n	d4fd0 <setup+0x100>
    Serial.flush();
  } else if  ( err_code != 0 ) {
   d4fc2:	b150      	cbz	r0, d4fda <setup+0x10a>
    Serial.printf("ccs811 update err %d\n", err_code);
   d4fc4:	f001 fd02 	bl	d69cc <_Z16_fetch_usbserialv>
   d4fc8:	4622      	mov	r2, r4
   d4fca:	4933      	ldr	r1, [pc, #204]	; (d5098 <setup+0x1c8>)
   d4fcc:	f7ff ff4e 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
    Serial.flush();
   d4fd0:	f001 fcfc 	bl	d69cc <_Z16_fetch_usbserialv>
   d4fd4:	6803      	ldr	r3, [r0, #0]
   d4fd6:	69db      	ldr	r3, [r3, #28]
   d4fd8:	4798      	blx	r3
  }

  // Restore the baseline
  ccs811.restore_baseline();
   d4fda:	4829      	ldr	r0, [pc, #164]	; (d5080 <setup+0x1b0>)
   d4fdc:	f7ff f96f 	bl	d42be <_ZN6CCS81116restore_baselineEv>

  // Start VOC measurement
  // This is an async reading.
  err_code = ccs811.enable();
   d4fe0:	4827      	ldr	r0, [pc, #156]	; (d5080 <setup+0x1b0>)
   d4fe2:	f7ff f904 	bl	d41ee <_ZN6CCS8116enableEv>
  if( err_code != 0 ) {
   d4fe6:	4604      	mov	r4, r0
   d4fe8:	b168      	cbz	r0, d5006 <setup+0x136>
    Serial.printf("ccs811 enable err %d\n", err_code);
   d4fea:	f001 fcef 	bl	d69cc <_Z16_fetch_usbserialv>
   d4fee:	4622      	mov	r2, r4
   d4ff0:	492a      	ldr	r1, [pc, #168]	; (d509c <setup+0x1cc>)
   d4ff2:	f7ff ff3b 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
    Serial.flush();
   d4ff6:	f001 fce9 	bl	d69cc <_Z16_fetch_usbserialv>
   d4ffa:	6803      	ldr	r3, [r0, #0]
   d4ffc:	69db      	ldr	r3, [r3, #28]
   d4ffe:	4798      	blx	r3
    m_error_flag = true;
   d5000:	4b1d      	ldr	r3, [pc, #116]	; (d5078 <setup+0x1a8>)
   d5002:	2201      	movs	r2, #1
   d5004:	701a      	strb	r2, [r3, #0]
  #endif

  #ifdef HAS_HPMA
  // Setup HPMA115
  hpma115_init_t hpma115_init;
  hpma115_init.callback = hpma_evt_handler;
   d5006:	4b26      	ldr	r3, [pc, #152]	; (d50a0 <setup+0x1d0>)
   d5008:	9304      	str	r3, [sp, #16]
  hpma115_init.enable_pin = HPMA1150_EN_PIN;

  // Init HPM115 sensor
  err_code = hpma115.setup(&hpma115_init);
   d500a:	a904      	add	r1, sp, #16

  #ifdef HAS_HPMA
  // Setup HPMA115
  hpma115_init_t hpma115_init;
  hpma115_init.callback = hpma_evt_handler;
  hpma115_init.enable_pin = HPMA1150_EN_PIN;
   d500c:	2305      	movs	r3, #5

  // Init HPM115 sensor
  err_code = hpma115.setup(&hpma115_init);
   d500e:	4825      	ldr	r0, [pc, #148]	; (d50a4 <setup+0x1d4>)

  #ifdef HAS_HPMA
  // Setup HPMA115
  hpma115_init_t hpma115_init;
  hpma115_init.callback = hpma_evt_handler;
  hpma115_init.enable_pin = HPMA1150_EN_PIN;
   d5010:	f88d 3014 	strb.w	r3, [sp, #20]

  // Init HPM115 sensor
  err_code = hpma115.setup(&hpma115_init);
   d5014:	f7ff fafb 	bl	d460e <_ZN7HPMA1155setupEP14hpma115_init_t>
  if (err_code != HPMA115_SUCCESS) {
   d5018:	4604      	mov	r4, r0
   d501a:	b168      	cbz	r0, d5038 <setup+0x168>
    Serial.printf("hpma115 enable err %d\n", err_code);
   d501c:	f001 fcd6 	bl	d69cc <_Z16_fetch_usbserialv>
   d5020:	4622      	mov	r2, r4
   d5022:	4921      	ldr	r1, [pc, #132]	; (d50a8 <setup+0x1d8>)
   d5024:	f7ff ff22 	bl	d4e6c <_ZN5Print6printfIImEEEjPKcDpT_>
    Serial.flush();
   d5028:	f001 fcd0 	bl	d69cc <_Z16_fetch_usbserialv>
   d502c:	6803      	ldr	r3, [r0, #0]
   d502e:	69db      	ldr	r3, [r3, #28]
   d5030:	4798      	blx	r3
    m_error_flag = true;
   d5032:	4b11      	ldr	r3, [pc, #68]	; (d5078 <setup+0x1a8>)
   d5034:	2201      	movs	r2, #1
   d5036:	701a      	strb	r2, [r3, #0]
  bsec.updateSubscription(sensorList, 7, BSEC_SAMPLE_RATE_LP); //BSEC_SAMPLE_RATE_LP
  checkIaqSensorStatus();
  #endif

  // Start the timer
  timer.start();
   d5038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d503c:	481b      	ldr	r0, [pc, #108]	; (d50ac <setup+0x1dc>)
   d503e:	f7ff fd11 	bl	d4a64 <_ZN5Timer5startEj>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d5042:	4a1b      	ldr	r2, [pc, #108]	; (d50b0 <setup+0x1e0>)
   d5044:	491b      	ldr	r1, [pc, #108]	; (d50b4 <setup+0x1e4>)
   d5046:	481c      	ldr	r0, [pc, #112]	; (d50b8 <setup+0x1e8>)
   d5048:	f000 fc94 	bl	d5974 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d504c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d504e:	2208      	movs	r2, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d5050:	9306      	str	r3, [sp, #24]
        conn_prop.size = sizeof(conn_prop);
   d5052:	f8ad 2018 	strh.w	r2, [sp, #24]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d5056:	2201      	movs	r2, #1
   d5058:	9207      	str	r2, [sp, #28]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d505a:	f64e 2160 	movw	r1, #60000	; 0xea60
   d505e:	aa06      	add	r2, sp, #24
   d5060:	4618      	mov	r0, r3
   d5062:	f000 fb99 	bl	d5798 <spark_set_connection_property>
  Particle.function("set_period", set_reading_period);

  // Set up keep alive
  Particle.keepAlive(60);

}
   d5066:	b00f      	add	sp, #60	; 0x3c
   d5068:	bd30      	pop	{r4, r5, pc}
   d506a:	bf00      	nop
   d506c:	000186a0 	.word	0x000186a0
   d5070:	2003e36c 	.word	0x2003e36c
   d5074:	000d7ec5 	.word	0x000d7ec5
   d5078:	2003e2fe 	.word	0x2003e2fe
   d507c:	000d47d1 	.word	0x000d47d1
   d5080:	2003e300 	.word	0x2003e300
   d5084:	000d7eda 	.word	0x000d7eda
   d5088:	2003ce8c 	.word	0x2003ce8c
   d508c:	2003e288 	.word	0x2003e288
   d5090:	000d7eef 	.word	0x000d7eef
   d5094:	000d7f04 	.word	0x000d7f04
   d5098:	000d7f1d 	.word	0x000d7f1d
   d509c:	000d7f33 	.word	0x000d7f33
   d50a0:	000d49d5 	.word	0x000d49d5
   d50a4:	2003e374 	.word	0x2003e374
   d50a8:	000d7f49 	.word	0x000d7f49
   d50ac:	2003e350 	.word	0x2003e350
   d50b0:	000d7f60 	.word	0x000d7f60
   d50b4:	000d4e79 	.word	0x000d4e79
   d50b8:	000d5949 	.word	0x000d5949

000d50bc <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin>:
  // Checking with WD -- if there's an error flag, no check in. That allows for a sufficent update window.
  if( !m_error_flag ) {
    wd.checkin();
  }

   d50bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50c0:	4b34      	ldr	r3, [pc, #208]	; (d5194 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xd8>)
#ifdef HAS_BME680
static Bsec    bsec = Bsec();
#endif

// Set up timer
Timer timer(m_reading_period, timer_handler);
   d50c2:	f8df 9124 	ldr.w	r9, [pc, #292]	; d51e8 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x12c>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d50c6:	f8df 8124 	ldr.w	r8, [pc, #292]	; d51ec <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x130>
   d50ca:	4e33      	ldr	r6, [pc, #204]	; (d5198 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xdc>)
   d50cc:	2701      	movs	r7, #1
   d50ce:	701f      	strb	r7, [r3, #0]
   d50d0:	4b32      	ldr	r3, [pc, #200]	; (d519c <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xe0>)
   d50d2:	2502      	movs	r5, #2
   d50d4:	701d      	strb	r5, [r3, #0]
   d50d6:	4b32      	ldr	r3, [pc, #200]	; (d51a0 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xe4>)
  // Checking with WD -- if there's an error flag, no check in. That allows for a sufficent update window.
  if( !m_error_flag ) {
    wd.checkin();
  }

   d50d8:	b085      	sub	sp, #20
   d50da:	2208      	movs	r2, #8
   d50dc:	701a      	strb	r2, [r3, #0]
   d50de:	f000 f9c7 	bl	d5470 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d50e2:	4b30      	ldr	r3, [pc, #192]	; (d51a4 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xe8>)
   d50e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d50e8:	2400      	movs	r4, #0
   d50ea:	701c      	strb	r4, [r3, #0]
   d50ec:	805c      	strh	r4, [r3, #2]
   d50ee:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50f0:	4628      	mov	r0, r5
   d50f2:	f000 faf5 	bl	d56e0 <set_system_mode>

// Reading delay ms
static uint32_t m_reading_period = MEASUREMENT_DELAY_MS;

// Static objects
static Si7021  si7021 = Si7021();
   d50f6:	482c      	ldr	r0, [pc, #176]	; (d51a8 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xec>)
	    _M_manager = &_My_handler::_M_manager;
   d50f8:	4d2c      	ldr	r5, [pc, #176]	; (d51ac <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xf0>)
   d50fa:	f000 f87b 	bl	d51f4 <_ZN6Si7021C1Ev>
static CCS811  ccs811 = CCS811();
   d50fe:	482c      	ldr	r0, [pc, #176]	; (d51b0 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xf4>)
   d5100:	f7fe ffdb 	bl	d40ba <_ZN6CCS811C1Ev>
static HPMA115 hpma115 = HPMA115();
   d5104:	482b      	ldr	r0, [pc, #172]	; (d51b4 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xf8>)
   d5106:	f7ff fa65 	bl	d45d4 <_ZN7HPMA115C1Ev>
#ifdef HAS_BME680
static Bsec    bsec = Bsec();
#endif

// Set up timer
Timer timer(m_reading_period, timer_handler);
   d510a:	4b2b      	ldr	r3, [pc, #172]	; (d51b8 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0xfc>)
   d510c:	9502      	str	r5, [sp, #8]
   d510e:	6819      	ldr	r1, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5110:	4b2a      	ldr	r3, [pc, #168]	; (d51bc <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x100>)
   d5112:	9300      	str	r3, [sp, #0]
   d5114:	466a      	mov	r2, sp
   d5116:	4623      	mov	r3, r4
   d5118:	4648      	mov	r0, r9
   d511a:	4c29      	ldr	r4, [pc, #164]	; (d51c0 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x104>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d511c:	f8cd 800c 	str.w	r8, [sp, #12]
   d5120:	f7ff fc16 	bl	d4950 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5124:	4668      	mov	r0, sp
   d5126:	f7ff fb77 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d512a:	4622      	mov	r2, r4
   d512c:	4631      	mov	r1, r6
   d512e:	4648      	mov	r0, r9
   d5130:	f001 fe04 	bl	d6d3c <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5134:	9502      	str	r5, [sp, #8]
Timer hpma_timer(HPMA_TIMEOUT_MS, hpma_timeout_handler, true);
   d5136:	4d23      	ldr	r5, [pc, #140]	; (d51c4 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x108>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5138:	4b23      	ldr	r3, [pc, #140]	; (d51c8 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x10c>)
   d513a:	9300      	str	r3, [sp, #0]
   d513c:	466a      	mov	r2, sp
   d513e:	463b      	mov	r3, r7
   d5140:	f242 7110 	movw	r1, #10000	; 0x2710
   d5144:	4628      	mov	r0, r5
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5146:	f8cd 800c 	str.w	r8, [sp, #12]
   d514a:	f7ff fc01 	bl	d4950 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d514e:	4668      	mov	r0, sp
   d5150:	f7ff fb62 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d5154:	4628      	mov	r0, r5
#ifdef HAS_SGP30
Timer sgp30_timer(SGP30_READ_INTERVAL, sgp30_timer_handler);
#endif

// Watchdog
ApplicationWatchdog wd(WATCHDOG_TIMEOUT_MS, System.reset);
   d5156:	4d1d      	ldr	r5, [pc, #116]	; (d51cc <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x110>)
static Bsec    bsec = Bsec();
#endif

// Set up timer
Timer timer(m_reading_period, timer_handler);
Timer hpma_timer(HPMA_TIMEOUT_MS, hpma_timeout_handler, true);
   d5158:	4622      	mov	r2, r4
   d515a:	4631      	mov	r1, r6
   d515c:	f001 fdee 	bl	d6d3c <__aeabi_atexit>
#ifdef HAS_SGP30
Timer sgp30_timer(SGP30_READ_INTERVAL, sgp30_timer_handler);
#endif

// Watchdog
ApplicationWatchdog wd(WATCHDOG_TIMEOUT_MS, System.reset);
   d5160:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5164:	4a1a      	ldr	r2, [pc, #104]	; (d51d0 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x114>)
   d5166:	491b      	ldr	r1, [pc, #108]	; (d51d4 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x118>)
   d5168:	4628      	mov	r0, r5
   d516a:	f7ff fb9b 	bl	d48a4 <_ZN19ApplicationWatchdogC1EjPFvvEj>
   d516e:	4628      	mov	r0, r5
#endif

// State of baseline
static uint32_t m_period_counter = 0;

static String m_out;
   d5170:	4d19      	ldr	r5, [pc, #100]	; (d51d8 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x11c>)
#ifdef HAS_SGP30
Timer sgp30_timer(SGP30_READ_INTERVAL, sgp30_timer_handler);
#endif

// Watchdog
ApplicationWatchdog wd(WATCHDOG_TIMEOUT_MS, System.reset);
   d5172:	491a      	ldr	r1, [pc, #104]	; (d51dc <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x120>)
   d5174:	4622      	mov	r2, r4
   d5176:	f001 fde1 	bl	d6d3c <__aeabi_atexit>
#endif

// State of baseline
static uint32_t m_period_counter = 0;

static String m_out;
   d517a:	4919      	ldr	r1, [pc, #100]	; (d51e0 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x124>)
   d517c:	4628      	mov	r0, r5
   d517e:	f001 fa69 	bl	d6654 <_ZN6StringC1EPK19__FlashStringHelper>
   d5182:	4622      	mov	r2, r4
   d5184:	4917      	ldr	r1, [pc, #92]	; (d51e4 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin+0x128>)
   d5186:	4628      	mov	r0, r5
   d5188:	f001 fdd8 	bl	d6d3c <__aeabi_atexit>
  // Checking with WD -- if there's an error flag, no check in. That allows for a sufficent update window.
  if( !m_error_flag ) {
    wd.checkin();
  }

   d518c:	b005      	add	sp, #20
   d518e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5192:	bf00      	nop
   d5194:	2003e34b 	.word	0x2003e34b
   d5198:	000d4a91 	.word	0x000d4a91
   d519c:	2003e344 	.word	0x2003e344
   d51a0:	2003e30c 	.word	0x2003e30c
   d51a4:	2003e320 	.word	0x2003e320
   d51a8:	2003e36c 	.word	0x2003e36c
   d51ac:	000d47b9 	.word	0x000d47b9
   d51b0:	2003e300 	.word	0x2003e300
   d51b4:	2003e374 	.word	0x2003e374
   d51b8:	2003e284 	.word	0x2003e284
   d51bc:	000d47a9 	.word	0x000d47a9
   d51c0:	2003e2f8 	.word	0x2003e2f8
   d51c4:	2003e3a8 	.word	0x2003e3a8
   d51c8:	000d4b6d 	.word	0x000d4b6d
   d51cc:	2003e32c 	.word	0x2003e32c
   d51d0:	000d67c7 	.word	0x000d67c7
   d51d4:	0001d4c0 	.word	0x0001d4c0
   d51d8:	2003e310 	.word	0x2003e310
   d51dc:	000d4851 	.word	0x000d4851
   d51e0:	000d800c 	.word	0x000d800c
   d51e4:	000d65c7 	.word	0x000d65c7
   d51e8:	2003e350 	.word	0x2003e350
   d51ec:	000d47b5 	.word	0x000d47b5

000d51f0 <_GLOBAL__sub_I__ZN5SGP30C2Ev>:
   d51f0:	f000 b93e 	b.w	d5470 <HAL_Pin_Map>

000d51f4 <_ZN6Si7021C1Ev>:
 * License: GNU GPLv3
 */

#include "si7021.h"

Si7021::Si7021(void) {}
   d51f4:	4770      	bx	lr

000d51f6 <_ZN6Si70215setupEv>:

uint32_t Si7021::setup() {
   d51f6:	b508      	push	{r3, lr}
  // Return error if we failed
  if (Wire.requestFrom(SI7021_ADDRESS, 1) == 0) {
   d51f8:	f001 fd5e 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d51fc:	2201      	movs	r2, #1
   d51fe:	2140      	movs	r1, #64	; 0x40
   d5200:	f000 fed0 	bl	d5fa4 <_ZN7TwoWire11requestFromEii>
    return SI7021_COMMS_FAIL_ERROR;
  }

  return SI7021_SUCCESS;
}
   d5204:	fab0 f080 	clz	r0, r0
   d5208:	0940      	lsrs	r0, r0, #5
   d520a:	bd08      	pop	{r3, pc}
   d520c:	0000      	movs	r0, r0
	...

000d5210 <_ZN6Si70214readEP13si7021_data_t>:

 uint32_t Si7021::read(si7021_data_t * p_data) {
   d5210:	b538      	push	{r3, r4, r5, lr}
   d5212:	460d      	mov	r5, r1

    // Si7021 Temperature
    Wire.beginTransmission(SI7021_ADDRESS);
   d5214:	f001 fd50 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5218:	2140      	movs	r1, #64	; 0x40
   d521a:	f000 fecc 	bl	d5fb6 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(SI7021_TEMP_HOLD_CMD); // sends one byte
   d521e:	f001 fd4b 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5222:	21e3      	movs	r1, #227	; 0xe3
   d5224:	f7fe ff45 	bl	d40b2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();           // stop transaction
   d5228:	f001 fd46 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d522c:	f000 feca 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(SI7021_ADDRESS, 2);
   d5230:	f001 fd42 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5234:	2202      	movs	r2, #2
   d5236:	2140      	movs	r1, #64	; 0x40
   d5238:	f000 feb4 	bl	d5fa4 <_ZN7TwoWire11requestFromEii>

    // Get the raw temperature from the device
    uint16_t temp_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);
   d523c:	f001 fd3c 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5240:	6803      	ldr	r3, [r0, #0]
   d5242:	695b      	ldr	r3, [r3, #20]
   d5244:	4798      	blx	r3
   d5246:	4604      	mov	r4, r0
   d5248:	f001 fd36 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d524c:	6803      	ldr	r3, [r0, #0]
   d524e:	695b      	ldr	r3, [r3, #20]
   d5250:	4798      	blx	r3

    // Then calculate the temperature
    p_data->temperature = ((175.72 * temp_code) / 0xffff - 46.85);
   d5252:	0224      	lsls	r4, r4, #8
   d5254:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d5258:	b2c0      	uxtb	r0, r0
   d525a:	4320      	orrs	r0, r4
   d525c:	f002 f82a 	bl	d72b4 <__aeabi_i2d>
   d5260:	a323      	add	r3, pc, #140	; (adr r3, d52f0 <_ZN6Si70214readEP13si7021_data_t+0xe0>)
   d5262:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5266:	f002 f88b 	bl	d7380 <__aeabi_dmul>
   d526a:	a323      	add	r3, pc, #140	; (adr r3, d52f8 <_ZN6Si70214readEP13si7021_data_t+0xe8>)
   d526c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5270:	f002 f9b0 	bl	d75d4 <__aeabi_ddiv>
   d5274:	a322      	add	r3, pc, #136	; (adr r3, d5300 <_ZN6Si70214readEP13si7021_data_t+0xf0>)
   d5276:	e9d3 2300 	ldrd	r2, r3, [r3]
   d527a:	f001 fecd 	bl	d7018 <__aeabi_dsub>
   d527e:	f002 fa91 	bl	d77a4 <__aeabi_d2f>
   d5282:	6028      	str	r0, [r5, #0]

    // Si7021 Humidity
    Wire.beginTransmission(SI7021_ADDRESS);
   d5284:	f001 fd18 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5288:	2140      	movs	r1, #64	; 0x40
   d528a:	f000 fe94 	bl	d5fb6 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(SI7021_HUMIDITY_HOLD_CMD); // sends one byte
   d528e:	f001 fd13 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d5292:	21e5      	movs	r1, #229	; 0xe5
   d5294:	f7fe ff0d 	bl	d40b2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();               // stop transaction
   d5298:	f001 fd0e 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d529c:	f000 fe92 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(SI7021_ADDRESS, 2);
   d52a0:	f001 fd0a 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d52a4:	2202      	movs	r2, #2
   d52a6:	2140      	movs	r1, #64	; 0x40
   d52a8:	f000 fe7c 	bl	d5fa4 <_ZN7TwoWire11requestFromEii>

    // Get the raw humidity value from the evice
    uint16_t rh_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);
   d52ac:	f001 fd04 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d52b0:	6803      	ldr	r3, [r0, #0]
   d52b2:	695b      	ldr	r3, [r3, #20]
   d52b4:	4798      	blx	r3
   d52b6:	4604      	mov	r4, r0
   d52b8:	f001 fcfe 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d52bc:	6803      	ldr	r3, [r0, #0]
   d52be:	695b      	ldr	r3, [r3, #20]
   d52c0:	4798      	blx	r3

    // Then calculate the teperature
    p_data->humidity = ((125 * rh_code) / 0xffff - 6);
   d52c2:	0224      	lsls	r4, r4, #8
   d52c4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d52c8:	b2c0      	uxtb	r0, r0
   d52ca:	4320      	orrs	r0, r4
   d52cc:	237d      	movs	r3, #125	; 0x7d
   d52ce:	4358      	muls	r0, r3
   d52d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d52d4:	fb90 f0f3 	sdiv	r0, r0, r3
   d52d8:	3806      	subs	r0, #6
   d52da:	ee07 0a90 	vmov	s15, r0
   d52de:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Serial.printf("hum: %.2f%% temp: %.2f°C\n",p_data->humidity,p_data->temperature);

    return SI7021_SUCCESS;
   d52e2:	2000      	movs	r0, #0

    // Get the raw humidity value from the evice
    uint16_t rh_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);

    // Then calculate the teperature
    p_data->humidity = ((125 * rh_code) / 0xffff - 6);
   d52e4:	edc5 7a01 	vstr	s15, [r5, #4]

    // Serial.printf("hum: %.2f%% temp: %.2f°C\n",p_data->humidity,p_data->temperature);

    return SI7021_SUCCESS;
   d52e8:	bd38      	pop	{r3, r4, r5, pc}
   d52ea:	bf00      	nop
   d52ec:	f3af 8000 	nop.w
   d52f0:	3d70a3d7 	.word	0x3d70a3d7
   d52f4:	4065f70a 	.word	0x4065f70a
   d52f8:	00000000 	.word	0x00000000
   d52fc:	40efffe0 	.word	0x40efffe0
   d5300:	cccccccd 	.word	0xcccccccd
   d5304:	40476ccc 	.word	0x40476ccc

000d5308 <_GLOBAL__sub_I__ZN6Si7021C2Ev>:
   d5308:	f000 b8b2 	b.w	d5470 <HAL_Pin_Map>

000d530c <_GLOBAL__sub_I__ZN4Bsec7wireObjE>:
   d530c:	f000 b8b0 	b.w	d5470 <HAL_Pin_Map>

000d5310 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <os_thread_create+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	685b      	ldr	r3, [r3, #4]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030248 	.word	0x00030248

000d5320 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <os_thread_is_current+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	689b      	ldr	r3, [r3, #8]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030248 	.word	0x00030248

000d5330 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <os_thread_yield+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	68db      	ldr	r3, [r3, #12]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030248 	.word	0x00030248

000d5340 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <os_thread_join+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	691b      	ldr	r3, [r3, #16]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030248 	.word	0x00030248

000d5350 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <os_thread_cleanup+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	695b      	ldr	r3, [r3, #20]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030248 	.word	0x00030248

000d5360 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <os_thread_scheduling+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	69db      	ldr	r3, [r3, #28]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030248 	.word	0x00030248

000d5370 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <os_timer_create+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	6a1b      	ldr	r3, [r3, #32]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030248 	.word	0x00030248

000d5380 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <os_timer_destroy+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030248 	.word	0x00030248

000d5390 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <os_timer_get_id+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030248 	.word	0x00030248

000d53a0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <os_timer_change+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030248 	.word	0x00030248

000d53b0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <os_mutex_create+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030248 	.word	0x00030248

000d53c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <os_mutex_recursive_create+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030248 	.word	0x00030248

000d53d0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <os_thread_exit+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030248 	.word	0x00030248

000d53e0 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <os_timer_set_id+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030248 	.word	0x00030248

000d53f0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <HAL_Core_System_Reset_Ex+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030234 	.word	0x00030234

000d5400 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <HAL_RNG_GetRandomNumber+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	685b      	ldr	r3, [r3, #4]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030218 	.word	0x00030218

000d5410 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <HAL_Delay_Milliseconds+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	689b      	ldr	r3, [r3, #8]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030218 	.word	0x00030218

000d5420 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	695b      	ldr	r3, [r3, #20]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030218 	.word	0x00030218

000d5430 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <HAL_EEPROM_Init+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030218 	.word	0x00030218

000d5440 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <HAL_EEPROM_Get+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030218 	.word	0x00030218

000d5450 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <HAL_EEPROM_Put+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030218 	.word	0x00030218

000d5460 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <hal_timer_millis+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030218 	.word	0x00030218

000d5470 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <HAL_Pin_Map+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	681b      	ldr	r3, [r3, #0]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	0003022c 	.word	0x0003022c

000d5480 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <HAL_Pin_Mode+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	689b      	ldr	r3, [r3, #8]
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	0003022c 	.word	0x0003022c

000d5490 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <HAL_Get_Pin_Mode+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	68db      	ldr	r3, [r3, #12]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	0003022c 	.word	0x0003022c

000d54a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <HAL_GPIO_Write+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	691b      	ldr	r3, [r3, #16]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	0003022c 	.word	0x0003022c

000d54b0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <HAL_Interrupts_Attach+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	699b      	ldr	r3, [r3, #24]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	0003022c 	.word	0x0003022c

000d54c0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <HAL_Interrupts_Detach+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	69db      	ldr	r3, [r3, #28]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	0003022c 	.word	0x0003022c

000d54d0 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <HAL_I2C_Set_Speed+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	681b      	ldr	r3, [r3, #0]
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030228 	.word	0x00030228

000d54e0 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <HAL_I2C_Begin+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	68db      	ldr	r3, [r3, #12]
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030228 	.word	0x00030228

000d54f0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <HAL_I2C_Request_Data+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	695b      	ldr	r3, [r3, #20]
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030228 	.word	0x00030228

000d5500 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <HAL_I2C_Begin_Transmission+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	699b      	ldr	r3, [r3, #24]
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	00030228 	.word	0x00030228

000d5510 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <HAL_I2C_End_Transmission+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	69db      	ldr	r3, [r3, #28]
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	00030228 	.word	0x00030228

000d5520 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <HAL_I2C_Write_Data+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	6a1b      	ldr	r3, [r3, #32]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	00030228 	.word	0x00030228

000d5530 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <HAL_I2C_Available_Data+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	00030228 	.word	0x00030228

000d5540 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <HAL_I2C_Read_Data+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	00030228 	.word	0x00030228

000d5550 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <HAL_I2C_Peek_Data+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	00030228 	.word	0x00030228

000d5560 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <HAL_I2C_Flush_Data+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	00030228 	.word	0x00030228

000d5570 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <HAL_I2C_Is_Enabled+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030228 	.word	0x00030228

000d5580 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <HAL_I2C_Init+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030228 	.word	0x00030228

000d5590 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <inet_inet_ntop+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	695b      	ldr	r3, [r3, #20]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030264 	.word	0x00030264

000d55a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <netdb_freeaddrinfo+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	689b      	ldr	r3, [r3, #8]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	00030268 	.word	0x00030268

000d55b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <netdb_getaddrinfo+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	68db      	ldr	r3, [r3, #12]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	00030268 	.word	0x00030268

000d55c0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <HAL_SPI_Init+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	69db      	ldr	r3, [r3, #28]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030230 	.word	0x00030230

000d55d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <HAL_SPI_Is_Enabled+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	6a1b      	ldr	r3, [r3, #32]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030230 	.word	0x00030230

000d55e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <HAL_USART_Init+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	681b      	ldr	r3, [r3, #0]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	0003023c 	.word	0x0003023c

000d55f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <HAL_USART_Write_Data+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	68db      	ldr	r3, [r3, #12]
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	0003023c 	.word	0x0003023c

000d5600 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <HAL_USART_Available_Data+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	691b      	ldr	r3, [r3, #16]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	0003023c 	.word	0x0003023c

000d5610 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <HAL_USART_Read_Data+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	695b      	ldr	r3, [r3, #20]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	0003023c 	.word	0x0003023c

000d5620 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <HAL_USART_Peek_Data+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	699b      	ldr	r3, [r3, #24]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	0003023c 	.word	0x0003023c

000d5630 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <HAL_USART_Flush_Data+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	69db      	ldr	r3, [r3, #28]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	0003023c 	.word	0x0003023c

000d5640 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <HAL_USART_Is_Enabled+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	6a1b      	ldr	r3, [r3, #32]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	0003023c 	.word	0x0003023c

000d5650 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <HAL_USART_Available_Data_For_Write+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	0003023c 	.word	0x0003023c

000d5660 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <HAL_USART_BeginConfig+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	0003023c 	.word	0x0003023c

000d5670 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <HAL_USB_USART_Init+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	681b      	ldr	r3, [r3, #0]
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	0003024c 	.word	0x0003024c

000d5680 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <HAL_USB_USART_Begin+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	685b      	ldr	r3, [r3, #4]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	0003024c 	.word	0x0003024c

000d5690 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <HAL_USB_USART_Available_Data+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	691b      	ldr	r3, [r3, #16]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	0003024c 	.word	0x0003024c

000d56a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	695b      	ldr	r3, [r3, #20]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	0003024c 	.word	0x0003024c

000d56b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <HAL_USB_USART_Receive_Data+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	699b      	ldr	r3, [r3, #24]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003024c 	.word	0x0003024c

000d56c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <HAL_USB_USART_Send_Data+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	69db      	ldr	r3, [r3, #28]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003024c 	.word	0x0003024c

000d56d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <HAL_USB_USART_Flush_Data+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6a1b      	ldr	r3, [r3, #32]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003024c 	.word	0x0003024c

000d56e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <set_system_mode+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	685b      	ldr	r3, [r3, #4]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030220 	.word	0x00030220

000d56f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <system_delay_ms+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	695b      	ldr	r3, [r3, #20]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030220 	.word	0x00030220

000d5700 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <application_thread_current+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030220 	.word	0x00030220

000d5710 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <application_thread_invoke+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030220 	.word	0x00030220

000d5720 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b03      	ldr	r3, [pc, #12]	; (d5730 <system_ctrl_set_app_request_handler+0x10>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d572a:	9301      	str	r3, [sp, #4]
   d572c:	bd08      	pop	{r3, pc}
   d572e:	0000      	.short	0x0000
   d5730:	00030220 	.word	0x00030220

000d5734 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b03      	ldr	r3, [pc, #12]	; (d5744 <system_ctrl_set_result+0x10>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d573e:	9301      	str	r3, [sp, #4]
   d5740:	bd08      	pop	{r3, pc}
   d5742:	0000      	.short	0x0000
   d5744:	00030220 	.word	0x00030220

000d5748 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <spark_function+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	685b      	ldr	r3, [r3, #4]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030244 	.word	0x00030244

000d5758 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <spark_process+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	689b      	ldr	r3, [r3, #8]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030244 	.word	0x00030244

000d5768 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <spark_cloud_flag_connect+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	68db      	ldr	r3, [r3, #12]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030244 	.word	0x00030244

000d5778 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <spark_cloud_flag_connected+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	695b      	ldr	r3, [r3, #20]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030244 	.word	0x00030244

000d5788 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <spark_send_event+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6a1b      	ldr	r3, [r3, #32]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030244 	.word	0x00030244

000d5798 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <spark_set_connection_property+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030244 	.word	0x00030244

000d57a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030244 	.word	0x00030244

000d57b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <network_connect+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	685b      	ldr	r3, [r3, #4]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030240 	.word	0x00030240

000d57c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <network_connecting+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	689b      	ldr	r3, [r3, #8]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030240 	.word	0x00030240

000d57d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <network_disconnect+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	68db      	ldr	r3, [r3, #12]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030240 	.word	0x00030240

000d57e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <network_ready+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	691b      	ldr	r3, [r3, #16]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030240 	.word	0x00030240

000d57f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <network_on+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	695b      	ldr	r3, [r3, #20]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030240 	.word	0x00030240

000d5808 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <network_off+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	699b      	ldr	r3, [r3, #24]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030240 	.word	0x00030240

000d5818 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <network_listen+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	69db      	ldr	r3, [r3, #28]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030240 	.word	0x00030240

000d5828 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <network_listening+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6a1b      	ldr	r3, [r3, #32]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030240 	.word	0x00030240

000d5838 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <network_set_listen_timeout+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030240 	.word	0x00030240

000d5848 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <network_get_listen_timeout+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030240 	.word	0x00030240

000d5858 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <malloc+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	681b      	ldr	r3, [r3, #0]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003021c 	.word	0x0003021c

000d5868 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <free+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	685b      	ldr	r3, [r3, #4]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003021c 	.word	0x0003021c

000d5878 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <realloc+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	689b      	ldr	r3, [r3, #8]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003021c 	.word	0x0003021c

000d5888 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <vsnprintf+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003021c 	.word	0x0003021c

000d5898 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <abort+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003021c 	.word	0x0003021c

000d58a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <_malloc_r+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003021c 	.word	0x0003021c

000d58b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d58b8:	2100      	movs	r1, #0
   d58ba:	f7ff bf19 	b.w	d56f0 <system_delay_ms>

000d58be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d58be:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d58c0:	6883      	ldr	r3, [r0, #8]
   d58c2:	4604      	mov	r4, r0
   d58c4:	b90b      	cbnz	r3, d58ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d58c6:	f001 fa58 	bl	d6d7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58ca:	68c3      	ldr	r3, [r0, #12]
   d58cc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58ce:	68a3      	ldr	r3, [r4, #8]
   d58d0:	b11b      	cbz	r3, d58da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58d2:	2203      	movs	r2, #3
   d58d4:	4621      	mov	r1, r4
   d58d6:	4620      	mov	r0, r4
   d58d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58da:	4620      	mov	r0, r4
   d58dc:	2110      	movs	r1, #16
}
   d58de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58e2:	f001 ba30 	b.w	d6d46 <_ZdlPvj>

000d58e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d58e6:	4770      	bx	lr

000d58e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d58e8:	2000      	movs	r0, #0
   d58ea:	4770      	bx	lr

000d58ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d58ec:	b510      	push	{r4, lr}
   d58ee:	2110      	movs	r1, #16
   d58f0:	4604      	mov	r4, r0
   d58f2:	f001 fa28 	bl	d6d46 <_ZdlPvj>
   d58f6:	4620      	mov	r0, r4
   d58f8:	bd10      	pop	{r4, pc}

000d58fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d58fa:	b508      	push	{r3, lr}
      { delete this; }
   d58fc:	b108      	cbz	r0, d5902 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d58fe:	f7ff fff5 	bl	d58ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5902:	bd08      	pop	{r3, pc}

000d5904 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5904:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5906:	68c4      	ldr	r4, [r0, #12]
   d5908:	b1ec      	cbz	r4, d5946 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d590a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d590c:	2b02      	cmp	r3, #2
   d590e:	d102      	bne.n	d5916 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5910:	68e0      	ldr	r0, [r4, #12]
   d5912:	f7ff ffa9 	bl	d5868 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5916:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5918:	b135      	cbz	r5, d5928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d591a:	4628      	mov	r0, r5
   d591c:	f7fe ff7c 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d5920:	2110      	movs	r1, #16
   d5922:	4628      	mov	r0, r5
   d5924:	f001 fa0f 	bl	d6d46 <_ZdlPvj>
   d5928:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d592a:	b135      	cbz	r5, d593a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d592c:	4628      	mov	r0, r5
   d592e:	f7fe ff73 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d5932:	2110      	movs	r1, #16
   d5934:	4628      	mov	r0, r5
   d5936:	f001 fa06 	bl	d6d46 <_ZdlPvj>
   d593a:	4620      	mov	r0, r4
   d593c:	2114      	movs	r1, #20
   d593e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5942:	f001 ba00 	b.w	d6d46 <_ZdlPvj>
   d5946:	bd38      	pop	{r3, r4, r5, pc}

000d5948 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5948:	b510      	push	{r4, lr}
   d594a:	b088      	sub	sp, #32
   d594c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d594e:	4668      	mov	r0, sp
   d5950:	f000 fe80 	bl	d6654 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5954:	4669      	mov	r1, sp
   d5956:	a804      	add	r0, sp, #16
   d5958:	f000 febb 	bl	d66d2 <_ZN6StringC1ERKS_>
   d595c:	a804      	add	r0, sp, #16
   d595e:	47a0      	blx	r4
   d5960:	4604      	mov	r4, r0
   d5962:	a804      	add	r0, sp, #16
   d5964:	f000 fe2f 	bl	d65c6 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5968:	4668      	mov	r0, sp
   d596a:	f000 fe2c 	bl	d65c6 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d596e:	4620      	mov	r0, r4
   d5970:	b008      	add	sp, #32
   d5972:	bd10      	pop	{r4, pc}

000d5974 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5974:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5976:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5978:	b085      	sub	sp, #20
   d597a:	4607      	mov	r7, r0
   d597c:	460e      	mov	r6, r1
   d597e:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5980:	2100      	movs	r1, #0
   d5982:	4622      	mov	r2, r4
   d5984:	4668      	mov	r0, sp
   d5986:	f002 f906 	bl	d7b96 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d598a:	2200      	movs	r2, #0
   d598c:	4669      	mov	r1, sp
   d598e:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5990:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5994:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5996:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5998:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d599a:	f7ff fed5 	bl	d5748 <spark_function>
}
   d599e:	b005      	add	sp, #20
   d59a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d59a2:	b513      	push	{r0, r1, r4, lr}
   d59a4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d59a6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d59aa:	2300      	movs	r3, #0
   d59ac:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d59ae:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d59b0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d59b2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59b4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d59b6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d59b8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59ba:	f7ff f8c1 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59be:	4620      	mov	r0, r4
   d59c0:	b002      	add	sp, #8
   d59c2:	bd10      	pop	{r4, pc}

000d59c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d59c4:	680b      	ldr	r3, [r1, #0]
   d59c6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d59c8:	b113      	cbz	r3, d59d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d59ca:	685a      	ldr	r2, [r3, #4]
   d59cc:	3201      	adds	r2, #1
   d59ce:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d59d0:	4770      	bx	lr

000d59d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d59d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59d4:	460c      	mov	r4, r1
   d59d6:	ad02      	add	r5, sp, #8
   d59d8:	f854 3b04 	ldr.w	r3, [r4], #4
   d59dc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d59e0:	4606      	mov	r6, r0
   d59e2:	460f      	mov	r7, r1
   d59e4:	a801      	add	r0, sp, #4
   d59e6:	4621      	mov	r1, r4
   d59e8:	f7ff ffec 	bl	d59c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d59ec:	4629      	mov	r1, r5
   d59ee:	4630      	mov	r0, r6
   d59f0:	f7ff ffd7 	bl	d59a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59f4:	a801      	add	r0, sp, #4
   d59f6:	f7ff f8a3 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7ff f8a0 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5a00:	4638      	mov	r0, r7
   d5a02:	2108      	movs	r1, #8
   d5a04:	f001 f99f 	bl	d6d46 <_ZdlPvj>
        return p;
    }
   d5a08:	4630      	mov	r0, r6
   d5a0a:	b003      	add	sp, #12
   d5a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a0e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5a0e:	b513      	push	{r0, r1, r4, lr}
   d5a10:	460b      	mov	r3, r1
   d5a12:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a14:	c803      	ldmia	r0, {r0, r1}
   d5a16:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5a1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5a1e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5a22:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5a26:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5a2a:	b002      	add	sp, #8
   d5a2c:	bd10      	pop	{r4, pc}

000d5a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a2e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5a30:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a32:	b90a      	cbnz	r2, d5a38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5a34:	f001 f9a1 	bl	d6d7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a38:	68c3      	ldr	r3, [r0, #12]
    }
   d5a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a3e:	4718      	bx	r3

000d5a40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5a40:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5a42:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5a44:	f100 0110 	add.w	r1, r0, #16
   d5a48:	f7ff fff1 	bl	d5a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5a4c:	bd08      	pop	{r3, pc}

000d5a4e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a4e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5a50:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a52:	b90a      	cbnz	r2, d5a58 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5a54:	f001 f991 	bl	d6d7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a58:	68c3      	ldr	r3, [r0, #12]
    }
   d5a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a5e:	4718      	bx	r3

000d5a60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5a60:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5a62:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5a64:	f100 0110 	add.w	r1, r0, #16
   d5a68:	f7ff fff1 	bl	d5a4e <_ZNKSt8functionIFvRKbEEclES1_>
   d5a6c:	bd08      	pop	{r3, pc}

000d5a6e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a6e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a70:	2300      	movs	r3, #0
   d5a72:	6083      	str	r3, [r0, #8]
   d5a74:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a76:	4604      	mov	r4, r0
   d5a78:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5a7a:	b12b      	cbz	r3, d5a88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5a7c:	2202      	movs	r2, #2
   d5a7e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5a80:	68eb      	ldr	r3, [r5, #12]
   d5a82:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5a84:	68ab      	ldr	r3, [r5, #8]
   d5a86:	60a3      	str	r3, [r4, #8]
	}
    }
   d5a88:	4620      	mov	r0, r4
   d5a8a:	bd38      	pop	{r3, r4, r5, pc}

000d5a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5a90:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5a94:	b086      	sub	sp, #24
   d5a96:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a98:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a9c:	808b      	strh	r3, [r1, #4]
   d5a9e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5aa0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5aa2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5aa6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5aa8:	f04f 0002 	mov.w	r0, #2
   d5aac:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5ab0:	4299      	cmp	r1, r3
   d5ab2:	d103      	bne.n	d5abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5ab4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5ab8:	2d00      	cmp	r5, #0
   d5aba:	d1f7      	bne.n	d5aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5abc:	d002      	beq.n	d5ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5abe:	f88d 1000 	strb.w	r1, [sp]
   d5ac2:	e06b      	b.n	d5b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5ac4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ac8:	bf1e      	ittt	ne
   d5aca:	60e7      	strne	r7, [r4, #12]
   d5acc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ace:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ad0:	2301      	movs	r3, #1
   d5ad2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ad6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ad8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ada:	f104 0308 	add.w	r3, r4, #8
   d5ade:	f3bf 8f5f 	dmb	sy
   d5ae2:	e853 6f00 	ldrex	r6, [r3]
   d5ae6:	e843 0200 	strex	r2, r0, [r3]
   d5aea:	2a00      	cmp	r2, #0
   d5aec:	d1f9      	bne.n	d5ae2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5aee:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5af2:	2e00      	cmp	r6, #0
   d5af4:	d052      	beq.n	d5b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5af6:	f7ff fe03 	bl	d5700 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5afa:	b120      	cbz	r0, d5b06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5afc:	4629      	mov	r1, r5
   d5afe:	4630      	mov	r0, r6
   d5b00:	f7ff ff95 	bl	d5a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5b04:	e043      	b.n	d5b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5b06:	4631      	mov	r1, r6
   d5b08:	4668      	mov	r0, sp
   d5b0a:	f7ff ffb0 	bl	d5a6e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5b0e:	68e0      	ldr	r0, [r4, #12]
   d5b10:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5b14:	b108      	cbz	r0, d5b1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5b16:	f002 f877 	bl	d7c08 <strdup>
   d5b1a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5b1c:	2010      	movs	r0, #16
   d5b1e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5b22:	f7fe fab8 	bl	d4096 <_Znwj>
   d5b26:	4605      	mov	r5, r0
   d5b28:	b330      	cbz	r0, d5b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5b2a:	f04f 0800 	mov.w	r8, #0
   d5b2e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5b32:	2018      	movs	r0, #24
   d5b34:	f7fe faaf 	bl	d4096 <_Znwj>
   d5b38:	4604      	mov	r4, r0
   d5b3a:	b1c0      	cbz	r0, d5b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5b3c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5b40:	4601      	mov	r1, r0
   d5b42:	4668      	mov	r0, sp
   d5b44:	f7ff ff63 	bl	d5a0e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b48:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5b4a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b4c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b4e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5b50:	9202      	str	r2, [sp, #8]
   d5b52:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b54:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5b5a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5b60:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b64:	9b04      	ldr	r3, [sp, #16]
   d5b66:	9203      	str	r2, [sp, #12]
   d5b68:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b6a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5b6e:	4b0e      	ldr	r3, [pc, #56]	; (d5ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5b70:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5b72:	4b0e      	ldr	r3, [pc, #56]	; (d5bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5b74:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5b76:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5b78:	9804      	ldr	r0, [sp, #16]
   d5b7a:	f7ff fe75 	bl	d5868 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b7e:	4668      	mov	r0, sp
   d5b80:	f7fe fe4a 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5b84:	2200      	movs	r2, #0
   d5b86:	4629      	mov	r1, r5
   d5b88:	4809      	ldr	r0, [pc, #36]	; (d5bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5b8a:	f7ff fdc1 	bl	d5710 <application_thread_invoke>
   d5b8e:	4630      	mov	r0, r6
   d5b90:	f7fe fe42 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5b94:	2110      	movs	r1, #16
   d5b96:	4630      	mov	r0, r6
   d5b98:	f001 f8d5 	bl	d6d46 <_ZdlPvj>
   d5b9c:	4638      	mov	r0, r7
   d5b9e:	f7ff fe63 	bl	d5868 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5ba2:	b006      	add	sp, #24
   d5ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ba8:	000d5a41 	.word	0x000d5a41
   d5bac:	000d5c9d 	.word	0x000d5c9d
   d5bb0:	000d58bf 	.word	0x000d58bf

000d5bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bb8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5bba:	ad07      	add	r5, sp, #28
   d5bbc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5bc0:	4606      	mov	r6, r0
   d5bc2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5bc4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5bc6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5bc8:	460f      	mov	r7, r1
   d5bca:	4690      	mov	r8, r2
   d5bcc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5bd0:	f8c5 b004 	str.w	fp, [r5, #4]
   d5bd4:	f8c5 b008 	str.w	fp, [r5, #8]
   d5bd8:	9307      	str	r3, [sp, #28]
   d5bda:	f7fe fa5c 	bl	d4096 <_Znwj>
   d5bde:	4604      	mov	r4, r0
   d5be0:	b138      	cbz	r0, d5bf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5be2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5be6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5bea:	f8c0 b004 	str.w	fp, [r0, #4]
   d5bee:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5bf2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5bf4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5bf6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5bf8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5bfa:	f7fe fa4c 	bl	d4096 <_Znwj>
   d5bfe:	b128      	cbz	r0, d5c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5c00:	2301      	movs	r3, #1
   d5c02:	6043      	str	r3, [r0, #4]
   d5c04:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5c06:	4b23      	ldr	r3, [pc, #140]	; (d5c94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5c08:	6003      	str	r3, [r0, #0]
   d5c0a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5c0c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5c0e:	4b22      	ldr	r3, [pc, #136]	; (d5c98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5c10:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5c12:	2008      	movs	r0, #8
   d5c14:	f7fe fa3f 	bl	d4096 <_Znwj>
   d5c18:	4604      	mov	r4, r0
   d5c1a:	b128      	cbz	r0, d5c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c1c:	9b03      	ldr	r3, [sp, #12]
   d5c1e:	f840 3b04 	str.w	r3, [r0], #4
   d5c22:	a904      	add	r1, sp, #16
   d5c24:	f7ff fece 	bl	d59c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5c28:	9500      	str	r5, [sp, #0]
   d5c2a:	fa5f f38a 	uxtb.w	r3, sl
   d5c2e:	464a      	mov	r2, r9
   d5c30:	4641      	mov	r1, r8
   d5c32:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5c34:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5c36:	f7ff fda7 	bl	d5788 <spark_send_event>
   d5c3a:	b9b8      	cbnz	r0, d5c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5c3c:	9b03      	ldr	r3, [sp, #12]
   d5c3e:	785b      	ldrb	r3, [r3, #1]
   d5c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5c44:	b993      	cbnz	r3, d5c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5c46:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5c4a:	a905      	add	r1, sp, #20
   d5c4c:	a803      	add	r0, sp, #12
   d5c4e:	9205      	str	r2, [sp, #20]
   d5c50:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5c54:	f7ff ff1a 	bl	d5a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5c58:	9805      	ldr	r0, [sp, #20]
   d5c5a:	f7ff fe05 	bl	d5868 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5c5e:	a805      	add	r0, sp, #20
   d5c60:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5c62:	f7ff feb6 	bl	d59d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c66:	a806      	add	r0, sp, #24
   d5c68:	f7fe ff6a 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c6c:	9b03      	ldr	r3, [sp, #12]
   d5c6e:	9305      	str	r3, [sp, #20]
   d5c70:	a904      	add	r1, sp, #16
   d5c72:	a806      	add	r0, sp, #24
   d5c74:	f7ff fea6 	bl	d59c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5c78:	a905      	add	r1, sp, #20
   d5c7a:	4630      	mov	r0, r6
   d5c7c:	f7ff fe91 	bl	d59a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c80:	a806      	add	r0, sp, #24
   d5c82:	f7fe ff5d 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c86:	a804      	add	r0, sp, #16
   d5c88:	f7fe ff5a 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5c8c:	4630      	mov	r0, r6
   d5c8e:	b00b      	add	sp, #44	; 0x2c
   d5c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c94:	000d7f74 	.word	0x000d7f74
   d5c98:	000d5e09 	.word	0x000d5e09

000d5c9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c9c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ca0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5ca2:	d006      	beq.n	d5cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5ca4:	2a03      	cmp	r2, #3
   d5ca6:	d017      	beq.n	d5cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5ca8:	2a01      	cmp	r2, #1
   d5caa:	d121      	bne.n	d5cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5cac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5cae:	6003      	str	r3, [r0, #0]
	      break;
   d5cb0:	e01e      	b.n	d5cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5cb2:	2018      	movs	r0, #24
   d5cb4:	680e      	ldr	r6, [r1, #0]
   d5cb6:	f7fe f9ee 	bl	d4096 <_Znwj>
   d5cba:	4605      	mov	r5, r0
   d5cbc:	b150      	cbz	r0, d5cd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5cbe:	4631      	mov	r1, r6
   d5cc0:	f7ff fed5 	bl	d5a6e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5cc4:	6930      	ldr	r0, [r6, #16]
   d5cc6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5cca:	b108      	cbz	r0, d5cd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5ccc:	f001 ff9c 	bl	d7c08 <strdup>
   d5cd0:	6128      	str	r0, [r5, #16]
   d5cd2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5cd4:	6025      	str	r5, [r4, #0]
   d5cd6:	e00b      	b.n	d5cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5cd8:	6804      	ldr	r4, [r0, #0]
   d5cda:	b14c      	cbz	r4, d5cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5cdc:	6920      	ldr	r0, [r4, #16]
   d5cde:	f7ff fdc3 	bl	d5868 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	f7fe fd98 	bl	d4818 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5ce8:	2118      	movs	r1, #24
   d5cea:	4620      	mov	r0, r4
   d5cec:	f001 f82b 	bl	d6d46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5cf0:	2000      	movs	r0, #0
   d5cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5cf4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	6083      	str	r3, [r0, #8]
   d5cfa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5cfc:	4604      	mov	r4, r0
   d5cfe:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5d00:	b12b      	cbz	r3, d5d0e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5d02:	2202      	movs	r2, #2
   d5d04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5d06:	68eb      	ldr	r3, [r5, #12]
   d5d08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5d0a:	68ab      	ldr	r3, [r5, #8]
   d5d0c:	60a3      	str	r3, [r4, #8]
	}
    }
   d5d0e:	4620      	mov	r0, r4
   d5d10:	bd38      	pop	{r3, r4, r5, pc}

000d5d12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5d12:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5d14:	b570      	push	{r4, r5, r6, lr}
   d5d16:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5d18:	d006      	beq.n	d5d28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5d1a:	2a03      	cmp	r2, #3
   d5d1c:	d011      	beq.n	d5d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5d1e:	2a01      	cmp	r2, #1
   d5d20:	d118      	bne.n	d5d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5d22:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5d24:	6003      	str	r3, [r0, #0]
	      break;
   d5d26:	e015      	b.n	d5d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5d28:	2014      	movs	r0, #20
   d5d2a:	680e      	ldr	r6, [r1, #0]
   d5d2c:	f7fe f9b3 	bl	d4096 <_Znwj>
   d5d30:	4605      	mov	r5, r0
   d5d32:	b120      	cbz	r0, d5d3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5d34:	4631      	mov	r1, r6
   d5d36:	f7ff ffdd 	bl	d5cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5d3a:	7c33      	ldrb	r3, [r6, #16]
   d5d3c:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5d3e:	6025      	str	r5, [r4, #0]
   d5d40:	e008      	b.n	d5d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5d42:	6804      	ldr	r4, [r0, #0]
   d5d44:	b134      	cbz	r4, d5d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d46:	4620      	mov	r0, r4
   d5d48:	f7fe fd66 	bl	d4818 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5d4c:	2114      	movs	r1, #20
   d5d4e:	4620      	mov	r0, r4
   d5d50:	f000 fff9 	bl	d6d46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5d54:	2000      	movs	r0, #0
   d5d56:	bd70      	pop	{r4, r5, r6, pc}

000d5d58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5d58:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5d5a:	2300      	movs	r3, #0
   d5d5c:	b087      	sub	sp, #28
   d5d5e:	460c      	mov	r4, r1
   d5d60:	f3bf 8f5f 	dmb	sy
   d5d64:	e850 6f00 	ldrex	r6, [r0]
   d5d68:	e840 3200 	strex	r2, r3, [r0]
   d5d6c:	2a00      	cmp	r2, #0
   d5d6e:	d1f9      	bne.n	d5d64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5d70:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5d74:	2e00      	cmp	r6, #0
   d5d76:	d03f      	beq.n	d5df8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5d78:	4618      	mov	r0, r3
   d5d7a:	f7ff fcc1 	bl	d5700 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5d7e:	4607      	mov	r7, r0
   d5d80:	b120      	cbz	r0, d5d8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5d82:	4621      	mov	r1, r4
   d5d84:	4630      	mov	r0, r6
   d5d86:	f7ff fe62 	bl	d5a4e <_ZNKSt8functionIFvRKbEEclES1_>
   d5d8a:	e02e      	b.n	d5dea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5d8c:	4631      	mov	r1, r6
   d5d8e:	a801      	add	r0, sp, #4
   d5d90:	f7ff ffb0 	bl	d5cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5d94:	7823      	ldrb	r3, [r4, #0]
   d5d96:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5d9a:	2010      	movs	r0, #16
   d5d9c:	f7fe f97b 	bl	d4096 <_Znwj>
   d5da0:	4605      	mov	r5, r0
   d5da2:	b1d0      	cbz	r0, d5dda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5da4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5da6:	2014      	movs	r0, #20
   d5da8:	f7fe f975 	bl	d4096 <_Znwj>
   d5dac:	4604      	mov	r4, r0
   d5dae:	b178      	cbz	r0, d5dd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5db0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5db2:	4601      	mov	r1, r0
   d5db4:	a801      	add	r0, sp, #4
   d5db6:	f7ff fe2a 	bl	d5a0e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5dbc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dbe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dc0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5dc2:	9203      	str	r2, [sp, #12]
   d5dc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dc6:	60e3      	str	r3, [r4, #12]
   d5dc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5dcc:	9204      	str	r2, [sp, #16]
   d5dce:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5dd0:	4b0a      	ldr	r3, [pc, #40]	; (d5dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5dd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5dd4:	4b0a      	ldr	r3, [pc, #40]	; (d5e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5dd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5dd8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5dda:	a801      	add	r0, sp, #4
   d5ddc:	f7fe fd1c 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5de0:	2200      	movs	r2, #0
   d5de2:	4629      	mov	r1, r5
   d5de4:	4807      	ldr	r0, [pc, #28]	; (d5e04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5de6:	f7ff fc93 	bl	d5710 <application_thread_invoke>
   d5dea:	4630      	mov	r0, r6
   d5dec:	f7fe fd14 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5df0:	2110      	movs	r1, #16
   d5df2:	4630      	mov	r0, r6
   d5df4:	f000 ffa7 	bl	d6d46 <_ZdlPvj>
        }
    }
   d5df8:	b007      	add	sp, #28
   d5dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5dfc:	000d5a61 	.word	0x000d5a61
   d5e00:	000d5d13 	.word	0x000d5d13
   d5e04:	000d58bf 	.word	0x000d58bf

000d5e08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5e08:	b530      	push	{r4, r5, lr}
   d5e0a:	b085      	sub	sp, #20
   d5e0c:	4604      	mov	r4, r0
   d5e0e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5e10:	4668      	mov	r0, sp
   d5e12:	4611      	mov	r1, r2
   d5e14:	f7ff fddd 	bl	d59d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5e18:	b17c      	cbz	r4, d5e3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5e1a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e1c:	4628      	mov	r0, r5
   d5e1e:	b10d      	cbz	r5, d5e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5e20:	f001 fef2 	bl	d7c08 <strdup>
   d5e24:	9002      	str	r0, [sp, #8]
   d5e26:	a902      	add	r1, sp, #8
   d5e28:	4668      	mov	r0, sp
   d5e2a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5e2e:	f7ff fe2d 	bl	d5a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5e32:	9802      	ldr	r0, [sp, #8]
   d5e34:	f7ff fd18 	bl	d5868 <free>
   d5e38:	e01d      	b.n	d5e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5e3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5e3c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5e40:	f04f 0201 	mov.w	r2, #1
   d5e44:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5e48:	42a3      	cmp	r3, r4
   d5e4a:	d103      	bne.n	d5e54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5e4c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5e50:	2900      	cmp	r1, #0
   d5e52:	d1f7      	bne.n	d5e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5e54:	d002      	beq.n	d5e5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5e56:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e5a:	e00c      	b.n	d5e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5e5c:	f110 010c 	adds.w	r1, r0, #12
   d5e60:	f04f 0301 	mov.w	r3, #1
   d5e64:	bf18      	it	ne
   d5e66:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5e68:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5e6c:	3004      	adds	r0, #4
   d5e6e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5e72:	f7ff ff71 	bl	d5d58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5e76:	a801      	add	r0, sp, #4
   d5e78:	f7fe fe62 	bl	d4b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5e7c:	b005      	add	sp, #20
   d5e7e:	bd30      	pop	{r4, r5, pc}

000d5e80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e80:	2200      	movs	r2, #0
   d5e82:	4611      	mov	r1, r2
   d5e84:	6840      	ldr	r0, [r0, #4]
   d5e86:	f7ff bccf 	b.w	d5828 <network_listening>

000d5e8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e8a:	2200      	movs	r2, #0
   d5e8c:	4611      	mov	r1, r2
   d5e8e:	6840      	ldr	r0, [r0, #4]
   d5e90:	f7ff bcda 	b.w	d5848 <network_get_listen_timeout>

000d5e94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e94:	2200      	movs	r2, #0
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	f7ff bcce 	b.w	d5838 <network_set_listen_timeout>

000d5e9c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e9c:	2200      	movs	r2, #0
   d5e9e:	f081 0101 	eor.w	r1, r1, #1
   d5ea2:	6840      	ldr	r0, [r0, #4]
   d5ea4:	f7ff bcb8 	b.w	d5818 <network_listen>

000d5ea8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ea8:	2300      	movs	r3, #0
   d5eaa:	461a      	mov	r2, r3
   d5eac:	4619      	mov	r1, r3
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	f7ff bcaa 	b.w	d5808 <network_off>

000d5eb4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5eb4:	2300      	movs	r3, #0
   d5eb6:	461a      	mov	r2, r3
   d5eb8:	4619      	mov	r1, r3
   d5eba:	6840      	ldr	r0, [r0, #4]
   d5ebc:	f7ff bc9c 	b.w	d57f8 <network_on>

000d5ec0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ec0:	2200      	movs	r2, #0
   d5ec2:	4611      	mov	r1, r2
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	f7ff bc8f 	b.w	d57e8 <network_ready>

000d5eca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eca:	2200      	movs	r2, #0
   d5ecc:	4611      	mov	r1, r2
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	f7ff bc7a 	b.w	d57c8 <network_connecting>

000d5ed4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	2102      	movs	r1, #2
   d5ed8:	6840      	ldr	r0, [r0, #4]
   d5eda:	f7ff bc7d 	b.w	d57d8 <network_disconnect>

000d5ede <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ede:	2300      	movs	r3, #0
   d5ee0:	461a      	mov	r2, r3
   d5ee2:	6840      	ldr	r0, [r0, #4]
   d5ee4:	f7ff bc68 	b.w	d57b8 <network_connect>

000d5ee8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ee8:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5eea:	2203      	movs	r2, #3
   d5eec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5eee:	4a02      	ldr	r2, [pc, #8]	; (d5ef8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ef0:	601a      	str	r2, [r3, #0]
   d5ef2:	4770      	bx	lr
   d5ef4:	2003e3c4 	.word	0x2003e3c4
   d5ef8:	000d7f90 	.word	0x000d7f90

000d5efc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5efc:	4770      	bx	lr

000d5efe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f00:	4606      	mov	r6, r0
   d5f02:	4615      	mov	r5, r2
   d5f04:	460c      	mov	r4, r1
   d5f06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f08:	42bc      	cmp	r4, r7
   d5f0a:	d006      	beq.n	d5f1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5f0c:	6833      	ldr	r3, [r6, #0]
   d5f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f12:	689b      	ldr	r3, [r3, #8]
   d5f14:	4630      	mov	r0, r6
   d5f16:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f18:	e7f6      	b.n	d5f08 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5f1a:	4628      	mov	r0, r5
   d5f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f1e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5f1e:	2200      	movs	r2, #0
   d5f20:	7c00      	ldrb	r0, [r0, #16]
   d5f22:	f7ff bafd 	b.w	d5520 <HAL_I2C_Write_Data>

000d5f26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5f26:	2100      	movs	r1, #0
   d5f28:	7c00      	ldrb	r0, [r0, #16]
   d5f2a:	f7ff bb01 	b.w	d5530 <HAL_I2C_Available_Data>

000d5f2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5f2e:	2100      	movs	r1, #0
   d5f30:	7c00      	ldrb	r0, [r0, #16]
   d5f32:	f7ff bb05 	b.w	d5540 <HAL_I2C_Read_Data>

000d5f36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5f36:	2100      	movs	r1, #0
   d5f38:	7c00      	ldrb	r0, [r0, #16]
   d5f3a:	f7ff bb09 	b.w	d5550 <HAL_I2C_Peek_Data>

000d5f3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5f3e:	2100      	movs	r1, #0
   d5f40:	7c00      	ldrb	r0, [r0, #16]
   d5f42:	f7ff bb0d 	b.w	d5560 <HAL_I2C_Flush_Data>

000d5f46 <_ZN7TwoWireD0Ev>:
   d5f46:	b510      	push	{r4, lr}
   d5f48:	2114      	movs	r1, #20
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	f000 fefb 	bl	d6d46 <_ZdlPvj>
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f54:	b510      	push	{r4, lr}
   d5f56:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f5c:	4608      	mov	r0, r1
   d5f5e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5f60:	2100      	movs	r1, #0
   d5f62:	4b04      	ldr	r3, [pc, #16]	; (d5f74 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5f64:	7420      	strb	r0, [r4, #16]
   d5f66:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f68:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5f6a:	f7ff fb09 	bl	d5580 <HAL_I2C_Init>

}
   d5f6e:	4620      	mov	r0, r4
   d5f70:	bd10      	pop	{r4, pc}
   d5f72:	bf00      	nop
   d5f74:	000d7fc4 	.word	0x000d7fc4

000d5f78 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d5f78:	2200      	movs	r2, #0
   d5f7a:	7c00      	ldrb	r0, [r0, #16]
   d5f7c:	f7ff baa8 	b.w	d54d0 <HAL_I2C_Set_Speed>

000d5f80 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5f80:	2300      	movs	r3, #0
   d5f82:	461a      	mov	r2, r3
   d5f84:	4619      	mov	r1, r3
   d5f86:	7c00      	ldrb	r0, [r0, #16]
   d5f88:	f7ff baaa 	b.w	d54e0 <HAL_I2C_Begin>

000d5f8c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5f8c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5f8e:	2400      	movs	r4, #0
   d5f90:	7c00      	ldrb	r0, [r0, #16]
   d5f92:	9400      	str	r4, [sp, #0]
   d5f94:	f7ff faac 	bl	d54f0 <HAL_I2C_Request_Data>
  return result;
}
   d5f98:	b2c0      	uxtb	r0, r0
   d5f9a:	b002      	add	sp, #8
   d5f9c:	bd10      	pop	{r4, pc}

000d5f9e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5f9e:	2301      	movs	r3, #1
   d5fa0:	f7ff bff4 	b.w	d5f8c <_ZN7TwoWire11requestFromEhhh>

000d5fa4 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5fa4:	2301      	movs	r3, #1
   d5fa6:	b2d2      	uxtb	r2, r2
   d5fa8:	b2c9      	uxtb	r1, r1
   d5faa:	f7ff bfef 	b.w	d5f8c <_ZN7TwoWire11requestFromEhhh>

000d5fae <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5fae:	2200      	movs	r2, #0
   d5fb0:	7c00      	ldrb	r0, [r0, #16]
   d5fb2:	f7ff baa5 	b.w	d5500 <HAL_I2C_Begin_Transmission>

000d5fb6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5fb6:	b2c9      	uxtb	r1, r1
   d5fb8:	f7ff bff9 	b.w	d5fae <_ZN7TwoWire17beginTransmissionEh>

000d5fbc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5fbc:	2200      	movs	r2, #0
   d5fbe:	7c00      	ldrb	r0, [r0, #16]
   d5fc0:	f7ff baa6 	b.w	d5510 <HAL_I2C_End_Transmission>

000d5fc4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5fc4:	2101      	movs	r1, #1
   d5fc6:	f7ff bff9 	b.w	d5fbc <_ZN7TwoWire15endTransmissionEh>

000d5fca <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5fca:	2100      	movs	r1, #0
   d5fcc:	7c00      	ldrb	r0, [r0, #16]
   d5fce:	f7ff bacf 	b.w	d5570 <HAL_I2C_Is_Enabled>

000d5fd2 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5fd2:	4700      	bx	r0

000d5fd4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fd6:	b085      	sub	sp, #20
   d5fd8:	461c      	mov	r4, r3
   d5fda:	4605      	mov	r5, r0
   d5fdc:	460e      	mov	r6, r1
   d5fde:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
   d5fe0:	f7ff fa6e 	bl	d54c0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d5fe4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d5fe6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5fe8:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5fec:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5fee:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d5ff2:	bfa5      	ittet	ge
   d5ff4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5ff8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d5ffc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d5ffe:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d6000:	9300      	str	r3, [sp, #0]
   d6002:	4628      	mov	r0, r5
   d6004:	463b      	mov	r3, r7
   d6006:	4632      	mov	r2, r6
   d6008:	4904      	ldr	r1, [pc, #16]	; (d601c <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d600a:	bfa8      	it	ge
   d600c:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d6010:	f7ff fa4e 	bl	d54b0 <HAL_Interrupts_Attach>
    return true;
}
   d6014:	2001      	movs	r0, #1
   d6016:	b005      	add	sp, #20
   d6018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d601a:	bf00      	nop
   d601c:	000d5fd3 	.word	0x000d5fd3

000d6020 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6020:	4770      	bx	lr

000d6022 <_ZN9IPAddressD0Ev>:
   d6022:	b510      	push	{r4, lr}
   d6024:	2118      	movs	r1, #24
   d6026:	4604      	mov	r4, r0
   d6028:	f000 fe8d 	bl	d6d46 <_ZdlPvj>
   d602c:	4620      	mov	r0, r4
   d602e:	bd10      	pop	{r4, pc}

000d6030 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6030:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6032:	7d03      	ldrb	r3, [r0, #20]
   d6034:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6036:	b08d      	sub	sp, #52	; 0x34
   d6038:	460e      	mov	r6, r1
   d603a:	f100 0704 	add.w	r7, r0, #4
   d603e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6042:	d002      	beq.n	d604a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6044:	f100 0508 	add.w	r5, r0, #8
   d6048:	e018      	b.n	d607c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d604a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d604c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d604e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6052:	232f      	movs	r3, #47	; 0x2f
   d6054:	462a      	mov	r2, r5
   d6056:	200a      	movs	r0, #10
   d6058:	f7ff fa9a 	bl	d5590 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d605c:	4628      	mov	r0, r5
   d605e:	f001 fdee 	bl	d7c3e <strlen>
   d6062:	6833      	ldr	r3, [r6, #0]
   d6064:	4602      	mov	r2, r0
   d6066:	68db      	ldr	r3, [r3, #12]
   d6068:	4629      	mov	r1, r5
   d606a:	4630      	mov	r0, r6
   d606c:	4798      	blx	r3
   d606e:	e00f      	b.n	d6090 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6070:	b124      	cbz	r4, d607c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6072:	212e      	movs	r1, #46	; 0x2e
   d6074:	4630      	mov	r0, r6
   d6076:	f000 f9c7 	bl	d6408 <_ZN5Print5printEc>
   d607a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d607c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6080:	220a      	movs	r2, #10
   d6082:	4630      	mov	r0, r6
   d6084:	f000 fa06 	bl	d6494 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6088:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d608a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d608c:	d1f0      	bne.n	d6070 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d608e:	4620      	mov	r0, r4
    }
    return n;
}
   d6090:	b00d      	add	sp, #52	; 0x34
   d6092:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6094 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6094:	b510      	push	{r4, lr}
   d6096:	4b05      	ldr	r3, [pc, #20]	; (d60ac <_ZN9IPAddressC1Ev+0x18>)
   d6098:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d609a:	2211      	movs	r2, #17
   d609c:	f840 3b04 	str.w	r3, [r0], #4
   d60a0:	2100      	movs	r1, #0
   d60a2:	f001 fd78 	bl	d7b96 <memset>
{
    clear();
}
   d60a6:	4620      	mov	r0, r4
   d60a8:	bd10      	pop	{r4, pc}
   d60aa:	bf00      	nop
   d60ac:	000d7fec 	.word	0x000d7fec

000d60b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d60b0:	4603      	mov	r3, r0
   d60b2:	4a07      	ldr	r2, [pc, #28]	; (d60d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d60b4:	b510      	push	{r4, lr}
   d60b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d60ba:	f101 0210 	add.w	r2, r1, #16
   d60be:	f851 4b04 	ldr.w	r4, [r1], #4
   d60c2:	f843 4b04 	str.w	r4, [r3], #4
   d60c6:	4291      	cmp	r1, r2
   d60c8:	d1f9      	bne.n	d60be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d60ca:	780a      	ldrb	r2, [r1, #0]
   d60cc:	701a      	strb	r2, [r3, #0]
}
   d60ce:	bd10      	pop	{r4, pc}
   d60d0:	000d7fec 	.word	0x000d7fec

000d60d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d60d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d60d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d60e6:	2304      	movs	r3, #4
   d60e8:	6041      	str	r1, [r0, #4]
   d60ea:	7503      	strb	r3, [r0, #20]
   d60ec:	bd10      	pop	{r4, pc}

000d60ee <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d60ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d60f0:	780d      	ldrb	r5, [r1, #0]
   d60f2:	788b      	ldrb	r3, [r1, #2]
   d60f4:	784a      	ldrb	r2, [r1, #1]
   d60f6:	78c9      	ldrb	r1, [r1, #3]
   d60f8:	9100      	str	r1, [sp, #0]
   d60fa:	4629      	mov	r1, r5
   d60fc:	f7ff ffea 	bl	d60d4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6100:	b003      	add	sp, #12
   d6102:	bd30      	pop	{r4, r5, pc}

000d6104 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6104:	4b01      	ldr	r3, [pc, #4]	; (d610c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6106:	4a02      	ldr	r2, [pc, #8]	; (d6110 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6108:	601a      	str	r2, [r3, #0]
   d610a:	4770      	bx	lr
   d610c:	2003e3cc 	.word	0x2003e3cc
   d6110:	000d80ab 	.word	0x000d80ab

000d6114 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6114:	2200      	movs	r2, #0
   d6116:	4611      	mov	r1, r2
   d6118:	6840      	ldr	r0, [r0, #4]
   d611a:	f7ff bb85 	b.w	d5828 <network_listening>

000d611e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d611e:	2200      	movs	r2, #0
   d6120:	4611      	mov	r1, r2
   d6122:	6840      	ldr	r0, [r0, #4]
   d6124:	f7ff bb90 	b.w	d5848 <network_get_listen_timeout>

000d6128 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6128:	2200      	movs	r2, #0
   d612a:	6840      	ldr	r0, [r0, #4]
   d612c:	f7ff bb84 	b.w	d5838 <network_set_listen_timeout>

000d6130 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6130:	2200      	movs	r2, #0
   d6132:	f081 0101 	eor.w	r1, r1, #1
   d6136:	6840      	ldr	r0, [r0, #4]
   d6138:	f7ff bb6e 	b.w	d5818 <network_listen>

000d613c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d613c:	2300      	movs	r3, #0
   d613e:	461a      	mov	r2, r3
   d6140:	4619      	mov	r1, r3
   d6142:	6840      	ldr	r0, [r0, #4]
   d6144:	f7ff bb60 	b.w	d5808 <network_off>

000d6148 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6148:	2300      	movs	r3, #0
   d614a:	461a      	mov	r2, r3
   d614c:	4619      	mov	r1, r3
   d614e:	6840      	ldr	r0, [r0, #4]
   d6150:	f7ff bb52 	b.w	d57f8 <network_on>

000d6154 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6154:	2200      	movs	r2, #0
   d6156:	4611      	mov	r1, r2
   d6158:	6840      	ldr	r0, [r0, #4]
   d615a:	f7ff bb45 	b.w	d57e8 <network_ready>

000d615e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d615e:	2200      	movs	r2, #0
   d6160:	4611      	mov	r1, r2
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f7ff bb30 	b.w	d57c8 <network_connecting>

000d6168 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6168:	2200      	movs	r2, #0
   d616a:	2102      	movs	r1, #2
   d616c:	6840      	ldr	r0, [r0, #4]
   d616e:	f7ff bb33 	b.w	d57d8 <network_disconnect>

000d6172 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6172:	2300      	movs	r3, #0
   d6174:	461a      	mov	r2, r3
   d6176:	6840      	ldr	r0, [r0, #4]
   d6178:	f7ff bb1e 	b.w	d57b8 <network_connect>

000d617c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d617c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d617e:	4605      	mov	r5, r0
   d6180:	b188      	cbz	r0, d61a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6182:	6804      	ldr	r4, [r0, #0]
   d6184:	b14c      	cbz	r4, d619a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6186:	68a3      	ldr	r3, [r4, #8]
   d6188:	b11b      	cbz	r3, d6192 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d618a:	2203      	movs	r2, #3
   d618c:	4621      	mov	r1, r4
   d618e:	4620      	mov	r0, r4
   d6190:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6192:	2110      	movs	r1, #16
   d6194:	4620      	mov	r0, r4
   d6196:	f000 fdd6 	bl	d6d46 <_ZdlPvj>
   d619a:	4628      	mov	r0, r5
   d619c:	2114      	movs	r1, #20
      }
   d619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d61a2:	f000 bdd0 	b.w	d6d46 <_ZdlPvj>
   d61a6:	bd38      	pop	{r3, r4, r5, pc}

000d61a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d61a8:	b110      	cbz	r0, d61b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d61aa:	6803      	ldr	r3, [r0, #0]
   d61ac:	685b      	ldr	r3, [r3, #4]
   d61ae:	4718      	bx	r3
   d61b0:	4770      	bx	lr

000d61b2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d61b2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d61b4:	6803      	ldr	r3, [r0, #0]
   d61b6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d61b8:	b1bb      	cbz	r3, d61ea <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d61ba:	6858      	ldr	r0, [r3, #4]
   d61bc:	f7ff f8b0 	bl	d5320 <os_thread_is_current>
   d61c0:	b978      	cbnz	r0, d61e2 <_ZN6ThreadD1Ev+0x30>
   d61c2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d61c4:	7c5a      	ldrb	r2, [r3, #17]
   d61c6:	b912      	cbnz	r2, d61ce <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d61c8:	6858      	ldr	r0, [r3, #4]
   d61ca:	f7ff f8b9 	bl	d5340 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d61ce:	6823      	ldr	r3, [r4, #0]
   d61d0:	6858      	ldr	r0, [r3, #4]
   d61d2:	f7ff f8bd 	bl	d5350 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61d6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d61d8:	2300      	movs	r3, #0
   d61da:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d61dc:	b128      	cbz	r0, d61ea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d61de:	f7ff ffcd 	bl	d617c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61e2:	6820      	ldr	r0, [r4, #0]
   d61e4:	b108      	cbz	r0, d61ea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d61e6:	f7ff ffc9 	bl	d617c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d61ea:	4620      	mov	r0, r4
   d61ec:	bd10      	pop	{r4, pc}
	...

000d61f0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d61f0:	b538      	push	{r3, r4, r5, lr}
   d61f2:	4b0c      	ldr	r3, [pc, #48]	; (d6224 <_ZN5spark9MeshClassD1Ev+0x34>)
   d61f4:	6003      	str	r3, [r0, #0]
   d61f6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61f8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d61fc:	b108      	cbz	r0, d6202 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d61fe:	f7fd ff4e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6202:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6206:	b135      	cbz	r5, d6216 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6208:	4628      	mov	r0, r5
   d620a:	f7ff ffd2 	bl	d61b2 <_ZN6ThreadD1Ev>
   d620e:	2104      	movs	r1, #4
   d6210:	4628      	mov	r0, r5
   d6212:	f000 fd98 	bl	d6d46 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6216:	68a0      	ldr	r0, [r4, #8]
   d6218:	b108      	cbz	r0, d621e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d621a:	f7ff ffc5 	bl	d61a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d621e:	4620      	mov	r0, r4
   d6220:	bd38      	pop	{r3, r4, r5, pc}
   d6222:	bf00      	nop
   d6224:	000d80d8 	.word	0x000d80d8

000d6228 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6228:	b538      	push	{r3, r4, r5, lr}
   d622a:	4c0d      	ldr	r4, [pc, #52]	; (d6260 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d622c:	4b0d      	ldr	r3, [pc, #52]	; (d6264 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d622e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6230:	2500      	movs	r5, #0
   d6232:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6234:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6238:	6063      	str	r3, [r4, #4]
   d623a:	60a5      	str	r5, [r4, #8]
   d623c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6240:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6244:	f7ff f8bc 	bl	d53c0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6248:	4b07      	ldr	r3, [pc, #28]	; (d6268 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d624a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d624e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6250:	4620      	mov	r0, r4
   d6252:	4a06      	ldr	r2, [pc, #24]	; (d626c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6254:	4906      	ldr	r1, [pc, #24]	; (d6270 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d625a:	f000 bd6f 	b.w	d6d3c <__aeabi_atexit>
   d625e:	bf00      	nop
   d6260:	2003e3d0 	.word	0x2003e3d0
   d6264:	000d810c 	.word	0x000d810c
   d6268:	000d80d8 	.word	0x000d80d8
   d626c:	2003e2f8 	.word	0x2003e2f8
   d6270:	000d61f1 	.word	0x000d61f1

000d6274 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6274:	2300      	movs	r3, #0
   d6276:	461a      	mov	r2, r3
   d6278:	6840      	ldr	r0, [r0, #4]
   d627a:	f7ff ba9d 	b.w	d57b8 <network_connect>

000d627e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d627e:	2200      	movs	r2, #0
   d6280:	2102      	movs	r1, #2
   d6282:	6840      	ldr	r0, [r0, #4]
   d6284:	f7ff baa8 	b.w	d57d8 <network_disconnect>

000d6288 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6288:	2200      	movs	r2, #0
   d628a:	4611      	mov	r1, r2
   d628c:	6840      	ldr	r0, [r0, #4]
   d628e:	f7ff ba9b 	b.w	d57c8 <network_connecting>

000d6292 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6292:	2200      	movs	r2, #0
   d6294:	4611      	mov	r1, r2
   d6296:	6840      	ldr	r0, [r0, #4]
   d6298:	f7ff baa6 	b.w	d57e8 <network_ready>

000d629c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d629c:	2300      	movs	r3, #0
   d629e:	461a      	mov	r2, r3
   d62a0:	4619      	mov	r1, r3
   d62a2:	6840      	ldr	r0, [r0, #4]
   d62a4:	f7ff baa8 	b.w	d57f8 <network_on>

000d62a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d62a8:	2300      	movs	r3, #0
   d62aa:	461a      	mov	r2, r3
   d62ac:	4619      	mov	r1, r3
   d62ae:	6840      	ldr	r0, [r0, #4]
   d62b0:	f7ff baaa 	b.w	d5808 <network_off>

000d62b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d62b4:	2200      	movs	r2, #0
   d62b6:	f081 0101 	eor.w	r1, r1, #1
   d62ba:	6840      	ldr	r0, [r0, #4]
   d62bc:	f7ff baac 	b.w	d5818 <network_listen>

000d62c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d62c0:	2200      	movs	r2, #0
   d62c2:	6840      	ldr	r0, [r0, #4]
   d62c4:	f7ff bab8 	b.w	d5838 <network_set_listen_timeout>

000d62c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d62c8:	2200      	movs	r2, #0
   d62ca:	4611      	mov	r1, r2
   d62cc:	6840      	ldr	r0, [r0, #4]
   d62ce:	f7ff babb 	b.w	d5848 <network_get_listen_timeout>

000d62d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d62d2:	2200      	movs	r2, #0
   d62d4:	4611      	mov	r1, r2
   d62d6:	6840      	ldr	r0, [r0, #4]
   d62d8:	f7ff baa6 	b.w	d5828 <network_listening>

000d62dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d62dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d62e2:	b095      	sub	sp, #84	; 0x54
   d62e4:	4616      	mov	r6, r2
   d62e6:	460d      	mov	r5, r1
   d62e8:	4607      	mov	r7, r0
    IPAddress addr;
   d62ea:	f7ff fed3 	bl	d6094 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d62ee:	4621      	mov	r1, r4
   d62f0:	2220      	movs	r2, #32
   d62f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d62f6:	f001 fc4e 	bl	d7b96 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d62fa:	2340      	movs	r3, #64	; 0x40
   d62fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d62fe:	4621      	mov	r1, r4
   d6300:	466b      	mov	r3, sp
   d6302:	aa0c      	add	r2, sp, #48	; 0x30
   d6304:	4630      	mov	r0, r6
   d6306:	f7ff f953 	bl	d55b0 <netdb_getaddrinfo>
    if (!r) {
   d630a:	4604      	mov	r4, r0
   d630c:	2800      	cmp	r0, #0
   d630e:	d144      	bne.n	d639a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6310:	4602      	mov	r2, r0
   d6312:	2101      	movs	r1, #1
   d6314:	6868      	ldr	r0, [r5, #4]
   d6316:	f7ff fa67 	bl	d57e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d631a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d631c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d631e:	4622      	mov	r2, r4
   d6320:	6868      	ldr	r0, [r5, #4]
   d6322:	f7ff fa61 	bl	d57e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6326:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6328:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d632a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d632c:	2e00      	cmp	r6, #0
   d632e:	d034      	beq.n	d639a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6330:	2900      	cmp	r1, #0
   d6332:	d132      	bne.n	d639a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6334:	6873      	ldr	r3, [r6, #4]
   d6336:	2b02      	cmp	r3, #2
   d6338:	d002      	beq.n	d6340 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d633a:	2b0a      	cmp	r3, #10
   d633c:	d009      	beq.n	d6352 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d633e:	e02a      	b.n	d6396 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6340:	f1b8 0f00 	cmp.w	r8, #0
   d6344:	d027      	beq.n	d6396 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6346:	6971      	ldr	r1, [r6, #20]
   d6348:	4638      	mov	r0, r7
   d634a:	3104      	adds	r1, #4
   d634c:	f7ff fecf 	bl	d60ee <_ZN9IPAddressaSEPKh>
   d6350:	e020      	b.n	d6394 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6352:	f1b9 0f00 	cmp.w	r9, #0
   d6356:	d01e      	beq.n	d6396 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6358:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d635a:	2211      	movs	r2, #17
   d635c:	a801      	add	r0, sp, #4
   d635e:	f001 fc1a 	bl	d7b96 <memset>
                    a.v = 6;
   d6362:	2306      	movs	r3, #6
   d6364:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6368:	ad01      	add	r5, sp, #4
   d636a:	f104 0308 	add.w	r3, r4, #8
   d636e:	3418      	adds	r4, #24
   d6370:	6818      	ldr	r0, [r3, #0]
   d6372:	6859      	ldr	r1, [r3, #4]
   d6374:	462a      	mov	r2, r5
   d6376:	c203      	stmia	r2!, {r0, r1}
   d6378:	3308      	adds	r3, #8
   d637a:	42a3      	cmp	r3, r4
   d637c:	4615      	mov	r5, r2
   d637e:	d1f7      	bne.n	d6370 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6380:	a901      	add	r1, sp, #4
   d6382:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6384:	ad07      	add	r5, sp, #28
   d6386:	f7ff fe93 	bl	d60b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d638a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d638c:	1d3c      	adds	r4, r7, #4
   d638e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6390:	682b      	ldr	r3, [r5, #0]
   d6392:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6394:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6396:	69f6      	ldr	r6, [r6, #28]
   d6398:	e7c8      	b.n	d632c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d639a:	9800      	ldr	r0, [sp, #0]
   d639c:	f7ff f900 	bl	d55a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d63a0:	4638      	mov	r0, r7
   d63a2:	b015      	add	sp, #84	; 0x54
   d63a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d63a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d63a8:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d63aa:	4a03      	ldr	r2, [pc, #12]	; (d63b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d63ac:	601a      	str	r2, [r3, #0]
   d63ae:	2200      	movs	r2, #0
   d63b0:	605a      	str	r2, [r3, #4]
   d63b2:	4770      	bx	lr
   d63b4:	2003e5a0 	.word	0x2003e5a0
   d63b8:	000d810c 	.word	0x000d810c

000d63bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63be:	4606      	mov	r6, r0
   d63c0:	460d      	mov	r5, r1
   d63c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d63c4:	2400      	movs	r4, #0
  while (size--) {
   d63c6:	42bd      	cmp	r5, r7
   d63c8:	d00c      	beq.n	d63e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d63ca:	6833      	ldr	r3, [r6, #0]
   d63cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63d0:	689b      	ldr	r3, [r3, #8]
   d63d2:	4630      	mov	r0, r6
   d63d4:	4798      	blx	r3
     if (chunk>=0)
   d63d6:	2800      	cmp	r0, #0
   d63d8:	db01      	blt.n	d63de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d63da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d63dc:	e7f3      	b.n	d63c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d63de:	2c00      	cmp	r4, #0
   d63e0:	bf08      	it	eq
   d63e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d63e4:	4620      	mov	r0, r4
   d63e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d63e8:	b570      	push	{r4, r5, r6, lr}
   d63ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d63ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d63ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d63f0:	b149      	cbz	r1, d6406 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d63f2:	f001 fc24 	bl	d7c3e <strlen>
   d63f6:	682b      	ldr	r3, [r5, #0]
   d63f8:	4602      	mov	r2, r0
   d63fa:	4621      	mov	r1, r4
   d63fc:	4628      	mov	r0, r5
   d63fe:	68db      	ldr	r3, [r3, #12]
    }
   d6400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6404:	4718      	bx	r3
    }
   d6406:	bd70      	pop	{r4, r5, r6, pc}

000d6408 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6408:	6803      	ldr	r3, [r0, #0]
   d640a:	689b      	ldr	r3, [r3, #8]
   d640c:	4718      	bx	r3

000d640e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d640e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6410:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6412:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6414:	f7ff fff8 	bl	d6408 <_ZN5Print5printEc>
  n += print('\n');
   d6418:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d641a:	4604      	mov	r4, r0
  n += print('\n');
   d641c:	4628      	mov	r0, r5
   d641e:	f7ff fff3 	bl	d6408 <_ZN5Print5printEc>
  return n;
}
   d6422:	4420      	add	r0, r4
   d6424:	bd38      	pop	{r3, r4, r5, pc}

000d6426 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6426:	b538      	push	{r3, r4, r5, lr}
   d6428:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d642a:	f7ff ffdd 	bl	d63e8 <_ZN5Print5writeEPKc>
   d642e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6430:	4628      	mov	r0, r5
   d6432:	f7ff ffec 	bl	d640e <_ZN5Print7printlnEv>
  return n;
}
   d6436:	4420      	add	r0, r4
   d6438:	bd38      	pop	{r3, r4, r5, pc}

000d643a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d643a:	b530      	push	{r4, r5, lr}
   d643c:	b08b      	sub	sp, #44	; 0x2c
   d643e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6440:	2100      	movs	r1, #0
   d6442:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6446:	2a01      	cmp	r2, #1
   d6448:	bf98      	it	ls
   d644a:	220a      	movls	r2, #10
   d644c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6450:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6454:	fb05 3312 	mls	r3, r5, r2, r3
   d6458:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d645c:	2b09      	cmp	r3, #9
   d645e:	bf94      	ite	ls
   d6460:	3330      	addls	r3, #48	; 0x30
   d6462:	3337      	addhi	r3, #55	; 0x37
   d6464:	b2db      	uxtb	r3, r3
   d6466:	4621      	mov	r1, r4
   d6468:	f804 3901 	strb.w	r3, [r4], #-1
   d646c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d646e:	2d00      	cmp	r5, #0
   d6470:	d1ee      	bne.n	d6450 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6472:	f7ff ffb9 	bl	d63e8 <_ZN5Print5writeEPKc>
}
   d6476:	b00b      	add	sp, #44	; 0x2c
   d6478:	bd30      	pop	{r4, r5, pc}

000d647a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d647a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d647c:	b92a      	cbnz	r2, d648a <_ZN5Print5printEmi+0x10>
   d647e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6480:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6484:	689b      	ldr	r3, [r3, #8]
   d6486:	b2c9      	uxtb	r1, r1
   d6488:	4718      	bx	r3
  else return printNumber(n, base);
   d648a:	b2d2      	uxtb	r2, r2
}
   d648c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6490:	f7ff bfd3 	b.w	d643a <_ZN5Print11printNumberEmh>

000d6494 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6494:	f7ff bff1 	b.w	d647a <_ZN5Print5printEmi>

000d6498 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6498:	b40c      	push	{r2, r3}
   d649a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d649e:	b087      	sub	sp, #28
   d64a0:	af00      	add	r7, sp, #0
   d64a2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d64a6:	4605      	mov	r5, r0
   d64a8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d64ac:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d64ae:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d64b0:	4623      	mov	r3, r4
   d64b2:	464a      	mov	r2, r9
   d64b4:	2114      	movs	r1, #20
   d64b6:	1d38      	adds	r0, r7, #4
   d64b8:	f7ff f9e6 	bl	d5888 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d64bc:	2813      	cmp	r0, #19
   d64be:	d805      	bhi.n	d64cc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64c0:	1d39      	adds	r1, r7, #4
   d64c2:	4628      	mov	r0, r5
   d64c4:	f7ff ff90 	bl	d63e8 <_ZN5Print5writeEPKc>
   d64c8:	4604      	mov	r4, r0
   d64ca:	e013      	b.n	d64f4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d64cc:	f100 0308 	add.w	r3, r0, #8
   d64d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d64d4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d64d6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d64da:	1c41      	adds	r1, r0, #1
   d64dc:	4623      	mov	r3, r4
   d64de:	464a      	mov	r2, r9
   d64e0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d64e2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d64e4:	f7ff f9d0 	bl	d5888 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64e8:	4669      	mov	r1, sp
   d64ea:	4628      	mov	r0, r5
   d64ec:	f7ff ff7c 	bl	d63e8 <_ZN5Print5writeEPKc>
   d64f0:	4604      	mov	r4, r0
   d64f2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d64f4:	b11e      	cbz	r6, d64fe <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d64f6:	4628      	mov	r0, r5
   d64f8:	f7ff ff89 	bl	d640e <_ZN5Print7printlnEv>
   d64fc:	4404      	add	r4, r0
    return n;
}
   d64fe:	4620      	mov	r0, r4
   d6500:	371c      	adds	r7, #28
   d6502:	46bd      	mov	sp, r7
   d6504:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6508:	b002      	add	sp, #8
   d650a:	4770      	bx	lr

000d650c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d650c:	b510      	push	{r4, lr}
   d650e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6510:	f7fe f982 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}

000d6518 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6518:	4803      	ldr	r0, [pc, #12]	; (d6528 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d651a:	4a04      	ldr	r2, [pc, #16]	; (d652c <_GLOBAL__sub_I_RGB+0x14>)
   d651c:	4904      	ldr	r1, [pc, #16]	; (d6530 <_GLOBAL__sub_I_RGB+0x18>)
   d651e:	2300      	movs	r3, #0
   d6520:	6083      	str	r3, [r0, #8]
   d6522:	f000 bc0b 	b.w	d6d3c <__aeabi_atexit>
   d6526:	bf00      	nop
   d6528:	2003e5a8 	.word	0x2003e5a8
   d652c:	2003e2f8 	.word	0x2003e2f8
   d6530:	000d650d 	.word	0x000d650d

000d6534 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6534:	4770      	bx	lr

000d6536 <_ZN8SPIClassD0Ev>:
   d6536:	b510      	push	{r4, lr}
   d6538:	2110      	movs	r1, #16
   d653a:	4604      	mov	r4, r0
   d653c:	f000 fc03 	bl	d6d46 <_ZdlPvj>
   d6540:	4620      	mov	r0, r4
   d6542:	bd10      	pop	{r4, pc}

000d6544 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6544:	b570      	push	{r4, r5, r6, lr}
   d6546:	4b08      	ldr	r3, [pc, #32]	; (d6568 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6548:	6003      	str	r3, [r0, #0]
   d654a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d654c:	2500      	movs	r5, #0
   d654e:	460e      	mov	r6, r1
   d6550:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6554:	f7fe ff2c 	bl	d53b0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6558:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d655a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d655c:	f7ff f830 	bl	d55c0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6560:	60a5      	str	r5, [r4, #8]
}
   d6562:	4620      	mov	r0, r4
   d6564:	bd70      	pop	{r4, r5, r6, pc}
   d6566:	bf00      	nop
   d6568:	000d8140 	.word	0x000d8140

000d656c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d656c:	7900      	ldrb	r0, [r0, #4]
   d656e:	f7ff b82f 	b.w	d55d0 <HAL_SPI_Is_Enabled>

000d6572 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6572:	b510      	push	{r4, lr}
   d6574:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6576:	f7fe ff53 	bl	d5420 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d657a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d657c:	6823      	ldr	r3, [r4, #0]
   d657e:	4620      	mov	r0, r4
   d6580:	695b      	ldr	r3, [r3, #20]
   d6582:	4798      	blx	r3
    if (c >= 0) return c;
   d6584:	2800      	cmp	r0, #0
   d6586:	da08      	bge.n	d659a <_ZN6Stream9timedReadEv+0x28>
   d6588:	f7fe ff4a 	bl	d5420 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d658c:	68e3      	ldr	r3, [r4, #12]
   d658e:	1ac0      	subs	r0, r0, r3
   d6590:	68a3      	ldr	r3, [r4, #8]
   d6592:	4298      	cmp	r0, r3
   d6594:	d3f2      	bcc.n	d657c <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d659a:	bd10      	pop	{r4, pc}

000d659c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65a0:	4680      	mov	r8, r0
   d65a2:	460d      	mov	r5, r1
   d65a4:	188f      	adds	r7, r1, r2
   d65a6:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d65a8:	42bc      	cmp	r4, r7
   d65aa:	eba4 0605 	sub.w	r6, r4, r5
   d65ae:	d007      	beq.n	d65c0 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d65b0:	4640      	mov	r0, r8
   d65b2:	f7ff ffde 	bl	d6572 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d65b6:	2800      	cmp	r0, #0
   d65b8:	db02      	blt.n	d65c0 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d65ba:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d65be:	e7f3      	b.n	d65a8 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d65c0:	4630      	mov	r0, r6
   d65c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65c6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d65c6:	b510      	push	{r4, lr}
   d65c8:	4604      	mov	r4, r0
{
	free(buffer);
   d65ca:	6800      	ldr	r0, [r0, #0]
   d65cc:	f7ff f94c 	bl	d5868 <free>
}
   d65d0:	4620      	mov	r0, r4
   d65d2:	bd10      	pop	{r4, pc}

000d65d4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d65d4:	b510      	push	{r4, lr}
   d65d6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d65d8:	6800      	ldr	r0, [r0, #0]
   d65da:	b108      	cbz	r0, d65e0 <_ZN6String10invalidateEv+0xc>
   d65dc:	f7ff f944 	bl	d5868 <free>
	buffer = NULL;
   d65e0:	2300      	movs	r3, #0
   d65e2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d65e4:	60a3      	str	r3, [r4, #8]
   d65e6:	6063      	str	r3, [r4, #4]
   d65e8:	bd10      	pop	{r4, pc}

000d65ea <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d65ea:	b538      	push	{r3, r4, r5, lr}
   d65ec:	4604      	mov	r4, r0
   d65ee:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d65f0:	6800      	ldr	r0, [r0, #0]
   d65f2:	3101      	adds	r1, #1
   d65f4:	f7ff f940 	bl	d5878 <realloc>
	if (newbuffer) {
   d65f8:	b110      	cbz	r0, d6600 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d65fa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d65fe:	2001      	movs	r0, #1
	}
	return 0;
}
   d6600:	bd38      	pop	{r3, r4, r5, pc}

000d6602 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6602:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6604:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6606:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6608:	b113      	cbz	r3, d6610 <_ZN6String7reserveEj+0xe>
   d660a:	6843      	ldr	r3, [r0, #4]
   d660c:	428b      	cmp	r3, r1
   d660e:	d207      	bcs.n	d6620 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6610:	4620      	mov	r0, r4
   d6612:	f7ff ffea 	bl	d65ea <_ZN6String12changeBufferEj>
   d6616:	b120      	cbz	r0, d6622 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6618:	68a3      	ldr	r3, [r4, #8]
   d661a:	b90b      	cbnz	r3, d6620 <_ZN6String7reserveEj+0x1e>
   d661c:	6822      	ldr	r2, [r4, #0]
   d661e:	7013      	strb	r3, [r2, #0]
   d6620:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6622:	bd10      	pop	{r4, pc}

000d6624 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6624:	b570      	push	{r4, r5, r6, lr}
   d6626:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6628:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d662a:	4604      	mov	r4, r0
   d662c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d662e:	f7ff ffe8 	bl	d6602 <_ZN6String7reserveEj>
   d6632:	b918      	cbnz	r0, d663c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6634:	4620      	mov	r0, r4
   d6636:	f7ff ffcd 	bl	d65d4 <_ZN6String10invalidateEv>
		return *this;
   d663a:	e009      	b.n	d6650 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d663c:	462a      	mov	r2, r5
   d663e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6640:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6642:	6820      	ldr	r0, [r4, #0]
   d6644:	f001 fa9c 	bl	d7b80 <memcpy>
	buffer[len] = 0;
   d6648:	6822      	ldr	r2, [r4, #0]
   d664a:	68a3      	ldr	r3, [r4, #8]
   d664c:	2100      	movs	r1, #0
   d664e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6650:	4620      	mov	r0, r4
   d6652:	bd70      	pop	{r4, r5, r6, pc}

000d6654 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6654:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6656:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6658:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d665a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d665c:	6043      	str	r3, [r0, #4]
	len = 0;
   d665e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6660:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6662:	460d      	mov	r5, r1
   d6664:	b139      	cbz	r1, d6676 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6666:	4608      	mov	r0, r1
   d6668:	f001 fae9 	bl	d7c3e <strlen>
   d666c:	4629      	mov	r1, r5
   d666e:	4602      	mov	r2, r0
   d6670:	4620      	mov	r0, r4
   d6672:	f7ff ffd7 	bl	d6624 <_ZN6String4copyEPKcj>
}
   d6676:	4620      	mov	r0, r4
   d6678:	bd38      	pop	{r3, r4, r5, pc}

000d667a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d667a:	b538      	push	{r3, r4, r5, lr}
   d667c:	4605      	mov	r5, r0
	if (buffer) {
   d667e:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6680:	460c      	mov	r4, r1
	if (buffer) {
   d6682:	b160      	cbz	r0, d669e <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d6684:	686a      	ldr	r2, [r5, #4]
   d6686:	688b      	ldr	r3, [r1, #8]
   d6688:	429a      	cmp	r2, r3
   d668a:	d306      	bcc.n	d669a <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d668c:	6809      	ldr	r1, [r1, #0]
   d668e:	f001 fab3 	bl	d7bf8 <strcpy>
			len = rhs.len;
   d6692:	68a3      	ldr	r3, [r4, #8]
   d6694:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6696:	2300      	movs	r3, #0
   d6698:	e00a      	b.n	d66b0 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d669a:	f7ff f8e5 	bl	d5868 <free>
		}
	}
	buffer = rhs.buffer;
   d669e:	6823      	ldr	r3, [r4, #0]
   d66a0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d66a2:	6863      	ldr	r3, [r4, #4]
   d66a4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d66a6:	68a3      	ldr	r3, [r4, #8]
   d66a8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d66aa:	2300      	movs	r3, #0
   d66ac:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d66ae:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d66b0:	60a3      	str	r3, [r4, #8]
   d66b2:	bd38      	pop	{r3, r4, r5, pc}

000d66b4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d66b4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d66b6:	b510      	push	{r4, lr}
   d66b8:	460b      	mov	r3, r1
   d66ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d66bc:	d007      	beq.n	d66ce <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d66be:	6809      	ldr	r1, [r1, #0]
   d66c0:	b119      	cbz	r1, d66ca <_ZN6StringaSERKS_+0x16>
   d66c2:	689a      	ldr	r2, [r3, #8]
   d66c4:	f7ff ffae 	bl	d6624 <_ZN6String4copyEPKcj>
   d66c8:	e001      	b.n	d66ce <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d66ca:	f7ff ff83 	bl	d65d4 <_ZN6String10invalidateEv>

	return *this;
}
   d66ce:	4620      	mov	r0, r4
   d66d0:	bd10      	pop	{r4, pc}

000d66d2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66d2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66d4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66da:	6043      	str	r3, [r0, #4]
	len = 0;
   d66dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66de:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d66e0:	f7ff ffe8 	bl	d66b4 <_ZN6StringaSERKS_>
}
   d66e4:	4620      	mov	r0, r4
   d66e6:	bd10      	pop	{r4, pc}

000d66e8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d66e8:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d66ea:	b510      	push	{r4, lr}
   d66ec:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d66ee:	d001      	beq.n	d66f4 <_ZN6StringaSEOS_+0xc>
   d66f0:	f7ff ffc3 	bl	d667a <_ZN6String4moveERS_>
	return *this;
}
   d66f4:	4620      	mov	r0, r4
   d66f6:	bd10      	pop	{r4, pc}

000d66f8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d66f8:	b570      	push	{r4, r5, r6, lr}
   d66fa:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d66fc:	460e      	mov	r6, r1
   d66fe:	b909      	cbnz	r1, d6704 <_ZN6String6concatEPKcj+0xc>
   d6700:	2000      	movs	r0, #0
   d6702:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6704:	b16a      	cbz	r2, d6722 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6706:	6883      	ldr	r3, [r0, #8]
   d6708:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d670a:	4629      	mov	r1, r5
   d670c:	f7ff ff79 	bl	d6602 <_ZN6String7reserveEj>
   d6710:	2800      	cmp	r0, #0
   d6712:	d0f5      	beq.n	d6700 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6714:	6820      	ldr	r0, [r4, #0]
   d6716:	68a3      	ldr	r3, [r4, #8]
   d6718:	4631      	mov	r1, r6
   d671a:	4418      	add	r0, r3
   d671c:	f001 fa6c 	bl	d7bf8 <strcpy>
	len = newlen;
   d6720:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6722:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6724:	bd70      	pop	{r4, r5, r6, pc}

000d6726 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6726:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6728:	688a      	ldr	r2, [r1, #8]
   d672a:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d672c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d672e:	f7ff ffe3 	bl	d66f8 <_ZN6String6concatEPKcj>
   d6732:	b910      	cbnz	r0, d673a <_ZplRK15StringSumHelperRK6String+0x14>
   d6734:	4620      	mov	r0, r4
   d6736:	f7ff ff4d 	bl	d65d4 <_ZN6String10invalidateEv>
	return a;
}
   d673a:	4620      	mov	r0, r4
   d673c:	bd10      	pop	{r4, pc}

000d673e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d673e:	b538      	push	{r3, r4, r5, lr}
   d6740:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6742:	460d      	mov	r5, r1
   d6744:	b141      	cbz	r1, d6758 <_ZplRK15StringSumHelperPKc+0x1a>
   d6746:	4608      	mov	r0, r1
   d6748:	f001 fa79 	bl	d7c3e <strlen>
   d674c:	4629      	mov	r1, r5
   d674e:	4602      	mov	r2, r0
   d6750:	4620      	mov	r0, r4
   d6752:	f7ff ffd1 	bl	d66f8 <_ZN6String6concatEPKcj>
   d6756:	b910      	cbnz	r0, d675e <_ZplRK15StringSumHelperPKc+0x20>
   d6758:	4620      	mov	r0, r4
   d675a:	f7ff ff3b 	bl	d65d4 <_ZN6String10invalidateEv>
	return a;
}
   d675e:	4620      	mov	r0, r4
   d6760:	bd38      	pop	{r3, r4, r5, pc}

000d6762 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6762:	6800      	ldr	r0, [r0, #0]
   d6764:	b108      	cbz	r0, d676a <_ZNK6String5toIntEv+0x8>
   d6766:	f001 b9f9 	b.w	d7b5c <atol>
	return 0;
}
   d676a:	4770      	bx	lr

000d676c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d676c:	b40e      	push	{r1, r2, r3}
   d676e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d6770:	ac09      	add	r4, sp, #36	; 0x24
   d6772:	4605      	mov	r5, r0
   d6774:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d6778:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d677a:	4623      	mov	r3, r4
   d677c:	463a      	mov	r2, r7
   d677e:	2105      	movs	r1, #5
   d6780:	a802      	add	r0, sp, #8
   d6782:	f7ff f881 	bl	d5888 <vsnprintf>
    va_end(marker);

    String result;
   d6786:	490c      	ldr	r1, [pc, #48]	; (d67b8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6788:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d678a:	4628      	mov	r0, r5
   d678c:	f7ff ff62 	bl	d6654 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d6790:	4631      	mov	r1, r6
   d6792:	4628      	mov	r0, r5
   d6794:	f7ff ff35 	bl	d6602 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6798:	6828      	ldr	r0, [r5, #0]
   d679a:	b130      	cbz	r0, d67aa <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d679c:	4623      	mov	r3, r4
   d679e:	463a      	mov	r2, r7
   d67a0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d67a2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d67a4:	f7ff f870 	bl	d5888 <vsnprintf>
        va_end(marker);
        result.len = n;
   d67a8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d67aa:	4628      	mov	r0, r5
   d67ac:	b004      	add	sp, #16
   d67ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d67b2:	b003      	add	sp, #12
   d67b4:	4770      	bx	lr
   d67b6:	bf00      	nop
   d67b8:	000d800c 	.word	0x000d800c

000d67bc <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d67bc:	4601      	mov	r1, r0
   d67be:	2200      	movs	r2, #0
   d67c0:	208c      	movs	r0, #140	; 0x8c
   d67c2:	f7fe be15 	b.w	d53f0 <HAL_Core_System_Reset_Ex>

000d67c6 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d67c6:	2000      	movs	r0, #0
   d67c8:	f7ff bff8 	b.w	d67bc <_ZN11SystemClass5resetEm>

000d67cc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d67cc:	4b04      	ldr	r3, [pc, #16]	; (d67e0 <_GLOBAL__sub_I_System+0x14>)
   d67ce:	2000      	movs	r0, #0
   d67d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d67d4:	7018      	strb	r0, [r3, #0]
   d67d6:	8058      	strh	r0, [r3, #2]
   d67d8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d67da:	f7fe bf81 	b.w	d56e0 <set_system_mode>
   d67de:	bf00      	nop
   d67e0:	2003e5b8 	.word	0x2003e5b8

000d67e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d67e4:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d67e6:	681a      	ldr	r2, [r3, #0]
   d67e8:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d67ea:	601a      	str	r2, [r3, #0]
   d67ec:	4770      	bx	lr
   d67ee:	bf00      	nop
   d67f0:	2003e28c 	.word	0x2003e28c
   d67f4:	2003e5c0 	.word	0x2003e5c0

000d67f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d67f8:	4770      	bx	lr

000d67fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d67fa:	7441      	strb	r1, [r0, #17]
   d67fc:	4770      	bx	lr

000d67fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d67fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6800:	7c00      	ldrb	r0, [r0, #16]
   d6802:	f7fe ff25 	bl	d5650 <HAL_USART_Available_Data_For_Write>
}
   d6806:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d680a:	bd08      	pop	{r3, pc}

000d680c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d680c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d680e:	7c00      	ldrb	r0, [r0, #16]
   d6810:	f7fe fef6 	bl	d5600 <HAL_USART_Available_Data>
}
   d6814:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6818:	bd08      	pop	{r3, pc}

000d681a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d681a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d681c:	7c00      	ldrb	r0, [r0, #16]
   d681e:	f7fe feff 	bl	d5620 <HAL_USART_Peek_Data>
}
   d6822:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6826:	bf28      	it	cs
   d6828:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d682c:	bd08      	pop	{r3, pc}

000d682e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d682e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6830:	7c00      	ldrb	r0, [r0, #16]
   d6832:	f7fe feed 	bl	d5610 <HAL_USART_Read_Data>
}
   d6836:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d683a:	bf28      	it	cs
   d683c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6840:	bd08      	pop	{r3, pc}

000d6842 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6842:	7c00      	ldrb	r0, [r0, #16]
   d6844:	f7fe bef4 	b.w	d5630 <HAL_USART_Flush_Data>

000d6848 <_ZN11USARTSerialD0Ev>:
   d6848:	b510      	push	{r4, lr}
   d684a:	2114      	movs	r1, #20
   d684c:	4604      	mov	r4, r0
   d684e:	f000 fa7a 	bl	d6d46 <_ZdlPvj>
   d6852:	4620      	mov	r0, r4
   d6854:	bd10      	pop	{r4, pc}

000d6856 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6856:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6858:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d685a:	4604      	mov	r4, r0
   d685c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d685e:	b925      	cbnz	r5, d686a <_ZN11USARTSerial5writeEh+0x14>
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7fe fef5 	bl	d5650 <HAL_USART_Available_Data_For_Write>
   d6866:	2800      	cmp	r0, #0
   d6868:	dd05      	ble.n	d6876 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d686a:	4631      	mov	r1, r6
   d686c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d686e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6872:	f7fe bebd 	b.w	d55f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6876:	4628      	mov	r0, r5
   d6878:	bd70      	pop	{r4, r5, r6, pc}
	...

000d687c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d687c:	b510      	push	{r4, lr}
   d687e:	4604      	mov	r4, r0
   d6880:	4608      	mov	r0, r1
   d6882:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6884:	2200      	movs	r2, #0
   d6886:	6062      	str	r2, [r4, #4]
   d6888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d688c:	60a2      	str	r2, [r4, #8]
   d688e:	4a05      	ldr	r2, [pc, #20]	; (d68a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6890:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6892:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6894:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6896:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6898:	461a      	mov	r2, r3
   d689a:	f7fe fea1 	bl	d55e0 <HAL_USART_Init>
}
   d689e:	4620      	mov	r0, r4
   d68a0:	bd10      	pop	{r4, pc}
   d68a2:	bf00      	nop
   d68a4:	000d817c 	.word	0x000d817c

000d68a8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d68a8:	2300      	movs	r3, #0
   d68aa:	7c00      	ldrb	r0, [r0, #16]
   d68ac:	f7fe bed8 	b.w	d5660 <HAL_USART_BeginConfig>

000d68b0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d68b0:	2200      	movs	r2, #0
   d68b2:	f7ff bff9 	b.w	d68a8 <_ZN11USARTSerial5beginEmm>

000d68b6 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d68b6:	7c00      	ldrb	r0, [r0, #16]
   d68b8:	f7fe bec2 	b.w	d5640 <HAL_USART_Is_Enabled>

000d68bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d68bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d68be:	4d0c      	ldr	r5, [pc, #48]	; (d68f0 <_Z22__fetch_global_Serial1v+0x34>)
   d68c0:	6829      	ldr	r1, [r5, #0]
   d68c2:	f011 0401 	ands.w	r4, r1, #1
   d68c6:	d111      	bne.n	d68ec <_Z22__fetch_global_Serial1v+0x30>
   d68c8:	4628      	mov	r0, r5
   d68ca:	f7fd fbea 	bl	d40a2 <__cxa_guard_acquire>
   d68ce:	b168      	cbz	r0, d68ec <_Z22__fetch_global_Serial1v+0x30>
   d68d0:	4a08      	ldr	r2, [pc, #32]	; (d68f4 <_Z22__fetch_global_Serial1v+0x38>)
   d68d2:	4b09      	ldr	r3, [pc, #36]	; (d68f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d68d4:	4809      	ldr	r0, [pc, #36]	; (d68fc <_Z22__fetch_global_Serial1v+0x40>)
   d68d6:	4621      	mov	r1, r4
   d68d8:	f7ff ffd0 	bl	d687c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d68dc:	4628      	mov	r0, r5
   d68de:	f7fd fbe5 	bl	d40ac <__cxa_guard_release>
   d68e2:	4a07      	ldr	r2, [pc, #28]	; (d6900 <_Z22__fetch_global_Serial1v+0x44>)
   d68e4:	4907      	ldr	r1, [pc, #28]	; (d6904 <_Z22__fetch_global_Serial1v+0x48>)
   d68e6:	4805      	ldr	r0, [pc, #20]	; (d68fc <_Z22__fetch_global_Serial1v+0x40>)
   d68e8:	f000 fa28 	bl	d6d3c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d68ec:	4803      	ldr	r0, [pc, #12]	; (d68fc <_Z22__fetch_global_Serial1v+0x40>)
   d68ee:	bd38      	pop	{r3, r4, r5, pc}
   d68f0:	2003e65c 	.word	0x2003e65c
   d68f4:	2003e660 	.word	0x2003e660
   d68f8:	2003e5d8 	.word	0x2003e5d8
   d68fc:	2003e5c4 	.word	0x2003e5c4
   d6900:	2003e2f8 	.word	0x2003e2f8
   d6904:	000d67f9 	.word	0x000d67f9

000d6908 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6908:	7441      	strb	r1, [r0, #17]
   d690a:	4770      	bx	lr

000d690c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d690c:	4770      	bx	lr

000d690e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d690e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6910:	2100      	movs	r1, #0
   d6912:	7c00      	ldrb	r0, [r0, #16]
   d6914:	f7fe fecc 	bl	d56b0 <HAL_USB_USART_Receive_Data>
}
   d6918:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d691c:	bf28      	it	cs
   d691e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6922:	bd08      	pop	{r3, pc}

000d6924 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6924:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6926:	2101      	movs	r1, #1
   d6928:	7c00      	ldrb	r0, [r0, #16]
   d692a:	f7fe fec1 	bl	d56b0 <HAL_USB_USART_Receive_Data>
}
   d692e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6932:	bf28      	it	cs
   d6934:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6938:	bd08      	pop	{r3, pc}

000d693a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d693a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d693c:	7c00      	ldrb	r0, [r0, #16]
   d693e:	f7fe feaf 	bl	d56a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6942:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6946:	bd08      	pop	{r3, pc}

000d6948 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6948:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d694a:	7c00      	ldrb	r0, [r0, #16]
   d694c:	f7fe fea0 	bl	d5690 <HAL_USB_USART_Available_Data>
}
   d6950:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6954:	bd08      	pop	{r3, pc}

000d6956 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6956:	7c00      	ldrb	r0, [r0, #16]
   d6958:	f7fe beba 	b.w	d56d0 <HAL_USB_USART_Flush_Data>

000d695c <_ZN9USBSerialD0Ev>:
   d695c:	b510      	push	{r4, lr}
   d695e:	2114      	movs	r1, #20
   d6960:	4604      	mov	r4, r0
   d6962:	f000 f9f0 	bl	d6d46 <_ZdlPvj>
   d6966:	4620      	mov	r0, r4
   d6968:	bd10      	pop	{r4, pc}

000d696a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d696a:	b538      	push	{r3, r4, r5, lr}
   d696c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d696e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6970:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6972:	f7fe fe95 	bl	d56a0 <HAL_USB_USART_Available_Data_For_Write>
   d6976:	2800      	cmp	r0, #0
   d6978:	dc01      	bgt.n	d697e <_ZN9USBSerial5writeEh+0x14>
   d697a:	7c60      	ldrb	r0, [r4, #17]
   d697c:	b128      	cbz	r0, d698a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d697e:	4629      	mov	r1, r5
   d6980:	7c20      	ldrb	r0, [r4, #16]
   d6982:	f7fe fe9d 	bl	d56c0 <HAL_USB_USART_Send_Data>
   d6986:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d698a:	bd38      	pop	{r3, r4, r5, pc}

000d698c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d698c:	b510      	push	{r4, lr}
   d698e:	4604      	mov	r4, r0
   d6990:	2300      	movs	r3, #0
   d6992:	6063      	str	r3, [r4, #4]
   d6994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6998:	60a3      	str	r3, [r4, #8]
   d699a:	4b05      	ldr	r3, [pc, #20]	; (d69b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d699c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d699e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69a0:	4608      	mov	r0, r1
{
  _serial = serial;
   d69a2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d69a4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d69a6:	4611      	mov	r1, r2
   d69a8:	f7fe fe62 	bl	d5670 <HAL_USB_USART_Init>
}
   d69ac:	4620      	mov	r0, r4
   d69ae:	bd10      	pop	{r4, pc}
   d69b0:	000d81ac 	.word	0x000d81ac

000d69b4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d69b4:	2200      	movs	r2, #0
   d69b6:	7c00      	ldrb	r0, [r0, #16]
   d69b8:	f7fe be62 	b.w	d5680 <HAL_USB_USART_Begin>

000d69bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d69be:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d69c2:	2100      	movs	r1, #0
   d69c4:	f001 f8e7 	bl	d7b96 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d69c8:	4620      	mov	r0, r4
   d69ca:	bd10      	pop	{r4, pc}

000d69cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d69cc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69ce:	4d0e      	ldr	r5, [pc, #56]	; (d6a08 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d69d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d69d2:	a801      	add	r0, sp, #4
   d69d4:	f7ff fff2 	bl	d69bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69d8:	6829      	ldr	r1, [r5, #0]
   d69da:	f011 0401 	ands.w	r4, r1, #1
   d69de:	d110      	bne.n	d6a02 <_Z16_fetch_usbserialv+0x36>
   d69e0:	4628      	mov	r0, r5
   d69e2:	f7fd fb5e 	bl	d40a2 <__cxa_guard_acquire>
   d69e6:	b160      	cbz	r0, d6a02 <_Z16_fetch_usbserialv+0x36>
   d69e8:	aa01      	add	r2, sp, #4
   d69ea:	4621      	mov	r1, r4
   d69ec:	4807      	ldr	r0, [pc, #28]	; (d6a0c <_Z16_fetch_usbserialv+0x40>)
   d69ee:	f7ff ffcd 	bl	d698c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d69f2:	4628      	mov	r0, r5
   d69f4:	f7fd fb5a 	bl	d40ac <__cxa_guard_release>
   d69f8:	4a05      	ldr	r2, [pc, #20]	; (d6a10 <_Z16_fetch_usbserialv+0x44>)
   d69fa:	4906      	ldr	r1, [pc, #24]	; (d6a14 <_Z16_fetch_usbserialv+0x48>)
   d69fc:	4803      	ldr	r0, [pc, #12]	; (d6a0c <_Z16_fetch_usbserialv+0x40>)
   d69fe:	f000 f99d 	bl	d6d3c <__aeabi_atexit>
	return _usbserial;
}
   d6a02:	4802      	ldr	r0, [pc, #8]	; (d6a0c <_Z16_fetch_usbserialv+0x40>)
   d6a04:	b007      	add	sp, #28
   d6a06:	bd30      	pop	{r4, r5, pc}
   d6a08:	2003e6e4 	.word	0x2003e6e4
   d6a0c:	2003e6e8 	.word	0x2003e6e8
   d6a10:	2003e2f8 	.word	0x2003e2f8
   d6a14:	000d690d 	.word	0x000d690d

000d6a18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6a18:	2200      	movs	r2, #0
   d6a1a:	4611      	mov	r1, r2
   d6a1c:	6840      	ldr	r0, [r0, #4]
   d6a1e:	f7fe bee3 	b.w	d57e8 <network_ready>

000d6a22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a22:	2200      	movs	r2, #0
   d6a24:	4611      	mov	r1, r2
   d6a26:	6840      	ldr	r0, [r0, #4]
   d6a28:	f7fe befe 	b.w	d5828 <network_listening>

000d6a2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a2c:	2200      	movs	r2, #0
   d6a2e:	4611      	mov	r1, r2
   d6a30:	6840      	ldr	r0, [r0, #4]
   d6a32:	f7fe bf09 	b.w	d5848 <network_get_listen_timeout>

000d6a36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a36:	2200      	movs	r2, #0
   d6a38:	6840      	ldr	r0, [r0, #4]
   d6a3a:	f7fe befd 	b.w	d5838 <network_set_listen_timeout>

000d6a3e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a3e:	2200      	movs	r2, #0
   d6a40:	f081 0101 	eor.w	r1, r1, #1
   d6a44:	6840      	ldr	r0, [r0, #4]
   d6a46:	f7fe bee7 	b.w	d5818 <network_listen>

000d6a4a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6a4a:	2300      	movs	r3, #0
   d6a4c:	461a      	mov	r2, r3
   d6a4e:	4619      	mov	r1, r3
   d6a50:	6840      	ldr	r0, [r0, #4]
   d6a52:	f7fe bed9 	b.w	d5808 <network_off>

000d6a56 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a56:	2300      	movs	r3, #0
   d6a58:	461a      	mov	r2, r3
   d6a5a:	4619      	mov	r1, r3
   d6a5c:	6840      	ldr	r0, [r0, #4]
   d6a5e:	f7fe becb 	b.w	d57f8 <network_on>

000d6a62 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a62:	2200      	movs	r2, #0
   d6a64:	4611      	mov	r1, r2
   d6a66:	6840      	ldr	r0, [r0, #4]
   d6a68:	f7fe beae 	b.w	d57c8 <network_connecting>

000d6a6c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a6c:	2200      	movs	r2, #0
   d6a6e:	2102      	movs	r1, #2
   d6a70:	6840      	ldr	r0, [r0, #4]
   d6a72:	f7fe beb1 	b.w	d57d8 <network_disconnect>

000d6a76 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a76:	2300      	movs	r3, #0
   d6a78:	461a      	mov	r2, r3
   d6a7a:	6840      	ldr	r0, [r0, #4]
   d6a7c:	f7fe be9c 	b.w	d57b8 <network_connect>

000d6a80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6a80:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6a82:	2204      	movs	r2, #4
   d6a84:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6a86:	4a02      	ldr	r2, [pc, #8]	; (d6a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6a88:	601a      	str	r2, [r3, #0]
   d6a8a:	4770      	bx	lr
   d6a8c:	2003e6fc 	.word	0x2003e6fc
   d6a90:	000d81dc 	.word	0x000d81dc

000d6a94 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a96:	4b0c      	ldr	r3, [pc, #48]	; (d6ac8 <serialEventRun+0x34>)
   d6a98:	b133      	cbz	r3, d6aa8 <serialEventRun+0x14>
   d6a9a:	f7ff ff97 	bl	d69cc <_Z16_fetch_usbserialv>
   d6a9e:	6803      	ldr	r3, [r0, #0]
   d6aa0:	691b      	ldr	r3, [r3, #16]
   d6aa2:	4798      	blx	r3
   d6aa4:	2800      	cmp	r0, #0
   d6aa6:	dc09      	bgt.n	d6abc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6aa8:	4b08      	ldr	r3, [pc, #32]	; (d6acc <serialEventRun+0x38>)
   d6aaa:	b163      	cbz	r3, d6ac6 <serialEventRun+0x32>
   d6aac:	f7ff ff06 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d6ab0:	6803      	ldr	r3, [r0, #0]
   d6ab2:	691b      	ldr	r3, [r3, #16]
   d6ab4:	4798      	blx	r3
   d6ab6:	2800      	cmp	r0, #0
   d6ab8:	dc03      	bgt.n	d6ac2 <serialEventRun+0x2e>
   d6aba:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6abc:	f3af 8000 	nop.w
   d6ac0:	e7f2      	b.n	d6aa8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6ac2:	f7fe f813 	bl	d4aec <_Z12serialEvent1v>
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00000000 	.word	0x00000000
   d6acc:	000d4aed 	.word	0x000d4aed

000d6ad0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6ad0:	b508      	push	{r3, lr}
	serialEventRun();
   d6ad2:	f7ff ffdf 	bl	d6a94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ad6:	f7fe fca3 	bl	d5420 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6ada:	4b01      	ldr	r3, [pc, #4]	; (d6ae0 <_post_loop+0x10>)
   d6adc:	6018      	str	r0, [r3, #0]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	2003e708 	.word	0x2003e708

000d6ae4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ae4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ae6:	2300      	movs	r3, #0
   d6ae8:	9300      	str	r3, [sp, #0]
   d6aea:	461a      	mov	r2, r3
   d6aec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6af0:	f7fe fe20 	bl	d5734 <system_ctrl_set_result>
}
   d6af4:	b003      	add	sp, #12
   d6af6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6afc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6afc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6afe:	8843      	ldrh	r3, [r0, #2]
   d6b00:	2b0a      	cmp	r3, #10
   d6b02:	d008      	beq.n	d6b16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b04:	2b50      	cmp	r3, #80	; 0x50
   d6b06:	d109      	bne.n	d6b1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6b08:	4b09      	ldr	r3, [pc, #36]	; (d6b30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b0a:	681b      	ldr	r3, [r3, #0]
   d6b0c:	b13b      	cbz	r3, d6b1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6b0e:	b003      	add	sp, #12
   d6b10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6b14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6b16:	f7ff ffe5 	bl	d6ae4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6b1a:	e006      	b.n	d6b2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b1c:	2300      	movs	r3, #0
   d6b1e:	9300      	str	r3, [sp, #0]
   d6b20:	461a      	mov	r2, r3
   d6b22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b26:	f7fe fe05 	bl	d5734 <system_ctrl_set_result>
        break;
    }
}
   d6b2a:	b003      	add	sp, #12
   d6b2c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b30:	2003e704 	.word	0x2003e704

000d6b34 <module_user_init_hook>:

void module_user_init_hook()
{
   d6b34:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b36:	f7fe fc63 	bl	d5400 <HAL_RNG_GetRandomNumber>
   d6b3a:	4604      	mov	r4, r0
    srand(seed);
   d6b3c:	f001 f834 	bl	d7ba8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b40:	4b07      	ldr	r3, [pc, #28]	; (d6b60 <module_user_init_hook+0x2c>)
   d6b42:	b113      	cbz	r3, d6b4a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6b44:	4620      	mov	r0, r4
   d6b46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b4a:	2100      	movs	r1, #0
   d6b4c:	4804      	ldr	r0, [pc, #16]	; (d6b60 <module_user_init_hook+0x2c>)
   d6b4e:	f7fe fe2b 	bl	d57a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b52:	2100      	movs	r1, #0
   d6b54:	4803      	ldr	r0, [pc, #12]	; (d6b64 <module_user_init_hook+0x30>)
}
   d6b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b5a:	f7fe bde1 	b.w	d5720 <system_ctrl_set_app_request_handler>
   d6b5e:	bf00      	nop
   d6b60:	00000000 	.word	0x00000000
   d6b64:	000d6afd 	.word	0x000d6afd

000d6b68 <getPinMode>:
 * AN_OUTPUT = 7
 * PIN_MODE_NONE = 255
 */
PinMode getPinMode(uint16_t pin)
{
  return HAL_Get_Pin_Mode(pin);
   d6b68:	f7fe bc92 	b.w	d5490 <HAL_Get_Pin_Mode>

000d6b6c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6b6c:	b510      	push	{r4, lr}
   d6b6e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6b70:	480f      	ldr	r0, [pc, #60]	; (d6bb0 <pinAvailable+0x44>)
   d6b72:	f7ff fcfb 	bl	d656c <_ZN8SPIClass9isEnabledEv>
   d6b76:	b128      	cbz	r0, d6b84 <pinAvailable+0x18>
   d6b78:	f1a4 030b 	sub.w	r3, r4, #11
   d6b7c:	2b02      	cmp	r3, #2
   d6b7e:	d801      	bhi.n	d6b84 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6b80:	2000      	movs	r0, #0
   d6b82:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6b84:	f000 f898 	bl	d6cb8 <_Z19__fetch_global_Wirev>
   d6b88:	f7ff fa1f 	bl	d5fca <_ZN7TwoWire9isEnabledEv>
   d6b8c:	b108      	cbz	r0, d6b92 <pinAvailable+0x26>
   d6b8e:	2c01      	cmp	r4, #1
   d6b90:	d9f6      	bls.n	d6b80 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6b92:	f7ff fe93 	bl	d68bc <_Z22__fetch_global_Serial1v>
   d6b96:	f7ff fe8e 	bl	d68b6 <_ZN11USARTSerial9isEnabledEv>
   d6b9a:	b118      	cbz	r0, d6ba4 <pinAvailable+0x38>
   d6b9c:	f1a4 0309 	sub.w	r3, r4, #9
   d6ba0:	2b01      	cmp	r3, #1
   d6ba2:	d9ed      	bls.n	d6b80 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6ba4:	2c23      	cmp	r4, #35	; 0x23
   d6ba6:	bf8c      	ite	hi
   d6ba8:	2000      	movhi	r0, #0
   d6baa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6bac:	bd10      	pop	{r4, pc}
   d6bae:	bf00      	nop
   d6bb0:	2003e72c 	.word	0x2003e72c

000d6bb4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6bb4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6bb6:	b538      	push	{r3, r4, r5, lr}
   d6bb8:	4604      	mov	r4, r0
   d6bba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6bbc:	d80a      	bhi.n	d6bd4 <pinMode+0x20>
   d6bbe:	29ff      	cmp	r1, #255	; 0xff
   d6bc0:	d008      	beq.n	d6bd4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6bc2:	f7ff ffd3 	bl	d6b6c <pinAvailable>
   d6bc6:	b128      	cbz	r0, d6bd4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bc8:	4629      	mov	r1, r5
   d6bca:	4620      	mov	r0, r4
}
   d6bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bd0:	f7fe bc56 	b.w	d5480 <HAL_Pin_Mode>
   d6bd4:	bd38      	pop	{r3, r4, r5, pc}

000d6bd6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6bd6:	b538      	push	{r3, r4, r5, lr}
   d6bd8:	4604      	mov	r4, r0
   d6bda:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bdc:	f7fe fc58 	bl	d5490 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6be0:	28ff      	cmp	r0, #255	; 0xff
   d6be2:	d010      	beq.n	d6c06 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6be4:	2806      	cmp	r0, #6
   d6be6:	d804      	bhi.n	d6bf2 <digitalWrite+0x1c>
   d6be8:	234d      	movs	r3, #77	; 0x4d
   d6bea:	fa23 f000 	lsr.w	r0, r3, r0
   d6bee:	07c3      	lsls	r3, r0, #31
   d6bf0:	d409      	bmi.n	d6c06 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	f7ff ffba 	bl	d6b6c <pinAvailable>
   d6bf8:	b128      	cbz	r0, d6c06 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6bfa:	4629      	mov	r1, r5
   d6bfc:	4620      	mov	r0, r4
}
   d6bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c02:	f7fe bc4d 	b.w	d54a0 <HAL_GPIO_Write>
   d6c06:	bd38      	pop	{r3, r4, r5, pc}

000d6c08 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d6c08:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d6c0a:	4d1c      	ldr	r5, [pc, #112]	; (d6c7c <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d6c0c:	b089      	sub	sp, #36	; 0x24
   d6c0e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d6c10:	6820      	ldr	r0, [r4, #0]
   d6c12:	f7fe fbfd 	bl	d5410 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6c16:	f7fe fc03 	bl	d5420 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d6c1a:	682b      	ldr	r3, [r5, #0]
   d6c1c:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d6c1e:	1ac0      	subs	r0, r0, r3
   d6c20:	4290      	cmp	r0, r2
   d6c22:	d3f5      	bcc.n	d6c10 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d6c24:	6823      	ldr	r3, [r4, #0]
   d6c26:	b333      	cbz	r3, d6c76 <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d6c28:	68e3      	ldr	r3, [r4, #12]
   d6c2a:	b323      	cbz	r3, d6c76 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c2c:	1d25      	adds	r5, r4, #4
   d6c2e:	6923      	ldr	r3, [r4, #16]
   d6c30:	4628      	mov	r0, r5
   d6c32:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6c34:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6c36:	a904      	add	r1, sp, #16
   d6c38:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6c3a:	9302      	str	r3, [sp, #8]
   d6c3c:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6c3e:	f7fe fee6 	bl	d5a0e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c42:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6c44:	9a06      	ldr	r2, [sp, #24]
   d6c46:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c48:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6c4a:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c4c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6c4e:	9307      	str	r3, [sp, #28]
   d6c50:	4629      	mov	r1, r5
   d6c52:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6c54:	9203      	str	r2, [sp, #12]
   d6c56:	f7fe feda 	bl	d5a0e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c5a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6c5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c5e:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c60:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6c62:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c64:	a804      	add	r0, sp, #16
   d6c66:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c68:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6c6a:	9207      	str	r2, [sp, #28]
   d6c6c:	f7fd fdd4 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
   d6c70:	4668      	mov	r0, sp
   d6c72:	f7fd fdd1 	bl	d4818 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d6c76:	b009      	add	sp, #36	; 0x24
   d6c78:	bd30      	pop	{r4, r5, pc}
   d6c7a:	bf00      	nop
   d6c7c:	2003e708 	.word	0x2003e708

000d6c80 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d6c80:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d6c82:	f7ff ffc1 	bl	d6c08 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d6c86:	2000      	movs	r0, #0
}
   d6c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d6c8c:	f7fe bb60 	b.w	d5350 <os_thread_cleanup>

000d6c90 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6c90:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6c92:	4c07      	ldr	r4, [pc, #28]	; (d6cb0 <_Z21__fetch_global_EEPROMv+0x20>)
   d6c94:	6823      	ldr	r3, [r4, #0]
   d6c96:	07db      	lsls	r3, r3, #31
   d6c98:	d408      	bmi.n	d6cac <_Z21__fetch_global_EEPROMv+0x1c>
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	f7fd fa01 	bl	d40a2 <__cxa_guard_acquire>
   d6ca0:	b120      	cbz	r0, d6cac <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6ca2:	f7fe fbc5 	bl	d5430 <HAL_EEPROM_Init>
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	f7fd fa00 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6cac:	4801      	ldr	r0, [pc, #4]	; (d6cb4 <_Z21__fetch_global_EEPROMv+0x24>)
   d6cae:	bd10      	pop	{r4, pc}
   d6cb0:	2003e70c 	.word	0x2003e70c
   d6cb4:	2003e710 	.word	0x2003e710

000d6cb8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6cb8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6cba:	4d0b      	ldr	r5, [pc, #44]	; (d6ce8 <_Z19__fetch_global_Wirev+0x30>)
   d6cbc:	6829      	ldr	r1, [r5, #0]
   d6cbe:	f011 0401 	ands.w	r4, r1, #1
   d6cc2:	d10f      	bne.n	d6ce4 <_Z19__fetch_global_Wirev+0x2c>
   d6cc4:	4628      	mov	r0, r5
   d6cc6:	f7fd f9ec 	bl	d40a2 <__cxa_guard_acquire>
   d6cca:	b158      	cbz	r0, d6ce4 <_Z19__fetch_global_Wirev+0x2c>
   d6ccc:	4621      	mov	r1, r4
   d6cce:	4807      	ldr	r0, [pc, #28]	; (d6cec <_Z19__fetch_global_Wirev+0x34>)
   d6cd0:	f7ff f940 	bl	d5f54 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6cd4:	4628      	mov	r0, r5
   d6cd6:	f7fd f9e9 	bl	d40ac <__cxa_guard_release>
   d6cda:	4a05      	ldr	r2, [pc, #20]	; (d6cf0 <_Z19__fetch_global_Wirev+0x38>)
   d6cdc:	4905      	ldr	r1, [pc, #20]	; (d6cf4 <_Z19__fetch_global_Wirev+0x3c>)
   d6cde:	4803      	ldr	r0, [pc, #12]	; (d6cec <_Z19__fetch_global_Wirev+0x34>)
   d6ce0:	f000 f82c 	bl	d6d3c <__aeabi_atexit>
	return wire;
}
   d6ce4:	4801      	ldr	r0, [pc, #4]	; (d6cec <_Z19__fetch_global_Wirev+0x34>)
   d6ce6:	bd38      	pop	{r3, r4, r5, pc}
   d6ce8:	2003e714 	.word	0x2003e714
   d6cec:	2003e718 	.word	0x2003e718
   d6cf0:	2003e2f8 	.word	0x2003e2f8
   d6cf4:	000d5efd 	.word	0x000d5efd

000d6cf8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6cf8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6cfa:	4c0c      	ldr	r4, [pc, #48]	; (d6d2c <_GLOBAL__sub_I_SPI+0x34>)
   d6cfc:	4e0c      	ldr	r6, [pc, #48]	; (d6d30 <_GLOBAL__sub_I_SPI+0x38>)
   d6cfe:	4d0d      	ldr	r5, [pc, #52]	; (d6d34 <_GLOBAL__sub_I_SPI+0x3c>)
   d6d00:	2100      	movs	r1, #0
   d6d02:	4620      	mov	r0, r4
   d6d04:	f7ff fc1e 	bl	d6544 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d08:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d0a:	4c0b      	ldr	r4, [pc, #44]	; (d6d38 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6d0c:	4632      	mov	r2, r6
   d6d0e:	4629      	mov	r1, r5
   d6d10:	f000 f814 	bl	d6d3c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d14:	2101      	movs	r1, #1
   d6d16:	4620      	mov	r0, r4
   d6d18:	f7ff fc14 	bl	d6544 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d1c:	4632      	mov	r2, r6
   d6d1e:	4629      	mov	r1, r5
   d6d20:	4620      	mov	r0, r4
   d6d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6d26:	f000 b809 	b.w	d6d3c <__aeabi_atexit>
   d6d2a:	bf00      	nop
   d6d2c:	2003e72c 	.word	0x2003e72c
   d6d30:	2003e2f8 	.word	0x2003e2f8
   d6d34:	000d6535 	.word	0x000d6535
   d6d38:	2003e73c 	.word	0x2003e73c

000d6d3c <__aeabi_atexit>:
   d6d3c:	460b      	mov	r3, r1
   d6d3e:	4601      	mov	r1, r0
   d6d40:	4618      	mov	r0, r3
   d6d42:	f000 bf0f 	b.w	d7b64 <__cxa_atexit>

000d6d46 <_ZdlPvj>:
   d6d46:	f7fd b9a8 	b.w	d409a <_ZdlPv>
	...

000d6d4c <_ZSt15get_new_handlerv>:
   d6d4c:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <_ZSt15get_new_handlerv+0xc>)
   d6d4e:	6818      	ldr	r0, [r3, #0]
   d6d50:	f3bf 8f5f 	dmb	sy
   d6d54:	4770      	bx	lr
   d6d56:	bf00      	nop
   d6d58:	2003e74c 	.word	0x2003e74c

000d6d5c <_ZnwjRKSt9nothrow_t>:
   d6d5c:	b510      	push	{r4, lr}
   d6d5e:	2800      	cmp	r0, #0
   d6d60:	bf14      	ite	ne
   d6d62:	4604      	movne	r4, r0
   d6d64:	2401      	moveq	r4, #1
   d6d66:	4620      	mov	r0, r4
   d6d68:	f7fe fd76 	bl	d5858 <malloc>
   d6d6c:	b920      	cbnz	r0, d6d78 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d6e:	f7ff ffed 	bl	d6d4c <_ZSt15get_new_handlerv>
   d6d72:	b108      	cbz	r0, d6d78 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d74:	4780      	blx	r0
   d6d76:	e7f6      	b.n	d6d66 <_ZnwjRKSt9nothrow_t+0xa>
   d6d78:	bd10      	pop	{r4, pc}

000d6d7a <_ZSt25__throw_bad_function_callv>:
   d6d7a:	b508      	push	{r3, lr}
   d6d7c:	f7fe fd8c 	bl	d5898 <abort>

000d6d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6d80:	4b24      	ldr	r3, [pc, #144]	; (d6e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d0      	lsls	r0, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b22      	ldr	r3, [pc, #136]	; (d6e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d1      	lsls	r1, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4b20      	ldr	r3, [pc, #128]	; (d6e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6d9a:	681a      	ldr	r2, [r3, #0]
   d6d9c:	07d2      	lsls	r2, r2, #31
   d6d9e:	bf5c      	itt	pl
   d6da0:	2201      	movpl	r2, #1
   d6da2:	601a      	strpl	r2, [r3, #0]
   d6da4:	4b1e      	ldr	r3, [pc, #120]	; (d6e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6da6:	681a      	ldr	r2, [r3, #0]
   d6da8:	07d0      	lsls	r0, r2, #31
   d6daa:	bf5c      	itt	pl
   d6dac:	2201      	movpl	r2, #1
   d6dae:	601a      	strpl	r2, [r3, #0]
   d6db0:	4b1c      	ldr	r3, [pc, #112]	; (d6e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6db2:	681a      	ldr	r2, [r3, #0]
   d6db4:	07d1      	lsls	r1, r2, #31
   d6db6:	bf5c      	itt	pl
   d6db8:	2201      	movpl	r2, #1
   d6dba:	601a      	strpl	r2, [r3, #0]
   d6dbc:	4b1a      	ldr	r3, [pc, #104]	; (d6e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6dbe:	681a      	ldr	r2, [r3, #0]
   d6dc0:	07d2      	lsls	r2, r2, #31
   d6dc2:	bf5c      	itt	pl
   d6dc4:	2201      	movpl	r2, #1
   d6dc6:	601a      	strpl	r2, [r3, #0]
   d6dc8:	4b18      	ldr	r3, [pc, #96]	; (d6e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6dca:	681a      	ldr	r2, [r3, #0]
   d6dcc:	07d0      	lsls	r0, r2, #31
   d6dce:	bf5c      	itt	pl
   d6dd0:	2201      	movpl	r2, #1
   d6dd2:	601a      	strpl	r2, [r3, #0]
   d6dd4:	4b16      	ldr	r3, [pc, #88]	; (d6e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6dd6:	681a      	ldr	r2, [r3, #0]
   d6dd8:	07d1      	lsls	r1, r2, #31
   d6dda:	bf5c      	itt	pl
   d6ddc:	2201      	movpl	r2, #1
   d6dde:	601a      	strpl	r2, [r3, #0]
   d6de0:	4b14      	ldr	r3, [pc, #80]	; (d6e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6de2:	681a      	ldr	r2, [r3, #0]
   d6de4:	07d2      	lsls	r2, r2, #31
   d6de6:	bf5c      	itt	pl
   d6de8:	2201      	movpl	r2, #1
   d6dea:	601a      	strpl	r2, [r3, #0]
   d6dec:	4b12      	ldr	r3, [pc, #72]	; (d6e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6dee:	681a      	ldr	r2, [r3, #0]
   d6df0:	07d0      	lsls	r0, r2, #31
   d6df2:	bf5c      	itt	pl
   d6df4:	2201      	movpl	r2, #1
   d6df6:	601a      	strpl	r2, [r3, #0]
   d6df8:	4b10      	ldr	r3, [pc, #64]	; (d6e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6dfa:	681a      	ldr	r2, [r3, #0]
   d6dfc:	07d1      	lsls	r1, r2, #31
   d6dfe:	bf5c      	itt	pl
   d6e00:	2201      	movpl	r2, #1
   d6e02:	601a      	strpl	r2, [r3, #0]
   d6e04:	4b0e      	ldr	r3, [pc, #56]	; (d6e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6e06:	681a      	ldr	r2, [r3, #0]
   d6e08:	07d2      	lsls	r2, r2, #31
   d6e0a:	bf5c      	itt	pl
   d6e0c:	2201      	movpl	r2, #1
   d6e0e:	601a      	strpl	r2, [r3, #0]
   d6e10:	4770      	bx	lr
   d6e12:	bf00      	nop
   d6e14:	2003e77c 	.word	0x2003e77c
   d6e18:	2003e778 	.word	0x2003e778
   d6e1c:	2003e774 	.word	0x2003e774
   d6e20:	2003e770 	.word	0x2003e770
   d6e24:	2003e76c 	.word	0x2003e76c
   d6e28:	2003e768 	.word	0x2003e768
   d6e2c:	2003e764 	.word	0x2003e764
   d6e30:	2003e760 	.word	0x2003e760
   d6e34:	2003e75c 	.word	0x2003e75c
   d6e38:	2003e758 	.word	0x2003e758
   d6e3c:	2003e754 	.word	0x2003e754
   d6e40:	2003e750 	.word	0x2003e750

000d6e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e44:	4b18      	ldr	r3, [pc, #96]	; (d6ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e46:	681a      	ldr	r2, [r3, #0]
   d6e48:	07d1      	lsls	r1, r2, #31
   d6e4a:	bf5c      	itt	pl
   d6e4c:	2201      	movpl	r2, #1
   d6e4e:	601a      	strpl	r2, [r3, #0]
   d6e50:	4b16      	ldr	r3, [pc, #88]	; (d6eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e52:	681a      	ldr	r2, [r3, #0]
   d6e54:	07d2      	lsls	r2, r2, #31
   d6e56:	bf5c      	itt	pl
   d6e58:	2201      	movpl	r2, #1
   d6e5a:	601a      	strpl	r2, [r3, #0]
   d6e5c:	4b14      	ldr	r3, [pc, #80]	; (d6eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e5e:	681a      	ldr	r2, [r3, #0]
   d6e60:	07d0      	lsls	r0, r2, #31
   d6e62:	bf5c      	itt	pl
   d6e64:	2201      	movpl	r2, #1
   d6e66:	601a      	strpl	r2, [r3, #0]
   d6e68:	4b12      	ldr	r3, [pc, #72]	; (d6eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e6a:	681a      	ldr	r2, [r3, #0]
   d6e6c:	07d1      	lsls	r1, r2, #31
   d6e6e:	bf5c      	itt	pl
   d6e70:	2201      	movpl	r2, #1
   d6e72:	601a      	strpl	r2, [r3, #0]
   d6e74:	4b10      	ldr	r3, [pc, #64]	; (d6eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e76:	681a      	ldr	r2, [r3, #0]
   d6e78:	07d2      	lsls	r2, r2, #31
   d6e7a:	bf5c      	itt	pl
   d6e7c:	2201      	movpl	r2, #1
   d6e7e:	601a      	strpl	r2, [r3, #0]
   d6e80:	4b0e      	ldr	r3, [pc, #56]	; (d6ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e82:	681a      	ldr	r2, [r3, #0]
   d6e84:	07d0      	lsls	r0, r2, #31
   d6e86:	bf5c      	itt	pl
   d6e88:	2201      	movpl	r2, #1
   d6e8a:	601a      	strpl	r2, [r3, #0]
   d6e8c:	4b0c      	ldr	r3, [pc, #48]	; (d6ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e8e:	681a      	ldr	r2, [r3, #0]
   d6e90:	07d1      	lsls	r1, r2, #31
   d6e92:	bf5c      	itt	pl
   d6e94:	2201      	movpl	r2, #1
   d6e96:	601a      	strpl	r2, [r3, #0]
   d6e98:	4b0a      	ldr	r3, [pc, #40]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e9a:	681a      	ldr	r2, [r3, #0]
   d6e9c:	07d2      	lsls	r2, r2, #31
   d6e9e:	bf5c      	itt	pl
   d6ea0:	2201      	movpl	r2, #1
   d6ea2:	601a      	strpl	r2, [r3, #0]
   d6ea4:	4770      	bx	lr
   d6ea6:	bf00      	nop
   d6ea8:	2003e79c 	.word	0x2003e79c
   d6eac:	2003e798 	.word	0x2003e798
   d6eb0:	2003e794 	.word	0x2003e794
   d6eb4:	2003e790 	.word	0x2003e790
   d6eb8:	2003e78c 	.word	0x2003e78c
   d6ebc:	2003e788 	.word	0x2003e788
   d6ec0:	2003e784 	.word	0x2003e784
   d6ec4:	2003e780 	.word	0x2003e780

000d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6ec8:	4b18      	ldr	r3, [pc, #96]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6eca:	681a      	ldr	r2, [r3, #0]
   d6ecc:	07d1      	lsls	r1, r2, #31
   d6ece:	bf5c      	itt	pl
   d6ed0:	2201      	movpl	r2, #1
   d6ed2:	601a      	strpl	r2, [r3, #0]
   d6ed4:	4b16      	ldr	r3, [pc, #88]	; (d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	07d2      	lsls	r2, r2, #31
   d6eda:	bf5c      	itt	pl
   d6edc:	2201      	movpl	r2, #1
   d6ede:	601a      	strpl	r2, [r3, #0]
   d6ee0:	4b14      	ldr	r3, [pc, #80]	; (d6f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d0      	lsls	r0, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b12      	ldr	r3, [pc, #72]	; (d6f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d1      	lsls	r1, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b10      	ldr	r3, [pc, #64]	; (d6f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d2      	lsls	r2, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b0e      	ldr	r3, [pc, #56]	; (d6f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d0      	lsls	r0, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b0c      	ldr	r3, [pc, #48]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d1      	lsls	r1, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b0a      	ldr	r3, [pc, #40]	; (d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d2      	lsls	r2, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4770      	bx	lr
   d6f2a:	bf00      	nop
   d6f2c:	2003e7bc 	.word	0x2003e7bc
   d6f30:	2003e7b8 	.word	0x2003e7b8
   d6f34:	2003e7b4 	.word	0x2003e7b4
   d6f38:	2003e7b0 	.word	0x2003e7b0
   d6f3c:	2003e7ac 	.word	0x2003e7ac
   d6f40:	2003e7a8 	.word	0x2003e7a8
   d6f44:	2003e7a4 	.word	0x2003e7a4
   d6f48:	2003e7a0 	.word	0x2003e7a0

000d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6f4c:	4b24      	ldr	r3, [pc, #144]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6f4e:	681a      	ldr	r2, [r3, #0]
   d6f50:	07d0      	lsls	r0, r2, #31
   d6f52:	bf5c      	itt	pl
   d6f54:	2201      	movpl	r2, #1
   d6f56:	601a      	strpl	r2, [r3, #0]
   d6f58:	4b22      	ldr	r3, [pc, #136]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6f5a:	681a      	ldr	r2, [r3, #0]
   d6f5c:	07d1      	lsls	r1, r2, #31
   d6f5e:	bf5c      	itt	pl
   d6f60:	2201      	movpl	r2, #1
   d6f62:	601a      	strpl	r2, [r3, #0]
   d6f64:	4b20      	ldr	r3, [pc, #128]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f66:	681a      	ldr	r2, [r3, #0]
   d6f68:	07d2      	lsls	r2, r2, #31
   d6f6a:	bf5c      	itt	pl
   d6f6c:	2201      	movpl	r2, #1
   d6f6e:	601a      	strpl	r2, [r3, #0]
   d6f70:	4b1e      	ldr	r3, [pc, #120]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f72:	681a      	ldr	r2, [r3, #0]
   d6f74:	07d0      	lsls	r0, r2, #31
   d6f76:	bf5c      	itt	pl
   d6f78:	2201      	movpl	r2, #1
   d6f7a:	601a      	strpl	r2, [r3, #0]
   d6f7c:	4b1c      	ldr	r3, [pc, #112]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f7e:	681a      	ldr	r2, [r3, #0]
   d6f80:	07d1      	lsls	r1, r2, #31
   d6f82:	bf5c      	itt	pl
   d6f84:	2201      	movpl	r2, #1
   d6f86:	601a      	strpl	r2, [r3, #0]
   d6f88:	4b1a      	ldr	r3, [pc, #104]	; (d6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f8a:	681a      	ldr	r2, [r3, #0]
   d6f8c:	07d2      	lsls	r2, r2, #31
   d6f8e:	bf5c      	itt	pl
   d6f90:	2201      	movpl	r2, #1
   d6f92:	601a      	strpl	r2, [r3, #0]
   d6f94:	4b18      	ldr	r3, [pc, #96]	; (d6ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f96:	681a      	ldr	r2, [r3, #0]
   d6f98:	07d0      	lsls	r0, r2, #31
   d6f9a:	bf5c      	itt	pl
   d6f9c:	2201      	movpl	r2, #1
   d6f9e:	601a      	strpl	r2, [r3, #0]
   d6fa0:	4b16      	ldr	r3, [pc, #88]	; (d6ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6fa2:	681a      	ldr	r2, [r3, #0]
   d6fa4:	07d1      	lsls	r1, r2, #31
   d6fa6:	bf5c      	itt	pl
   d6fa8:	2201      	movpl	r2, #1
   d6faa:	601a      	strpl	r2, [r3, #0]
   d6fac:	4b14      	ldr	r3, [pc, #80]	; (d7000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6fae:	681a      	ldr	r2, [r3, #0]
   d6fb0:	07d2      	lsls	r2, r2, #31
   d6fb2:	bf5c      	itt	pl
   d6fb4:	2201      	movpl	r2, #1
   d6fb6:	601a      	strpl	r2, [r3, #0]
   d6fb8:	4b12      	ldr	r3, [pc, #72]	; (d7004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6fba:	681a      	ldr	r2, [r3, #0]
   d6fbc:	07d0      	lsls	r0, r2, #31
   d6fbe:	bf5c      	itt	pl
   d6fc0:	2201      	movpl	r2, #1
   d6fc2:	601a      	strpl	r2, [r3, #0]
   d6fc4:	4b10      	ldr	r3, [pc, #64]	; (d7008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6fc6:	681a      	ldr	r2, [r3, #0]
   d6fc8:	07d1      	lsls	r1, r2, #31
   d6fca:	bf5c      	itt	pl
   d6fcc:	2201      	movpl	r2, #1
   d6fce:	601a      	strpl	r2, [r3, #0]
   d6fd0:	4b0e      	ldr	r3, [pc, #56]	; (d700c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6fd2:	681a      	ldr	r2, [r3, #0]
   d6fd4:	07d2      	lsls	r2, r2, #31
   d6fd6:	bf5c      	itt	pl
   d6fd8:	2201      	movpl	r2, #1
   d6fda:	601a      	strpl	r2, [r3, #0]
   d6fdc:	4770      	bx	lr
   d6fde:	bf00      	nop
   d6fe0:	2003e7ec 	.word	0x2003e7ec
   d6fe4:	2003e7e8 	.word	0x2003e7e8
   d6fe8:	2003e7e4 	.word	0x2003e7e4
   d6fec:	2003e7e0 	.word	0x2003e7e0
   d6ff0:	2003e7dc 	.word	0x2003e7dc
   d6ff4:	2003e7d8 	.word	0x2003e7d8
   d6ff8:	2003e7d4 	.word	0x2003e7d4
   d6ffc:	2003e7d0 	.word	0x2003e7d0
   d7000:	2003e7cc 	.word	0x2003e7cc
   d7004:	2003e7c8 	.word	0x2003e7c8
   d7008:	2003e7c4 	.word	0x2003e7c4
   d700c:	2003e7c0 	.word	0x2003e7c0

000d7010 <__aeabi_drsub>:
   d7010:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7014:	e002      	b.n	d701c <__adddf3>
   d7016:	bf00      	nop

000d7018 <__aeabi_dsub>:
   d7018:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d701c <__adddf3>:
   d701c:	b530      	push	{r4, r5, lr}
   d701e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7022:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7026:	ea94 0f05 	teq	r4, r5
   d702a:	bf08      	it	eq
   d702c:	ea90 0f02 	teqeq	r0, r2
   d7030:	bf1f      	itttt	ne
   d7032:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7036:	ea55 0c02 	orrsne.w	ip, r5, r2
   d703a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d703e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7042:	f000 80e2 	beq.w	d720a <__adddf3+0x1ee>
   d7046:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d704a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d704e:	bfb8      	it	lt
   d7050:	426d      	neglt	r5, r5
   d7052:	dd0c      	ble.n	d706e <__adddf3+0x52>
   d7054:	442c      	add	r4, r5
   d7056:	ea80 0202 	eor.w	r2, r0, r2
   d705a:	ea81 0303 	eor.w	r3, r1, r3
   d705e:	ea82 0000 	eor.w	r0, r2, r0
   d7062:	ea83 0101 	eor.w	r1, r3, r1
   d7066:	ea80 0202 	eor.w	r2, r0, r2
   d706a:	ea81 0303 	eor.w	r3, r1, r3
   d706e:	2d36      	cmp	r5, #54	; 0x36
   d7070:	bf88      	it	hi
   d7072:	bd30      	pophi	{r4, r5, pc}
   d7074:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7078:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d707c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7080:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7084:	d002      	beq.n	d708c <__adddf3+0x70>
   d7086:	4240      	negs	r0, r0
   d7088:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d708c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7090:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7094:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7098:	d002      	beq.n	d70a0 <__adddf3+0x84>
   d709a:	4252      	negs	r2, r2
   d709c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d70a0:	ea94 0f05 	teq	r4, r5
   d70a4:	f000 80a7 	beq.w	d71f6 <__adddf3+0x1da>
   d70a8:	f1a4 0401 	sub.w	r4, r4, #1
   d70ac:	f1d5 0e20 	rsbs	lr, r5, #32
   d70b0:	db0d      	blt.n	d70ce <__adddf3+0xb2>
   d70b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d70b6:	fa22 f205 	lsr.w	r2, r2, r5
   d70ba:	1880      	adds	r0, r0, r2
   d70bc:	f141 0100 	adc.w	r1, r1, #0
   d70c0:	fa03 f20e 	lsl.w	r2, r3, lr
   d70c4:	1880      	adds	r0, r0, r2
   d70c6:	fa43 f305 	asr.w	r3, r3, r5
   d70ca:	4159      	adcs	r1, r3
   d70cc:	e00e      	b.n	d70ec <__adddf3+0xd0>
   d70ce:	f1a5 0520 	sub.w	r5, r5, #32
   d70d2:	f10e 0e20 	add.w	lr, lr, #32
   d70d6:	2a01      	cmp	r2, #1
   d70d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d70dc:	bf28      	it	cs
   d70de:	f04c 0c02 	orrcs.w	ip, ip, #2
   d70e2:	fa43 f305 	asr.w	r3, r3, r5
   d70e6:	18c0      	adds	r0, r0, r3
   d70e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d70ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d70f0:	d507      	bpl.n	d7102 <__adddf3+0xe6>
   d70f2:	f04f 0e00 	mov.w	lr, #0
   d70f6:	f1dc 0c00 	rsbs	ip, ip, #0
   d70fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d70fe:	eb6e 0101 	sbc.w	r1, lr, r1
   d7102:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7106:	d31b      	bcc.n	d7140 <__adddf3+0x124>
   d7108:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d710c:	d30c      	bcc.n	d7128 <__adddf3+0x10c>
   d710e:	0849      	lsrs	r1, r1, #1
   d7110:	ea5f 0030 	movs.w	r0, r0, rrx
   d7114:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7118:	f104 0401 	add.w	r4, r4, #1
   d711c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7120:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7124:	f080 809a 	bcs.w	d725c <__adddf3+0x240>
   d7128:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d712c:	bf08      	it	eq
   d712e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7132:	f150 0000 	adcs.w	r0, r0, #0
   d7136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d713a:	ea41 0105 	orr.w	r1, r1, r5
   d713e:	bd30      	pop	{r4, r5, pc}
   d7140:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7144:	4140      	adcs	r0, r0
   d7146:	eb41 0101 	adc.w	r1, r1, r1
   d714a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d714e:	f1a4 0401 	sub.w	r4, r4, #1
   d7152:	d1e9      	bne.n	d7128 <__adddf3+0x10c>
   d7154:	f091 0f00 	teq	r1, #0
   d7158:	bf04      	itt	eq
   d715a:	4601      	moveq	r1, r0
   d715c:	2000      	moveq	r0, #0
   d715e:	fab1 f381 	clz	r3, r1
   d7162:	bf08      	it	eq
   d7164:	3320      	addeq	r3, #32
   d7166:	f1a3 030b 	sub.w	r3, r3, #11
   d716a:	f1b3 0220 	subs.w	r2, r3, #32
   d716e:	da0c      	bge.n	d718a <__adddf3+0x16e>
   d7170:	320c      	adds	r2, #12
   d7172:	dd08      	ble.n	d7186 <__adddf3+0x16a>
   d7174:	f102 0c14 	add.w	ip, r2, #20
   d7178:	f1c2 020c 	rsb	r2, r2, #12
   d717c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7180:	fa21 f102 	lsr.w	r1, r1, r2
   d7184:	e00c      	b.n	d71a0 <__adddf3+0x184>
   d7186:	f102 0214 	add.w	r2, r2, #20
   d718a:	bfd8      	it	le
   d718c:	f1c2 0c20 	rsble	ip, r2, #32
   d7190:	fa01 f102 	lsl.w	r1, r1, r2
   d7194:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7198:	bfdc      	itt	le
   d719a:	ea41 010c 	orrle.w	r1, r1, ip
   d719e:	4090      	lslle	r0, r2
   d71a0:	1ae4      	subs	r4, r4, r3
   d71a2:	bfa2      	ittt	ge
   d71a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d71a8:	4329      	orrge	r1, r5
   d71aa:	bd30      	popge	{r4, r5, pc}
   d71ac:	ea6f 0404 	mvn.w	r4, r4
   d71b0:	3c1f      	subs	r4, #31
   d71b2:	da1c      	bge.n	d71ee <__adddf3+0x1d2>
   d71b4:	340c      	adds	r4, #12
   d71b6:	dc0e      	bgt.n	d71d6 <__adddf3+0x1ba>
   d71b8:	f104 0414 	add.w	r4, r4, #20
   d71bc:	f1c4 0220 	rsb	r2, r4, #32
   d71c0:	fa20 f004 	lsr.w	r0, r0, r4
   d71c4:	fa01 f302 	lsl.w	r3, r1, r2
   d71c8:	ea40 0003 	orr.w	r0, r0, r3
   d71cc:	fa21 f304 	lsr.w	r3, r1, r4
   d71d0:	ea45 0103 	orr.w	r1, r5, r3
   d71d4:	bd30      	pop	{r4, r5, pc}
   d71d6:	f1c4 040c 	rsb	r4, r4, #12
   d71da:	f1c4 0220 	rsb	r2, r4, #32
   d71de:	fa20 f002 	lsr.w	r0, r0, r2
   d71e2:	fa01 f304 	lsl.w	r3, r1, r4
   d71e6:	ea40 0003 	orr.w	r0, r0, r3
   d71ea:	4629      	mov	r1, r5
   d71ec:	bd30      	pop	{r4, r5, pc}
   d71ee:	fa21 f004 	lsr.w	r0, r1, r4
   d71f2:	4629      	mov	r1, r5
   d71f4:	bd30      	pop	{r4, r5, pc}
   d71f6:	f094 0f00 	teq	r4, #0
   d71fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d71fe:	bf06      	itte	eq
   d7200:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7204:	3401      	addeq	r4, #1
   d7206:	3d01      	subne	r5, #1
   d7208:	e74e      	b.n	d70a8 <__adddf3+0x8c>
   d720a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d720e:	bf18      	it	ne
   d7210:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7214:	d029      	beq.n	d726a <__adddf3+0x24e>
   d7216:	ea94 0f05 	teq	r4, r5
   d721a:	bf08      	it	eq
   d721c:	ea90 0f02 	teqeq	r0, r2
   d7220:	d005      	beq.n	d722e <__adddf3+0x212>
   d7222:	ea54 0c00 	orrs.w	ip, r4, r0
   d7226:	bf04      	itt	eq
   d7228:	4619      	moveq	r1, r3
   d722a:	4610      	moveq	r0, r2
   d722c:	bd30      	pop	{r4, r5, pc}
   d722e:	ea91 0f03 	teq	r1, r3
   d7232:	bf1e      	ittt	ne
   d7234:	2100      	movne	r1, #0
   d7236:	2000      	movne	r0, #0
   d7238:	bd30      	popne	{r4, r5, pc}
   d723a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d723e:	d105      	bne.n	d724c <__adddf3+0x230>
   d7240:	0040      	lsls	r0, r0, #1
   d7242:	4149      	adcs	r1, r1
   d7244:	bf28      	it	cs
   d7246:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d724a:	bd30      	pop	{r4, r5, pc}
   d724c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7250:	bf3c      	itt	cc
   d7252:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7256:	bd30      	popcc	{r4, r5, pc}
   d7258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d725c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7260:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7264:	f04f 0000 	mov.w	r0, #0
   d7268:	bd30      	pop	{r4, r5, pc}
   d726a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d726e:	bf1a      	itte	ne
   d7270:	4619      	movne	r1, r3
   d7272:	4610      	movne	r0, r2
   d7274:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7278:	bf1c      	itt	ne
   d727a:	460b      	movne	r3, r1
   d727c:	4602      	movne	r2, r0
   d727e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7282:	bf06      	itte	eq
   d7284:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7288:	ea91 0f03 	teqeq	r1, r3
   d728c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7290:	bd30      	pop	{r4, r5, pc}
   d7292:	bf00      	nop

000d7294 <__aeabi_ui2d>:
   d7294:	f090 0f00 	teq	r0, #0
   d7298:	bf04      	itt	eq
   d729a:	2100      	moveq	r1, #0
   d729c:	4770      	bxeq	lr
   d729e:	b530      	push	{r4, r5, lr}
   d72a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d72a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d72a8:	f04f 0500 	mov.w	r5, #0
   d72ac:	f04f 0100 	mov.w	r1, #0
   d72b0:	e750      	b.n	d7154 <__adddf3+0x138>
   d72b2:	bf00      	nop

000d72b4 <__aeabi_i2d>:
   d72b4:	f090 0f00 	teq	r0, #0
   d72b8:	bf04      	itt	eq
   d72ba:	2100      	moveq	r1, #0
   d72bc:	4770      	bxeq	lr
   d72be:	b530      	push	{r4, r5, lr}
   d72c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d72c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d72c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d72cc:	bf48      	it	mi
   d72ce:	4240      	negmi	r0, r0
   d72d0:	f04f 0100 	mov.w	r1, #0
   d72d4:	e73e      	b.n	d7154 <__adddf3+0x138>
   d72d6:	bf00      	nop

000d72d8 <__aeabi_f2d>:
   d72d8:	0042      	lsls	r2, r0, #1
   d72da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d72de:	ea4f 0131 	mov.w	r1, r1, rrx
   d72e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d72e6:	bf1f      	itttt	ne
   d72e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d72ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d72f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d72f4:	4770      	bxne	lr
   d72f6:	f092 0f00 	teq	r2, #0
   d72fa:	bf14      	ite	ne
   d72fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7300:	4770      	bxeq	lr
   d7302:	b530      	push	{r4, r5, lr}
   d7304:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d730c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7310:	e720      	b.n	d7154 <__adddf3+0x138>
   d7312:	bf00      	nop

000d7314 <__aeabi_ul2d>:
   d7314:	ea50 0201 	orrs.w	r2, r0, r1
   d7318:	bf08      	it	eq
   d731a:	4770      	bxeq	lr
   d731c:	b530      	push	{r4, r5, lr}
   d731e:	f04f 0500 	mov.w	r5, #0
   d7322:	e00a      	b.n	d733a <__aeabi_l2d+0x16>

000d7324 <__aeabi_l2d>:
   d7324:	ea50 0201 	orrs.w	r2, r0, r1
   d7328:	bf08      	it	eq
   d732a:	4770      	bxeq	lr
   d732c:	b530      	push	{r4, r5, lr}
   d732e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7332:	d502      	bpl.n	d733a <__aeabi_l2d+0x16>
   d7334:	4240      	negs	r0, r0
   d7336:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d733a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d733e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7342:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7346:	f43f aedc 	beq.w	d7102 <__adddf3+0xe6>
   d734a:	f04f 0203 	mov.w	r2, #3
   d734e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7352:	bf18      	it	ne
   d7354:	3203      	addne	r2, #3
   d7356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d735a:	bf18      	it	ne
   d735c:	3203      	addne	r2, #3
   d735e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7362:	f1c2 0320 	rsb	r3, r2, #32
   d7366:	fa00 fc03 	lsl.w	ip, r0, r3
   d736a:	fa20 f002 	lsr.w	r0, r0, r2
   d736e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7372:	ea40 000e 	orr.w	r0, r0, lr
   d7376:	fa21 f102 	lsr.w	r1, r1, r2
   d737a:	4414      	add	r4, r2
   d737c:	e6c1      	b.n	d7102 <__adddf3+0xe6>
   d737e:	bf00      	nop

000d7380 <__aeabi_dmul>:
   d7380:	b570      	push	{r4, r5, r6, lr}
   d7382:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d738a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d738e:	bf1d      	ittte	ne
   d7390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7394:	ea94 0f0c 	teqne	r4, ip
   d7398:	ea95 0f0c 	teqne	r5, ip
   d739c:	f000 f8de 	bleq	d755c <__aeabi_dmul+0x1dc>
   d73a0:	442c      	add	r4, r5
   d73a2:	ea81 0603 	eor.w	r6, r1, r3
   d73a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d73aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d73ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d73b2:	bf18      	it	ne
   d73b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d73b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d73bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d73c0:	d038      	beq.n	d7434 <__aeabi_dmul+0xb4>
   d73c2:	fba0 ce02 	umull	ip, lr, r0, r2
   d73c6:	f04f 0500 	mov.w	r5, #0
   d73ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   d73ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d73d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d73d6:	f04f 0600 	mov.w	r6, #0
   d73da:	fbe1 5603 	umlal	r5, r6, r1, r3
   d73de:	f09c 0f00 	teq	ip, #0
   d73e2:	bf18      	it	ne
   d73e4:	f04e 0e01 	orrne.w	lr, lr, #1
   d73e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d73ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d73f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d73f4:	d204      	bcs.n	d7400 <__aeabi_dmul+0x80>
   d73f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d73fa:	416d      	adcs	r5, r5
   d73fc:	eb46 0606 	adc.w	r6, r6, r6
   d7400:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7404:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7408:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d740c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7410:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7414:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7418:	bf88      	it	hi
   d741a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d741e:	d81e      	bhi.n	d745e <__aeabi_dmul+0xde>
   d7420:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7424:	bf08      	it	eq
   d7426:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d742a:	f150 0000 	adcs.w	r0, r0, #0
   d742e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7432:	bd70      	pop	{r4, r5, r6, pc}
   d7434:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7438:	ea46 0101 	orr.w	r1, r6, r1
   d743c:	ea40 0002 	orr.w	r0, r0, r2
   d7440:	ea81 0103 	eor.w	r1, r1, r3
   d7444:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7448:	bfc2      	ittt	gt
   d744a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d744e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7452:	bd70      	popgt	{r4, r5, r6, pc}
   d7454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7458:	f04f 0e00 	mov.w	lr, #0
   d745c:	3c01      	subs	r4, #1
   d745e:	f300 80ab 	bgt.w	d75b8 <__aeabi_dmul+0x238>
   d7462:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7466:	bfde      	ittt	le
   d7468:	2000      	movle	r0, #0
   d746a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d746e:	bd70      	pople	{r4, r5, r6, pc}
   d7470:	f1c4 0400 	rsb	r4, r4, #0
   d7474:	3c20      	subs	r4, #32
   d7476:	da35      	bge.n	d74e4 <__aeabi_dmul+0x164>
   d7478:	340c      	adds	r4, #12
   d747a:	dc1b      	bgt.n	d74b4 <__aeabi_dmul+0x134>
   d747c:	f104 0414 	add.w	r4, r4, #20
   d7480:	f1c4 0520 	rsb	r5, r4, #32
   d7484:	fa00 f305 	lsl.w	r3, r0, r5
   d7488:	fa20 f004 	lsr.w	r0, r0, r4
   d748c:	fa01 f205 	lsl.w	r2, r1, r5
   d7490:	ea40 0002 	orr.w	r0, r0, r2
   d7494:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d749c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d74a0:	fa21 f604 	lsr.w	r6, r1, r4
   d74a4:	eb42 0106 	adc.w	r1, r2, r6
   d74a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74ac:	bf08      	it	eq
   d74ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d74b2:	bd70      	pop	{r4, r5, r6, pc}
   d74b4:	f1c4 040c 	rsb	r4, r4, #12
   d74b8:	f1c4 0520 	rsb	r5, r4, #32
   d74bc:	fa00 f304 	lsl.w	r3, r0, r4
   d74c0:	fa20 f005 	lsr.w	r0, r0, r5
   d74c4:	fa01 f204 	lsl.w	r2, r1, r4
   d74c8:	ea40 0002 	orr.w	r0, r0, r2
   d74cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d74d4:	f141 0100 	adc.w	r1, r1, #0
   d74d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74dc:	bf08      	it	eq
   d74de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d74e2:	bd70      	pop	{r4, r5, r6, pc}
   d74e4:	f1c4 0520 	rsb	r5, r4, #32
   d74e8:	fa00 f205 	lsl.w	r2, r0, r5
   d74ec:	ea4e 0e02 	orr.w	lr, lr, r2
   d74f0:	fa20 f304 	lsr.w	r3, r0, r4
   d74f4:	fa01 f205 	lsl.w	r2, r1, r5
   d74f8:	ea43 0302 	orr.w	r3, r3, r2
   d74fc:	fa21 f004 	lsr.w	r0, r1, r4
   d7500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7504:	fa21 f204 	lsr.w	r2, r1, r4
   d7508:	ea20 0002 	bic.w	r0, r0, r2
   d750c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7514:	bf08      	it	eq
   d7516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d751a:	bd70      	pop	{r4, r5, r6, pc}
   d751c:	f094 0f00 	teq	r4, #0
   d7520:	d10f      	bne.n	d7542 <__aeabi_dmul+0x1c2>
   d7522:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7526:	0040      	lsls	r0, r0, #1
   d7528:	eb41 0101 	adc.w	r1, r1, r1
   d752c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7530:	bf08      	it	eq
   d7532:	3c01      	subeq	r4, #1
   d7534:	d0f7      	beq.n	d7526 <__aeabi_dmul+0x1a6>
   d7536:	ea41 0106 	orr.w	r1, r1, r6
   d753a:	f095 0f00 	teq	r5, #0
   d753e:	bf18      	it	ne
   d7540:	4770      	bxne	lr
   d7542:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7546:	0052      	lsls	r2, r2, #1
   d7548:	eb43 0303 	adc.w	r3, r3, r3
   d754c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7550:	bf08      	it	eq
   d7552:	3d01      	subeq	r5, #1
   d7554:	d0f7      	beq.n	d7546 <__aeabi_dmul+0x1c6>
   d7556:	ea43 0306 	orr.w	r3, r3, r6
   d755a:	4770      	bx	lr
   d755c:	ea94 0f0c 	teq	r4, ip
   d7560:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7564:	bf18      	it	ne
   d7566:	ea95 0f0c 	teqne	r5, ip
   d756a:	d00c      	beq.n	d7586 <__aeabi_dmul+0x206>
   d756c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7570:	bf18      	it	ne
   d7572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7576:	d1d1      	bne.n	d751c <__aeabi_dmul+0x19c>
   d7578:	ea81 0103 	eor.w	r1, r1, r3
   d757c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7580:	f04f 0000 	mov.w	r0, #0
   d7584:	bd70      	pop	{r4, r5, r6, pc}
   d7586:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d758a:	bf06      	itte	eq
   d758c:	4610      	moveq	r0, r2
   d758e:	4619      	moveq	r1, r3
   d7590:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7594:	d019      	beq.n	d75ca <__aeabi_dmul+0x24a>
   d7596:	ea94 0f0c 	teq	r4, ip
   d759a:	d102      	bne.n	d75a2 <__aeabi_dmul+0x222>
   d759c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d75a0:	d113      	bne.n	d75ca <__aeabi_dmul+0x24a>
   d75a2:	ea95 0f0c 	teq	r5, ip
   d75a6:	d105      	bne.n	d75b4 <__aeabi_dmul+0x234>
   d75a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d75ac:	bf1c      	itt	ne
   d75ae:	4610      	movne	r0, r2
   d75b0:	4619      	movne	r1, r3
   d75b2:	d10a      	bne.n	d75ca <__aeabi_dmul+0x24a>
   d75b4:	ea81 0103 	eor.w	r1, r1, r3
   d75b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d75c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d75c4:	f04f 0000 	mov.w	r0, #0
   d75c8:	bd70      	pop	{r4, r5, r6, pc}
   d75ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d75ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d75d2:	bd70      	pop	{r4, r5, r6, pc}

000d75d4 <__aeabi_ddiv>:
   d75d4:	b570      	push	{r4, r5, r6, lr}
   d75d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d75da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d75de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d75e2:	bf1d      	ittte	ne
   d75e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d75e8:	ea94 0f0c 	teqne	r4, ip
   d75ec:	ea95 0f0c 	teqne	r5, ip
   d75f0:	f000 f8a7 	bleq	d7742 <__aeabi_ddiv+0x16e>
   d75f4:	eba4 0405 	sub.w	r4, r4, r5
   d75f8:	ea81 0e03 	eor.w	lr, r1, r3
   d75fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7600:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7604:	f000 8088 	beq.w	d7718 <__aeabi_ddiv+0x144>
   d7608:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d760c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7610:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7614:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7618:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d761c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7620:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7624:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7628:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d762c:	429d      	cmp	r5, r3
   d762e:	bf08      	it	eq
   d7630:	4296      	cmpeq	r6, r2
   d7632:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7636:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d763a:	d202      	bcs.n	d7642 <__aeabi_ddiv+0x6e>
   d763c:	085b      	lsrs	r3, r3, #1
   d763e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7642:	1ab6      	subs	r6, r6, r2
   d7644:	eb65 0503 	sbc.w	r5, r5, r3
   d7648:	085b      	lsrs	r3, r3, #1
   d764a:	ea4f 0232 	mov.w	r2, r2, rrx
   d764e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7652:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7656:	ebb6 0e02 	subs.w	lr, r6, r2
   d765a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d765e:	bf22      	ittt	cs
   d7660:	1ab6      	subcs	r6, r6, r2
   d7662:	4675      	movcs	r5, lr
   d7664:	ea40 000c 	orrcs.w	r0, r0, ip
   d7668:	085b      	lsrs	r3, r3, #1
   d766a:	ea4f 0232 	mov.w	r2, r2, rrx
   d766e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7672:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7676:	bf22      	ittt	cs
   d7678:	1ab6      	subcs	r6, r6, r2
   d767a:	4675      	movcs	r5, lr
   d767c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7680:	085b      	lsrs	r3, r3, #1
   d7682:	ea4f 0232 	mov.w	r2, r2, rrx
   d7686:	ebb6 0e02 	subs.w	lr, r6, r2
   d768a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d768e:	bf22      	ittt	cs
   d7690:	1ab6      	subcs	r6, r6, r2
   d7692:	4675      	movcs	r5, lr
   d7694:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7698:	085b      	lsrs	r3, r3, #1
   d769a:	ea4f 0232 	mov.w	r2, r2, rrx
   d769e:	ebb6 0e02 	subs.w	lr, r6, r2
   d76a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76a6:	bf22      	ittt	cs
   d76a8:	1ab6      	subcs	r6, r6, r2
   d76aa:	4675      	movcs	r5, lr
   d76ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d76b0:	ea55 0e06 	orrs.w	lr, r5, r6
   d76b4:	d018      	beq.n	d76e8 <__aeabi_ddiv+0x114>
   d76b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d76ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d76be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d76c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d76c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d76ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d76ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d76d2:	d1c0      	bne.n	d7656 <__aeabi_ddiv+0x82>
   d76d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76d8:	d10b      	bne.n	d76f2 <__aeabi_ddiv+0x11e>
   d76da:	ea41 0100 	orr.w	r1, r1, r0
   d76de:	f04f 0000 	mov.w	r0, #0
   d76e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d76e6:	e7b6      	b.n	d7656 <__aeabi_ddiv+0x82>
   d76e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76ec:	bf04      	itt	eq
   d76ee:	4301      	orreq	r1, r0
   d76f0:	2000      	moveq	r0, #0
   d76f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d76f6:	bf88      	it	hi
   d76f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d76fc:	f63f aeaf 	bhi.w	d745e <__aeabi_dmul+0xde>
   d7700:	ebb5 0c03 	subs.w	ip, r5, r3
   d7704:	bf04      	itt	eq
   d7706:	ebb6 0c02 	subseq.w	ip, r6, r2
   d770a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d770e:	f150 0000 	adcs.w	r0, r0, #0
   d7712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7716:	bd70      	pop	{r4, r5, r6, pc}
   d7718:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d771c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7720:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7724:	bfc2      	ittt	gt
   d7726:	ebd4 050c 	rsbsgt	r5, r4, ip
   d772a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d772e:	bd70      	popgt	{r4, r5, r6, pc}
   d7730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7734:	f04f 0e00 	mov.w	lr, #0
   d7738:	3c01      	subs	r4, #1
   d773a:	e690      	b.n	d745e <__aeabi_dmul+0xde>
   d773c:	ea45 0e06 	orr.w	lr, r5, r6
   d7740:	e68d      	b.n	d745e <__aeabi_dmul+0xde>
   d7742:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7746:	ea94 0f0c 	teq	r4, ip
   d774a:	bf08      	it	eq
   d774c:	ea95 0f0c 	teqeq	r5, ip
   d7750:	f43f af3b 	beq.w	d75ca <__aeabi_dmul+0x24a>
   d7754:	ea94 0f0c 	teq	r4, ip
   d7758:	d10a      	bne.n	d7770 <__aeabi_ddiv+0x19c>
   d775a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d775e:	f47f af34 	bne.w	d75ca <__aeabi_dmul+0x24a>
   d7762:	ea95 0f0c 	teq	r5, ip
   d7766:	f47f af25 	bne.w	d75b4 <__aeabi_dmul+0x234>
   d776a:	4610      	mov	r0, r2
   d776c:	4619      	mov	r1, r3
   d776e:	e72c      	b.n	d75ca <__aeabi_dmul+0x24a>
   d7770:	ea95 0f0c 	teq	r5, ip
   d7774:	d106      	bne.n	d7784 <__aeabi_ddiv+0x1b0>
   d7776:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d777a:	f43f aefd 	beq.w	d7578 <__aeabi_dmul+0x1f8>
   d777e:	4610      	mov	r0, r2
   d7780:	4619      	mov	r1, r3
   d7782:	e722      	b.n	d75ca <__aeabi_dmul+0x24a>
   d7784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7788:	bf18      	it	ne
   d778a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d778e:	f47f aec5 	bne.w	d751c <__aeabi_dmul+0x19c>
   d7792:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7796:	f47f af0d 	bne.w	d75b4 <__aeabi_dmul+0x234>
   d779a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d779e:	f47f aeeb 	bne.w	d7578 <__aeabi_dmul+0x1f8>
   d77a2:	e712      	b.n	d75ca <__aeabi_dmul+0x24a>

000d77a4 <__aeabi_d2f>:
   d77a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d77a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d77ac:	bf24      	itt	cs
   d77ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d77b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d77b6:	d90d      	bls.n	d77d4 <__aeabi_d2f+0x30>
   d77b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d77bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d77c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d77c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d77c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d77cc:	bf08      	it	eq
   d77ce:	f020 0001 	biceq.w	r0, r0, #1
   d77d2:	4770      	bx	lr
   d77d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d77d8:	d121      	bne.n	d781e <__aeabi_d2f+0x7a>
   d77da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d77de:	bfbc      	itt	lt
   d77e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d77e4:	4770      	bxlt	lr
   d77e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d77ee:	f1c2 0218 	rsb	r2, r2, #24
   d77f2:	f1c2 0c20 	rsb	ip, r2, #32
   d77f6:	fa10 f30c 	lsls.w	r3, r0, ip
   d77fa:	fa20 f002 	lsr.w	r0, r0, r2
   d77fe:	bf18      	it	ne
   d7800:	f040 0001 	orrne.w	r0, r0, #1
   d7804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d780c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7810:	ea40 000c 	orr.w	r0, r0, ip
   d7814:	fa23 f302 	lsr.w	r3, r3, r2
   d7818:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d781c:	e7cc      	b.n	d77b8 <__aeabi_d2f+0x14>
   d781e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7822:	d107      	bne.n	d7834 <__aeabi_d2f+0x90>
   d7824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7828:	bf1e      	ittt	ne
   d782a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d782e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7832:	4770      	bxne	lr
   d7834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d783c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7840:	4770      	bx	lr
   d7842:	bf00      	nop

000d7844 <__aeabi_uldivmod>:
   d7844:	b953      	cbnz	r3, d785c <__aeabi_uldivmod+0x18>
   d7846:	b94a      	cbnz	r2, d785c <__aeabi_uldivmod+0x18>
   d7848:	2900      	cmp	r1, #0
   d784a:	bf08      	it	eq
   d784c:	2800      	cmpeq	r0, #0
   d784e:	bf1c      	itt	ne
   d7850:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7854:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d7858:	f000 b97e 	b.w	d7b58 <__aeabi_idiv0>
   d785c:	f1ad 0c08 	sub.w	ip, sp, #8
   d7860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7864:	f000 f806 	bl	d7874 <__udivmoddi4>
   d7868:	f8dd e004 	ldr.w	lr, [sp, #4]
   d786c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7870:	b004      	add	sp, #16
   d7872:	4770      	bx	lr

000d7874 <__udivmoddi4>:
   d7874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7878:	468c      	mov	ip, r1
   d787a:	460e      	mov	r6, r1
   d787c:	4604      	mov	r4, r0
   d787e:	9d08      	ldr	r5, [sp, #32]
   d7880:	2b00      	cmp	r3, #0
   d7882:	d150      	bne.n	d7926 <__udivmoddi4+0xb2>
   d7884:	428a      	cmp	r2, r1
   d7886:	4617      	mov	r7, r2
   d7888:	d96c      	bls.n	d7964 <__udivmoddi4+0xf0>
   d788a:	fab2 fe82 	clz	lr, r2
   d788e:	f1be 0f00 	cmp.w	lr, #0
   d7892:	d00b      	beq.n	d78ac <__udivmoddi4+0x38>
   d7894:	f1ce 0420 	rsb	r4, lr, #32
   d7898:	fa20 f404 	lsr.w	r4, r0, r4
   d789c:	fa01 f60e 	lsl.w	r6, r1, lr
   d78a0:	ea44 0c06 	orr.w	ip, r4, r6
   d78a4:	fa02 f70e 	lsl.w	r7, r2, lr
   d78a8:	fa00 f40e 	lsl.w	r4, r0, lr
   d78ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d78b0:	0c22      	lsrs	r2, r4, #16
   d78b2:	fbbc f0f9 	udiv	r0, ip, r9
   d78b6:	fa1f f887 	uxth.w	r8, r7
   d78ba:	fb09 c610 	mls	r6, r9, r0, ip
   d78be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d78c2:	fb00 f308 	mul.w	r3, r0, r8
   d78c6:	42b3      	cmp	r3, r6
   d78c8:	d909      	bls.n	d78de <__udivmoddi4+0x6a>
   d78ca:	19f6      	adds	r6, r6, r7
   d78cc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d78d0:	f080 8122 	bcs.w	d7b18 <__udivmoddi4+0x2a4>
   d78d4:	42b3      	cmp	r3, r6
   d78d6:	f240 811f 	bls.w	d7b18 <__udivmoddi4+0x2a4>
   d78da:	3802      	subs	r0, #2
   d78dc:	443e      	add	r6, r7
   d78de:	1af6      	subs	r6, r6, r3
   d78e0:	b2a2      	uxth	r2, r4
   d78e2:	fbb6 f3f9 	udiv	r3, r6, r9
   d78e6:	fb09 6613 	mls	r6, r9, r3, r6
   d78ea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d78ee:	fb03 f808 	mul.w	r8, r3, r8
   d78f2:	45a0      	cmp	r8, r4
   d78f4:	d909      	bls.n	d790a <__udivmoddi4+0x96>
   d78f6:	19e4      	adds	r4, r4, r7
   d78f8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d78fc:	f080 810a 	bcs.w	d7b14 <__udivmoddi4+0x2a0>
   d7900:	45a0      	cmp	r8, r4
   d7902:	f240 8107 	bls.w	d7b14 <__udivmoddi4+0x2a0>
   d7906:	3b02      	subs	r3, #2
   d7908:	443c      	add	r4, r7
   d790a:	ebc8 0404 	rsb	r4, r8, r4
   d790e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7912:	2100      	movs	r1, #0
   d7914:	2d00      	cmp	r5, #0
   d7916:	d062      	beq.n	d79de <__udivmoddi4+0x16a>
   d7918:	fa24 f40e 	lsr.w	r4, r4, lr
   d791c:	2300      	movs	r3, #0
   d791e:	602c      	str	r4, [r5, #0]
   d7920:	606b      	str	r3, [r5, #4]
   d7922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7926:	428b      	cmp	r3, r1
   d7928:	d907      	bls.n	d793a <__udivmoddi4+0xc6>
   d792a:	2d00      	cmp	r5, #0
   d792c:	d055      	beq.n	d79da <__udivmoddi4+0x166>
   d792e:	2100      	movs	r1, #0
   d7930:	e885 0041 	stmia.w	r5, {r0, r6}
   d7934:	4608      	mov	r0, r1
   d7936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d793a:	fab3 f183 	clz	r1, r3
   d793e:	2900      	cmp	r1, #0
   d7940:	f040 8090 	bne.w	d7a64 <__udivmoddi4+0x1f0>
   d7944:	42b3      	cmp	r3, r6
   d7946:	d302      	bcc.n	d794e <__udivmoddi4+0xda>
   d7948:	4282      	cmp	r2, r0
   d794a:	f200 80f8 	bhi.w	d7b3e <__udivmoddi4+0x2ca>
   d794e:	1a84      	subs	r4, r0, r2
   d7950:	eb66 0603 	sbc.w	r6, r6, r3
   d7954:	2001      	movs	r0, #1
   d7956:	46b4      	mov	ip, r6
   d7958:	2d00      	cmp	r5, #0
   d795a:	d040      	beq.n	d79de <__udivmoddi4+0x16a>
   d795c:	e885 1010 	stmia.w	r5, {r4, ip}
   d7960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7964:	b912      	cbnz	r2, d796c <__udivmoddi4+0xf8>
   d7966:	2701      	movs	r7, #1
   d7968:	fbb7 f7f2 	udiv	r7, r7, r2
   d796c:	fab7 fe87 	clz	lr, r7
   d7970:	f1be 0f00 	cmp.w	lr, #0
   d7974:	d135      	bne.n	d79e2 <__udivmoddi4+0x16e>
   d7976:	1bf3      	subs	r3, r6, r7
   d7978:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d797c:	fa1f fc87 	uxth.w	ip, r7
   d7980:	2101      	movs	r1, #1
   d7982:	fbb3 f0f8 	udiv	r0, r3, r8
   d7986:	0c22      	lsrs	r2, r4, #16
   d7988:	fb08 3610 	mls	r6, r8, r0, r3
   d798c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7990:	fb0c f300 	mul.w	r3, ip, r0
   d7994:	42b3      	cmp	r3, r6
   d7996:	d907      	bls.n	d79a8 <__udivmoddi4+0x134>
   d7998:	19f6      	adds	r6, r6, r7
   d799a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d799e:	d202      	bcs.n	d79a6 <__udivmoddi4+0x132>
   d79a0:	42b3      	cmp	r3, r6
   d79a2:	f200 80ce 	bhi.w	d7b42 <__udivmoddi4+0x2ce>
   d79a6:	4610      	mov	r0, r2
   d79a8:	1af6      	subs	r6, r6, r3
   d79aa:	b2a2      	uxth	r2, r4
   d79ac:	fbb6 f3f8 	udiv	r3, r6, r8
   d79b0:	fb08 6613 	mls	r6, r8, r3, r6
   d79b4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d79b8:	fb0c fc03 	mul.w	ip, ip, r3
   d79bc:	45a4      	cmp	ip, r4
   d79be:	d907      	bls.n	d79d0 <__udivmoddi4+0x15c>
   d79c0:	19e4      	adds	r4, r4, r7
   d79c2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d79c6:	d202      	bcs.n	d79ce <__udivmoddi4+0x15a>
   d79c8:	45a4      	cmp	ip, r4
   d79ca:	f200 80b5 	bhi.w	d7b38 <__udivmoddi4+0x2c4>
   d79ce:	4613      	mov	r3, r2
   d79d0:	ebcc 0404 	rsb	r4, ip, r4
   d79d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d79d8:	e79c      	b.n	d7914 <__udivmoddi4+0xa0>
   d79da:	4629      	mov	r1, r5
   d79dc:	4628      	mov	r0, r5
   d79de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79e2:	f1ce 0120 	rsb	r1, lr, #32
   d79e6:	fa06 f30e 	lsl.w	r3, r6, lr
   d79ea:	fa07 f70e 	lsl.w	r7, r7, lr
   d79ee:	fa20 f901 	lsr.w	r9, r0, r1
   d79f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d79f6:	40ce      	lsrs	r6, r1
   d79f8:	ea49 0903 	orr.w	r9, r9, r3
   d79fc:	fbb6 faf8 	udiv	sl, r6, r8
   d7a00:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7a04:	fb08 661a 	mls	r6, r8, sl, r6
   d7a08:	fa1f fc87 	uxth.w	ip, r7
   d7a0c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7a10:	fb0a f20c 	mul.w	r2, sl, ip
   d7a14:	429a      	cmp	r2, r3
   d7a16:	fa00 f40e 	lsl.w	r4, r0, lr
   d7a1a:	d90a      	bls.n	d7a32 <__udivmoddi4+0x1be>
   d7a1c:	19db      	adds	r3, r3, r7
   d7a1e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d7a22:	f080 8087 	bcs.w	d7b34 <__udivmoddi4+0x2c0>
   d7a26:	429a      	cmp	r2, r3
   d7a28:	f240 8084 	bls.w	d7b34 <__udivmoddi4+0x2c0>
   d7a2c:	f1aa 0a02 	sub.w	sl, sl, #2
   d7a30:	443b      	add	r3, r7
   d7a32:	1a9b      	subs	r3, r3, r2
   d7a34:	fa1f f989 	uxth.w	r9, r9
   d7a38:	fbb3 f1f8 	udiv	r1, r3, r8
   d7a3c:	fb08 3311 	mls	r3, r8, r1, r3
   d7a40:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7a44:	fb01 f60c 	mul.w	r6, r1, ip
   d7a48:	429e      	cmp	r6, r3
   d7a4a:	d907      	bls.n	d7a5c <__udivmoddi4+0x1e8>
   d7a4c:	19db      	adds	r3, r3, r7
   d7a4e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d7a52:	d26b      	bcs.n	d7b2c <__udivmoddi4+0x2b8>
   d7a54:	429e      	cmp	r6, r3
   d7a56:	d969      	bls.n	d7b2c <__udivmoddi4+0x2b8>
   d7a58:	3902      	subs	r1, #2
   d7a5a:	443b      	add	r3, r7
   d7a5c:	1b9b      	subs	r3, r3, r6
   d7a5e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7a62:	e78e      	b.n	d7982 <__udivmoddi4+0x10e>
   d7a64:	f1c1 0e20 	rsb	lr, r1, #32
   d7a68:	fa22 f40e 	lsr.w	r4, r2, lr
   d7a6c:	408b      	lsls	r3, r1
   d7a6e:	4323      	orrs	r3, r4
   d7a70:	fa20 f70e 	lsr.w	r7, r0, lr
   d7a74:	fa06 f401 	lsl.w	r4, r6, r1
   d7a78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7a7c:	fa26 f60e 	lsr.w	r6, r6, lr
   d7a80:	433c      	orrs	r4, r7
   d7a82:	fbb6 f9fc 	udiv	r9, r6, ip
   d7a86:	0c27      	lsrs	r7, r4, #16
   d7a88:	fb0c 6619 	mls	r6, ip, r9, r6
   d7a8c:	fa1f f883 	uxth.w	r8, r3
   d7a90:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7a94:	fb09 f708 	mul.w	r7, r9, r8
   d7a98:	42b7      	cmp	r7, r6
   d7a9a:	fa02 f201 	lsl.w	r2, r2, r1
   d7a9e:	fa00 fa01 	lsl.w	sl, r0, r1
   d7aa2:	d908      	bls.n	d7ab6 <__udivmoddi4+0x242>
   d7aa4:	18f6      	adds	r6, r6, r3
   d7aa6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7aaa:	d241      	bcs.n	d7b30 <__udivmoddi4+0x2bc>
   d7aac:	42b7      	cmp	r7, r6
   d7aae:	d93f      	bls.n	d7b30 <__udivmoddi4+0x2bc>
   d7ab0:	f1a9 0902 	sub.w	r9, r9, #2
   d7ab4:	441e      	add	r6, r3
   d7ab6:	1bf6      	subs	r6, r6, r7
   d7ab8:	b2a0      	uxth	r0, r4
   d7aba:	fbb6 f4fc 	udiv	r4, r6, ip
   d7abe:	fb0c 6614 	mls	r6, ip, r4, r6
   d7ac2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d7ac6:	fb04 f808 	mul.w	r8, r4, r8
   d7aca:	45b8      	cmp	r8, r7
   d7acc:	d907      	bls.n	d7ade <__udivmoddi4+0x26a>
   d7ace:	18ff      	adds	r7, r7, r3
   d7ad0:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d7ad4:	d228      	bcs.n	d7b28 <__udivmoddi4+0x2b4>
   d7ad6:	45b8      	cmp	r8, r7
   d7ad8:	d926      	bls.n	d7b28 <__udivmoddi4+0x2b4>
   d7ada:	3c02      	subs	r4, #2
   d7adc:	441f      	add	r7, r3
   d7ade:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d7ae2:	ebc8 0707 	rsb	r7, r8, r7
   d7ae6:	fba0 8902 	umull	r8, r9, r0, r2
   d7aea:	454f      	cmp	r7, r9
   d7aec:	4644      	mov	r4, r8
   d7aee:	464e      	mov	r6, r9
   d7af0:	d314      	bcc.n	d7b1c <__udivmoddi4+0x2a8>
   d7af2:	d029      	beq.n	d7b48 <__udivmoddi4+0x2d4>
   d7af4:	b365      	cbz	r5, d7b50 <__udivmoddi4+0x2dc>
   d7af6:	ebba 0304 	subs.w	r3, sl, r4
   d7afa:	eb67 0706 	sbc.w	r7, r7, r6
   d7afe:	fa07 fe0e 	lsl.w	lr, r7, lr
   d7b02:	40cb      	lsrs	r3, r1
   d7b04:	40cf      	lsrs	r7, r1
   d7b06:	ea4e 0303 	orr.w	r3, lr, r3
   d7b0a:	e885 0088 	stmia.w	r5, {r3, r7}
   d7b0e:	2100      	movs	r1, #0
   d7b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b14:	4613      	mov	r3, r2
   d7b16:	e6f8      	b.n	d790a <__udivmoddi4+0x96>
   d7b18:	4610      	mov	r0, r2
   d7b1a:	e6e0      	b.n	d78de <__udivmoddi4+0x6a>
   d7b1c:	ebb8 0402 	subs.w	r4, r8, r2
   d7b20:	eb69 0603 	sbc.w	r6, r9, r3
   d7b24:	3801      	subs	r0, #1
   d7b26:	e7e5      	b.n	d7af4 <__udivmoddi4+0x280>
   d7b28:	4604      	mov	r4, r0
   d7b2a:	e7d8      	b.n	d7ade <__udivmoddi4+0x26a>
   d7b2c:	4611      	mov	r1, r2
   d7b2e:	e795      	b.n	d7a5c <__udivmoddi4+0x1e8>
   d7b30:	4681      	mov	r9, r0
   d7b32:	e7c0      	b.n	d7ab6 <__udivmoddi4+0x242>
   d7b34:	468a      	mov	sl, r1
   d7b36:	e77c      	b.n	d7a32 <__udivmoddi4+0x1be>
   d7b38:	3b02      	subs	r3, #2
   d7b3a:	443c      	add	r4, r7
   d7b3c:	e748      	b.n	d79d0 <__udivmoddi4+0x15c>
   d7b3e:	4608      	mov	r0, r1
   d7b40:	e70a      	b.n	d7958 <__udivmoddi4+0xe4>
   d7b42:	3802      	subs	r0, #2
   d7b44:	443e      	add	r6, r7
   d7b46:	e72f      	b.n	d79a8 <__udivmoddi4+0x134>
   d7b48:	45c2      	cmp	sl, r8
   d7b4a:	d3e7      	bcc.n	d7b1c <__udivmoddi4+0x2a8>
   d7b4c:	463e      	mov	r6, r7
   d7b4e:	e7d1      	b.n	d7af4 <__udivmoddi4+0x280>
   d7b50:	4629      	mov	r1, r5
   d7b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b56:	bf00      	nop

000d7b58 <__aeabi_idiv0>:
   d7b58:	4770      	bx	lr
   d7b5a:	bf00      	nop

000d7b5c <atol>:
   d7b5c:	220a      	movs	r2, #10
   d7b5e:	2100      	movs	r1, #0
   d7b60:	f000 b8fc 	b.w	d7d5c <strtol>

000d7b64 <__cxa_atexit>:
   d7b64:	b510      	push	{r4, lr}
   d7b66:	4c05      	ldr	r4, [pc, #20]	; (d7b7c <__cxa_atexit+0x18>)
   d7b68:	4613      	mov	r3, r2
   d7b6a:	b12c      	cbz	r4, d7b78 <__cxa_atexit+0x14>
   d7b6c:	460a      	mov	r2, r1
   d7b6e:	4601      	mov	r1, r0
   d7b70:	2002      	movs	r0, #2
   d7b72:	f3af 8000 	nop.w
   d7b76:	bd10      	pop	{r4, pc}
   d7b78:	4620      	mov	r0, r4
   d7b7a:	bd10      	pop	{r4, pc}
   d7b7c:	00000000 	.word	0x00000000

000d7b80 <memcpy>:
   d7b80:	b510      	push	{r4, lr}
   d7b82:	1e43      	subs	r3, r0, #1
   d7b84:	440a      	add	r2, r1
   d7b86:	4291      	cmp	r1, r2
   d7b88:	d004      	beq.n	d7b94 <memcpy+0x14>
   d7b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b92:	e7f8      	b.n	d7b86 <memcpy+0x6>
   d7b94:	bd10      	pop	{r4, pc}

000d7b96 <memset>:
   d7b96:	4402      	add	r2, r0
   d7b98:	4603      	mov	r3, r0
   d7b9a:	4293      	cmp	r3, r2
   d7b9c:	d002      	beq.n	d7ba4 <memset+0xe>
   d7b9e:	f803 1b01 	strb.w	r1, [r3], #1
   d7ba2:	e7fa      	b.n	d7b9a <memset+0x4>
   d7ba4:	4770      	bx	lr
	...

000d7ba8 <srand>:
   d7ba8:	b538      	push	{r3, r4, r5, lr}
   d7baa:	4b12      	ldr	r3, [pc, #72]	; (d7bf4 <srand+0x4c>)
   d7bac:	681c      	ldr	r4, [r3, #0]
   d7bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7bb0:	4605      	mov	r5, r0
   d7bb2:	b9d3      	cbnz	r3, d7bea <srand+0x42>
   d7bb4:	2018      	movs	r0, #24
   d7bb6:	f7fd fe4f 	bl	d5858 <malloc>
   d7bba:	f243 330e 	movw	r3, #13070	; 0x330e
   d7bbe:	63a0      	str	r0, [r4, #56]	; 0x38
   d7bc0:	8003      	strh	r3, [r0, #0]
   d7bc2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7bc6:	8043      	strh	r3, [r0, #2]
   d7bc8:	f241 2334 	movw	r3, #4660	; 0x1234
   d7bcc:	8083      	strh	r3, [r0, #4]
   d7bce:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7bd2:	80c3      	strh	r3, [r0, #6]
   d7bd4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7bd8:	8103      	strh	r3, [r0, #8]
   d7bda:	2305      	movs	r3, #5
   d7bdc:	8143      	strh	r3, [r0, #10]
   d7bde:	230b      	movs	r3, #11
   d7be0:	8183      	strh	r3, [r0, #12]
   d7be2:	2201      	movs	r2, #1
   d7be4:	2300      	movs	r3, #0
   d7be6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7bec:	2200      	movs	r2, #0
   d7bee:	611d      	str	r5, [r3, #16]
   d7bf0:	615a      	str	r2, [r3, #20]
   d7bf2:	bd38      	pop	{r3, r4, r5, pc}
   d7bf4:	2003e2f4 	.word	0x2003e2f4

000d7bf8 <strcpy>:
   d7bf8:	4603      	mov	r3, r0
   d7bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7bfe:	f803 2b01 	strb.w	r2, [r3], #1
   d7c02:	2a00      	cmp	r2, #0
   d7c04:	d1f9      	bne.n	d7bfa <strcpy+0x2>
   d7c06:	4770      	bx	lr

000d7c08 <strdup>:
   d7c08:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <strdup+0xc>)
   d7c0a:	4601      	mov	r1, r0
   d7c0c:	6818      	ldr	r0, [r3, #0]
   d7c0e:	f000 b803 	b.w	d7c18 <_strdup_r>
   d7c12:	bf00      	nop
   d7c14:	2003e2f4 	.word	0x2003e2f4

000d7c18 <_strdup_r>:
   d7c18:	b570      	push	{r4, r5, r6, lr}
   d7c1a:	4606      	mov	r6, r0
   d7c1c:	4608      	mov	r0, r1
   d7c1e:	460c      	mov	r4, r1
   d7c20:	f000 f80d 	bl	d7c3e <strlen>
   d7c24:	1c45      	adds	r5, r0, #1
   d7c26:	4629      	mov	r1, r5
   d7c28:	4630      	mov	r0, r6
   d7c2a:	f7fd fe3d 	bl	d58a8 <_malloc_r>
   d7c2e:	4606      	mov	r6, r0
   d7c30:	b118      	cbz	r0, d7c3a <_strdup_r+0x22>
   d7c32:	462a      	mov	r2, r5
   d7c34:	4621      	mov	r1, r4
   d7c36:	f7ff ffa3 	bl	d7b80 <memcpy>
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	bd70      	pop	{r4, r5, r6, pc}

000d7c3e <strlen>:
   d7c3e:	4603      	mov	r3, r0
   d7c40:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7c44:	2a00      	cmp	r2, #0
   d7c46:	d1fb      	bne.n	d7c40 <strlen+0x2>
   d7c48:	1a18      	subs	r0, r3, r0
   d7c4a:	3801      	subs	r0, #1
   d7c4c:	4770      	bx	lr
	...

000d7c50 <_strtol_r>:
   d7c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c54:	4680      	mov	r8, r0
   d7c56:	4840      	ldr	r0, [pc, #256]	; (d7d58 <_strtol_r+0x108>)
   d7c58:	f8d0 9000 	ldr.w	r9, [r0]
   d7c5c:	460f      	mov	r7, r1
   d7c5e:	463d      	mov	r5, r7
   d7c60:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7c64:	eb09 0004 	add.w	r0, r9, r4
   d7c68:	7840      	ldrb	r0, [r0, #1]
   d7c6a:	f000 0008 	and.w	r0, r0, #8
   d7c6e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7c72:	b108      	cbz	r0, d7c78 <_strtol_r+0x28>
   d7c74:	462f      	mov	r7, r5
   d7c76:	e7f2      	b.n	d7c5e <_strtol_r+0xe>
   d7c78:	2c2d      	cmp	r4, #45	; 0x2d
   d7c7a:	d103      	bne.n	d7c84 <_strtol_r+0x34>
   d7c7c:	1cbd      	adds	r5, r7, #2
   d7c7e:	787c      	ldrb	r4, [r7, #1]
   d7c80:	2601      	movs	r6, #1
   d7c82:	e003      	b.n	d7c8c <_strtol_r+0x3c>
   d7c84:	2c2b      	cmp	r4, #43	; 0x2b
   d7c86:	bf04      	itt	eq
   d7c88:	787c      	ldrbeq	r4, [r7, #1]
   d7c8a:	1cbd      	addeq	r5, r7, #2
   d7c8c:	b113      	cbz	r3, d7c94 <_strtol_r+0x44>
   d7c8e:	2b10      	cmp	r3, #16
   d7c90:	d10a      	bne.n	d7ca8 <_strtol_r+0x58>
   d7c92:	e05b      	b.n	d7d4c <_strtol_r+0xfc>
   d7c94:	2c30      	cmp	r4, #48	; 0x30
   d7c96:	d157      	bne.n	d7d48 <_strtol_r+0xf8>
   d7c98:	7828      	ldrb	r0, [r5, #0]
   d7c9a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c9e:	2858      	cmp	r0, #88	; 0x58
   d7ca0:	d14d      	bne.n	d7d3e <_strtol_r+0xee>
   d7ca2:	786c      	ldrb	r4, [r5, #1]
   d7ca4:	2310      	movs	r3, #16
   d7ca6:	3502      	adds	r5, #2
   d7ca8:	2e00      	cmp	r6, #0
   d7caa:	bf14      	ite	ne
   d7cac:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7cb0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7cb4:	2700      	movs	r7, #0
   d7cb6:	fbbc faf3 	udiv	sl, ip, r3
   d7cba:	4638      	mov	r0, r7
   d7cbc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7cc0:	eb09 0e04 	add.w	lr, r9, r4
   d7cc4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7cc8:	f01e 0f04 	tst.w	lr, #4
   d7ccc:	d001      	beq.n	d7cd2 <_strtol_r+0x82>
   d7cce:	3c30      	subs	r4, #48	; 0x30
   d7cd0:	e00b      	b.n	d7cea <_strtol_r+0x9a>
   d7cd2:	f01e 0e03 	ands.w	lr, lr, #3
   d7cd6:	d01b      	beq.n	d7d10 <_strtol_r+0xc0>
   d7cd8:	f1be 0f01 	cmp.w	lr, #1
   d7cdc:	bf0c      	ite	eq
   d7cde:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7ce2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7ce6:	ebce 0404 	rsb	r4, lr, r4
   d7cea:	42a3      	cmp	r3, r4
   d7cec:	dd10      	ble.n	d7d10 <_strtol_r+0xc0>
   d7cee:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7cf2:	d00a      	beq.n	d7d0a <_strtol_r+0xba>
   d7cf4:	4550      	cmp	r0, sl
   d7cf6:	d806      	bhi.n	d7d06 <_strtol_r+0xb6>
   d7cf8:	d101      	bne.n	d7cfe <_strtol_r+0xae>
   d7cfa:	4564      	cmp	r4, ip
   d7cfc:	dc03      	bgt.n	d7d06 <_strtol_r+0xb6>
   d7cfe:	fb03 4000 	mla	r0, r3, r0, r4
   d7d02:	2701      	movs	r7, #1
   d7d04:	e001      	b.n	d7d0a <_strtol_r+0xba>
   d7d06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7d0a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7d0e:	e7d7      	b.n	d7cc0 <_strtol_r+0x70>
   d7d10:	1c7b      	adds	r3, r7, #1
   d7d12:	d10c      	bne.n	d7d2e <_strtol_r+0xde>
   d7d14:	2e00      	cmp	r6, #0
   d7d16:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7d1a:	bf14      	ite	ne
   d7d1c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7d20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7d24:	f8c8 3000 	str.w	r3, [r8]
   d7d28:	b92a      	cbnz	r2, d7d36 <_strtol_r+0xe6>
   d7d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d2e:	b106      	cbz	r6, d7d32 <_strtol_r+0xe2>
   d7d30:	4240      	negs	r0, r0
   d7d32:	b172      	cbz	r2, d7d52 <_strtol_r+0x102>
   d7d34:	b107      	cbz	r7, d7d38 <_strtol_r+0xe8>
   d7d36:	1e69      	subs	r1, r5, #1
   d7d38:	6011      	str	r1, [r2, #0]
   d7d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d3e:	2430      	movs	r4, #48	; 0x30
   d7d40:	2b00      	cmp	r3, #0
   d7d42:	d1b1      	bne.n	d7ca8 <_strtol_r+0x58>
   d7d44:	2308      	movs	r3, #8
   d7d46:	e7af      	b.n	d7ca8 <_strtol_r+0x58>
   d7d48:	230a      	movs	r3, #10
   d7d4a:	e7ad      	b.n	d7ca8 <_strtol_r+0x58>
   d7d4c:	2c30      	cmp	r4, #48	; 0x30
   d7d4e:	d0a3      	beq.n	d7c98 <_strtol_r+0x48>
   d7d50:	e7aa      	b.n	d7ca8 <_strtol_r+0x58>
   d7d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d56:	bf00      	nop
   d7d58:	2003e290 	.word	0x2003e290

000d7d5c <strtol>:
   d7d5c:	4613      	mov	r3, r2
   d7d5e:	460a      	mov	r2, r1
   d7d60:	4601      	mov	r1, r0
   d7d62:	4802      	ldr	r0, [pc, #8]	; (d7d6c <strtol+0x10>)
   d7d64:	6800      	ldr	r0, [r0, #0]
   d7d66:	f7ff bf73 	b.w	d7c50 <_strtol_r>
   d7d6a:	bf00      	nop
   d7d6c:	2003e2f4 	.word	0x2003e2f4

000d7d70 <dynalib_user>:
   d7d70:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7d80:	00000000 09e6a7e7 72657469 6f697461     ........iteratio
   d7d90:	2520736e 6f430064 69206564 61762073     ns %d.Code is va
   d7da0:	2164696c 61747300 75207472 74616470     lid!.start updat
   d7db0:	72650065 00657361 616d7068 6863203a     e.erase.hpma: ch
   d7dc0:	736b6365 66206d75 006c6961 616d7068     ecksum fail.hpma
   d7dd0:	6863203a 736b6365 00006d75              : checksum..

000d7ddc <_ZTV5Timer>:
	...
   d7de4:	000d4a91 000d4ad9 000d4b0b 77707061     .J...J...K..appw
   d7df4:	2c007464 326d7022 253a2235 70222c64     dt.,"pm25":%d,"p
   d7e04:	2230316d 0064253a 616d7068 79647220     m10":%d.hpma rdy
   d7e14:	6d706800 69742061 756f656d 61640074     .hpma timeout.da
   d7e24:	73206174 00646e65 6c62007d 7b00626f     ta send.}.blob.{
   d7e34:	65742200 7265706d 72757461 253a2265     ."temperature":%
   d7e44:	2c66322e 6d756822 74696469 253a2279     .2f,"humidity":%
   d7e54:	0066322e 706d6574 79647220 6d657400     .2f.temp rdy.tem
   d7e64:	65740070 6520706d 2c007272 6f767422     p.temp err.,"tvo
   d7e74:	253a2263 63222c64 3a223230 74006425     c":%d,"c02":%d.t
   d7e84:	20636f76 00796472 61746166 7674206c     voc rdy.fatal tv
   d7e94:	6520636f 726f7272 6f767400 76740063     oc error.tvoc.tv
   d7ea4:	6520636f 75007272 74616470 65722065     oc err.update re
   d7eb4:	6e696461 65702067 646f6972 0a642520     ading period %d.
   d7ec4:	37697300 20313230 75746573 72652070     .si7021 setup er
   d7ed4:	64252072 6363000a 31313873 74657320     r %d..ccs811 set
   d7ee4:	65207075 25207272 63000a64 31387363     up err %d..ccs81
   d7ef4:	65762031 78252072 2e64252e 000a6425     1 ver %x.%d.%d..
   d7f04:	38736363 6e203131 7075206f 65746164     ccs811 no update
   d7f14:	65656e20 0a646564 73636300 20313138      needed..ccs811 
   d7f24:	61647075 65206574 25207272 63000a64     update err %d..c
   d7f34:	31387363 6e652031 656c6261 72726520     cs811 enable err
   d7f44:	0a642520 6d706800 35313161 616e6520      %d..hpma115 ena
   d7f54:	20656c62 20727265 000a6425 5f746573     ble err %d..set_
   d7f64:	69726570 0000646f                       period..

000d7f6c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7f74:	000d58e7 000d58ed 000d5905 000d58fb     .X...X...Y...X..
   d7f84:	000d58e9                                .X..

000d7f88 <_ZTVN5spark13EthernetClassE>:
	...
   d7f90:	000d5edf 000d5ed5 000d5ecb 000d5ec1     .^...^...^...^..
   d7fa0:	000d5eb5 000d5ea9 000d5e9d 000d5e95     .^...^...^...^..
   d7fb0:	000d5e8b 000d5e81 000d62dd              .^...^...b..

000d7fbc <_ZTV7TwoWire>:
	...
   d7fc4:	000d5efd 000d5f47 000d5f1f 000d5eff     .^..G_..._...^..
   d7fd4:	000d5f27 000d5f2f 000d5f37 000d5f3f     '_../_..7_..?_..

000d7fe4 <_ZTV9IPAddress>:
	...
   d7fec:	000d6031 000d6021 000d6023 66006e6c     1`..!`..#`..ln.f
   d7ffc:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
   d800c:	31302500 00207530 2c00205d 29280020     .%010u .] ., .()
   d801c:	2000203a 6f63005b 3d206564 69250020     : . [.code = .%i
   d802c:	74656400 736c6961 00203d20 64756162     .details = .baud
   d803c:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d804c:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
   d805c:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
   d806c:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
   d807c:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   d808c:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   d809c:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   d80ac:	6e007070 00656e6f 63617274 6e690065     pp.none.trace.in
   d80bc:	77006f66 006e7261 696e6170 6c610063     fo.warn.panic.al
   d80cc:	0000006c                                l...

000d80d0 <_ZTVN5spark9MeshClassE>:
	...
   d80d8:	000d6173 000d6169 000d615f 000d6155     sa..ia.._a..Ua..
   d80e8:	000d6149 000d613d 000d6131 000d6129     Ia..=a..1a..)a..
   d80f8:	000d611f 000d6115 000d62dd              .a...a...b..

000d8104 <_ZTVN5spark12NetworkClassE>:
	...
   d810c:	000d6275 000d627f 000d6289 000d6293     ub...b...b...b..
   d811c:	000d629d 000d62a9 000d62b5 000d62c1     .b...b...b...b..
   d812c:	000d62c9 000d62d3 000d62dd              .b...b...b..

000d8138 <_ZTV8SPIClass>:
	...
   d8140:	000d6535 000d6537 2b25005a 3a643330     5e..7e..Z.%+03d:
   d8150:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d8160:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d8170:	00000000                                ....

000d8174 <_ZTV11USARTSerial>:
	...
   d817c:	000d67f9 000d6849 000d6857 000d63bd     .g..Ih..Wh...c..
   d818c:	000d680d 000d682f 000d681b 000d6843     .h../h...h..Ch..
   d819c:	000d67fb 000d67ff                       .g...g..

000d81a4 <_ZTV9USBSerial>:
	...
   d81ac:	000d690d 000d695d 000d696b 000d63bd     .i..]i..ki...c..
   d81bc:	000d6949 000d690f 000d6925 000d6957     Ii...i..%i..Wi..
   d81cc:	000d693b 000d6909                       ;i...i..

000d81d4 <_ZTVN5spark9WiFiClassE>:
	...
   d81dc:	000d6a77 000d6a6d 000d6a63 000d6a19     wj..mj..cj...j..
   d81ec:	000d6a57 000d6a4b 000d6a3f 000d6a37     Wj..Kj..?j..7j..
   d81fc:	000d6a2d 000d6a23 000d62dd              -j..#j...b..

000d8208 <_ZSt7nothrow>:
	...

000d8209 <_ctype_>:
   d8209:	20202000 20202020 28282020 20282828     .         ((((( 
   d8219:	20202020 20202020 20202020 20202020                     
   d8229:	10108820 10101010 10101010 10101010      ...............
   d8239:	04040410 04040404 10040404 10101010     ................
   d8249:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8259:	01010101 01010101 01010101 10101010     ................
   d8269:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8279:	02020202 02020202 02020202 10101010     ................
   d8289:	00000020 00000000 00000000 00000000      ...............
	...

000d830c <__sf_fake_stdin>:
	...

000d832c <__sf_fake_stdout>:
	...

000d834c <__sf_fake_stderr>:
	...
   d836c:	00000043                                         C.

000d836e <link_const_variable_data_end>:
	...

000d8370 <link_constructors_location>:
   d8370:	000d45cd 	.word	0x000d45cd
   d8374:	000d45d1 	.word	0x000d45d1
   d8378:	000d4791 	.word	0x000d4791
   d837c:	000d50bd 	.word	0x000d50bd
   d8380:	000d51f1 	.word	0x000d51f1
   d8384:	000d5309 	.word	0x000d5309
   d8388:	000d530d 	.word	0x000d530d
   d838c:	000d5ee9 	.word	0x000d5ee9
   d8390:	000d6105 	.word	0x000d6105
   d8394:	000d6229 	.word	0x000d6229
   d8398:	000d63a9 	.word	0x000d63a9
   d839c:	000d6519 	.word	0x000d6519
   d83a0:	000d67cd 	.word	0x000d67cd
   d83a4:	000d67e5 	.word	0x000d67e5
   d83a8:	000d6a81 	.word	0x000d6a81
   d83ac:	000d6cf9 	.word	0x000d6cf9
   d83b0:	000d6d81 	.word	0x000d6d81
   d83b4:	000d6e45 	.word	0x000d6e45
   d83b8:	000d6ec9 	.word	0x000d6ec9
   d83bc:	000d6f4d 	.word	0x000d6f4d
